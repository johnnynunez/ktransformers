{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if current_group:\n                current_group.append(char)\n                result.append(''.join(current_group))\n                current_group = []\n        else:\n            pass\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Invalid case, but per problem description, inputs are valid\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"idx": 11, "completion": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note in note_to_beats:\n            beats.append(note_to_beats[note])\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list = [number_map[num] for num in numbers_list]\n    numbers_list.sort()\n    numbers_list = [str(num) for num in numbers_list]\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count"}
{"idx": 24, "completion": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return 0"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n            result.append(num)\n        else:\n            seen[num] += 1\n    for num in seen:\n        if seen[num] == 1:\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    lo = -1\n    hi = 1\n    while poly(xs, lo) * poly(xs, hi) > 0:\n        lo *= 2\n        hi *= 2\n    while hi - lo > 1e-10:  # arbitrary threshold; alternatives exist\n        mid = (lo + hi) / 2\n        if poly(xs, lo) * poly(xs, mid) <= 0:\n            hi = mid\n        else:\n            lo = mid\n    return lo"}
{"idx": 33, "completion": "l_prime = l.copy()\n    divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    divisible_by_three_values = [l[i] for i in divisible_by_three]\n    divisible_by_three_values.sort()\n    for i, value in zip(divisible_by_three, divisible_by_three_values):\n        l_prime[i] = value\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    even_values = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(i)\n            even_values.append(l[i])\n    even_values.sort()\n    for i in range(len(even_indicies)):\n        l[even_indicies[i]] = even_values[i]\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = [0, 1]\n    prime_fib_numbers = []\n    while len(prime_fib_numbers) < n:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_fib)\n        if is_prime(next_fib):\n            prime_fib_numbers.append(next_fib)\n    return prime_fib_numbers[n-1]"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    if len(l_sorted) % 2 == 1:\n        return l_sorted[len(l_sorted) // 2]\n    else:\n        return (l_sorted[len(l_sorted) // 2 - 1] + l_sorted[len(l_sorted) // 2]) / 2"}
{"idx": 48, "completion": "text = text.replace(\" \", \"\").lower()\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n\n    # Another solution\n    # return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "common_elements = set(l1) & set(l2)\n    return sorted(common_elements)"}
{"idx": 59, "completion": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return n\n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return largest_prime_factor(n // i)\n    return -1  # dummy, should never get here"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [x * i for i, x in enumerate(xs)][1:]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s)-1:\n            count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n\n    smallest_even = None\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even and index < smallest_index:\n                smallest_index = index\n\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Create a frequency dictionary to count occurrences of each number\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    \n    # Iterate through the dictionary to find the largest number that meets the condition\n    max_num = -1\n    for num in frequency:\n        if num == frequency[num] and num > max_num:\n            max_num = num\n    \n    return max_num"}
{"idx": 70, "completion": "# Your code here\n    if not lst:\n        return []\n    lst = sorted(lst)\n    result = []\n    while len(lst) > 0:\n        result.append(lst.pop(0))\n        if len(lst) > 0:\n            result.append(lst.pop(-1))\n    return result"}
{"idx": 71, "completion": "if (a + b) > c and (a + c) > b and (b + c) > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is a palindrome\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum weight\n    if sum(q) > w:\n        return False\n    return True"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    # Determine which list to return based on the total characters\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, int(num ** 0.5) + 1)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "# Check if the cube root of the absolute value of 'a' is an integer\n    # If 'a' is negative, the cube root should also be negative\n    # So, we take the absolute value of 'a' and then check if its cube root is an integer\n    # Finally, we check if the cube of this integer (or its negative counterpart for negative 'a') equals 'a'\n    return round(abs(a) ** (1/3)) ** 3 == abs(a) and (a < 0 or round(a ** (1/3)) ** 3 == a)"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # convert decimal to binary and remove '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 10 ** (n - 1)"}
{"idx": 84, "completion": "sum_digits = sum(int(d) for d in str(N))\n    return bin(sum_digits)[2:]"}
{"idx": 85, "completion": "sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    \n    if sum_fl % 2 != 0:\n        # Sort in ascending order\n        return sorted(array)\n    else:\n        # Sort in descending order\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4  # Shift down by two multiplied by two places (2 * 2 = 4)\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n                encrypted += chr(shifted)\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n                encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for c in S:\n        if c in '.?!':\n            sentences.append(''.join(current_sentence).strip())\n            current_sentence = []\n        else:\n            current_sentence.append(c)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    return sum(1 for s in sentences if s.startswith('I '))"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = 'aeiouAEIOU'\n    encoded = []\n    for char in message:\n        if char in vowels:\n            # Determine the new character by moving two places ahead\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            encoded.append(new_char)\n        else:\n            # Swap the case of the character\n            if char.islower():\n                encoded.append(char.upper())\n            else:\n                encoded.append(char.lower())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(d) for d in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    lower = all(isinstance(key, str) and key.islower() for key in keys)\n    upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return lower or upper"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Get the unit digits of each number\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_a * unit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return s.replace(',', ' ').split()\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    else:\n        for i in range(y, x-1, -1):\n            if i % 2 == 0:\n                return i\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    average = round((n + m) / 2)\n    return bin(average)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in filtered:\n        result.append(names[num - 1])\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_num = 0\n            for j in range(1, i + 1):\n                sum_num += j\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "if not arr:\n        return 0\n    \n    count = 0\n    for num in arr:\n        if num == 0:\n            continue\n        sum_digits = 0\n        n = abs(num)\n        while n > 0:\n            sum_digits += n % 10\n            n = n // 10\n        if num < 0:\n            sum_digits = -sum_digits\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of odd numbers in lst1 can be replaced by even numbers from lst2, return \"YES\"\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letters = test.split()\n    if not letters:\n        return {}\n    \n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units == 0:\n            continue\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "# Handle negative numbers by converting to positive for bit count, but sort based on original values\n    def count_ones(n):\n        if n < 0:\n            # For negative numbers, use two's complement representation\n            # The number of set bits in a negative number is the same as in its absolute value minus one, but it's complex\n            # For simplicity, we'll treat negative numbers as their positive counterparts for bit counting\n            n = -n\n        return bin(n).count('1')\n    \n    # Sort the array based on the number of ones in binary representation, then by decimal value\n    sorted_arr = sorted(arr, key=lambda x: (count_ones(x), x))\n    return sorted_arr"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    word = word.lower()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i].upper() if word[i].isupper() else word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is already balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if concatenating in any order can balance\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum_ = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum_ += arr[i]\n    return sum_"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers"}
{"idx": 124, "completion": "if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month = date[:2]\n    day = date[3:5]\n    year = date[6:]\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n            sum_magnitudes += num\n        elif num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n        else:\n            product *= 0\n    \n    return product * sum_magnitudes"}
{"idx": 129, "completion": "n = len(grid)\n    min_path = None\n    \n    def dfs(i, j, path, visited):\n        nonlocal min_path\n        if len(path) == k:\n            if min_path is None or path < min_path:\n                min_path = path.copy()\n            return\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                path.append(grid[ni][nj])\n                dfs(ni, nj, path, visited)\n                path.pop()\n                visited.remove((ni, nj))\n    \n    for i in range(n):\n        for j in range(n):\n            dfs(i, j, [grid[i][j]], {(i, j)})\n    \n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) == 0 and string.count('[') >= 2 and string.count(']') >= 2"}
{"idx": 133, "completion": "# Round each element in the list to the upper integer (ceiling)\n    rounded = [math.ceil(x) for x in lst]\n    \n    # Square each element in the rounded list\n    squared = [x ** 2 for x in rounded]\n    \n    # Sum all the squared elements\n    total = sum(squared)\n    \n    return total"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    if not negative_integers:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n\n    if not positive_integers:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert both inputs to strings for processing\n    str_a = str(a)\n    str_b = str(b)\n    \n    # Replace commas with dots to handle different decimal separators\n    str_a_processed = str_a.replace(',', '.')\n    str_b_processed = str_b.replace(',', '.')\n    \n    try:\n        # Try to convert processed strings to floats\n        num_a = float(str_a_processed)\n        num_b = float(str_b_processed)\n        \n        if num_a > num_b:\n            return a\n        elif num_b > num_a:\n            return b\n        else:\n            return None\n    except ValueError:\n        # In case conversion fails (unlikely based on problem statement), return None\n        return None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive underscores with a single dash\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    # Check the number of dots in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the name and extension\n    name_part, ext_part = file_name.split('.')\n    \n    # Check the name part\n    if not name_part:\n        return 'No'\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check the extension part\n    if ext_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return ' '.join(primes)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if len(num_str) > 0:\n                first_digit = int(num_str[0])\n                last_digit = int(num_str[-1])\n                if first_digit % 2 != 0 and last_digit % 2 != 0:\n                    count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"idx": 150, "completion": "if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "sum_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_squares += num ** 2\n    return sum_squares"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is already a substring of the first word\n    if b in a:\n        return True\n    \n    # Generate all rotations of the second word\n    rotations = []\n    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        rotations.append(rotation)\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = []\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: -x[0]):\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [total_eaten, left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "# Remove all spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    result = []\n    current_group = []\n    stack = []\n    \n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n    \n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_diffs = [abs(num - mean) for num in numbers]\n    return sum(absolute_diffs) / len(absolute_diffs)"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Handle invalid cases where closing bracket appears before opening\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return string\n    # Find the longest palindromic suffix\n    suffix_length = 0\n    for i in range(len(string)):\n        substring = string[i:]\n        if is_palindrome(substring):\n            suffix_length = len(substring)\n            break\n    # The suffix starts at this index\n    start = len(string) - suffix_length\n    # Append reverse of the prefix before the suffix\n    return string + string[:start][::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError(\"Input strings must be of the same length.\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a == '1' and char_b == '1':\n            result.append('0')\n        elif char_a == '0' and char_b == '0':\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"idx": 17, "completion": "beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers = numbers.split()\n    numbers = [num_dict[num] for num in numbers]\n    numbers.sort()\n    numbers = [list(num_dict.keys())[list(num_dict.values()).index(num)] for num in numbers]\n    return ' '.join(numbers)"}
{"idx": 20, "completion": "numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i+1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers_sorted[i], numbers_sorted[i+1])\n    \n    return result"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    if min_num == max_num:\n        return [0.0] * len(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count"}
{"idx": 24, "completion": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return 0"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "# Create a dictionary to keep track of the count of each number\n    count_dict = {}\n    # Iterate through the list to populate the dictionary\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # Create a new list that includes only the numbers with count 1\n    result = [num for num in numbers if count_dict[num] == 1]\n    return result"}
{"idx": 27, "completion": "new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char.lower())\n        else:\n            new_string.append(char.upper())\n    return ''.join(new_string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    lo = -1\n    hi = 1\n    while poly(xs, lo) * poly(xs, hi) > 0:\n        lo *= 2\n        hi *= 2\n    while hi - lo > 1e-10:  # Note: This is the precision given in the problem description.\n        mid = (lo + hi) / 2\n        if poly(xs, lo) * poly(xs, mid) <= 0:\n            hi = mid\n        else:\n            lo = mid\n    return lo"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices_sorted = sorted(even_indices)\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_sorted[i//2])\n        else:\n            result.append(l[i])\n    return result"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    a, b = 0, 1\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        return (l_sorted[n // 2 - 1] + l_sorted[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = []\n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    return ''.join(result)"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "# Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n    \n    # Convert the result to a sorted list\n    result = sorted(common_elements)\n    \n    return result"}
{"idx": 59, "completion": "# The function starts by initializing a variable i to 2, which is the smallest prime number.\n    i = 2\n    # The while loop continues as long as i squared is less than or equal to n. This is because if i is larger than the square root of n, then i cannot be a factor of n anymore.\n    while i * i <= n:\n        # Inside the loop, the function checks if i is a factor of n (i.e., if n is divisible by i).\n        if n % i:\n            # If i is not a factor of n, the function increments i by 1 and continues to the next iteration.\n            i += 1\n        else:\n            # If i is a factor of n, the function divides n by i and continues the loop with the same value of i. This is because i could be a multiple factor of n (e.g., 2 is a factor of 8 three times).\n            n //= i\n    # Once the loop ends, the function returns the remaining value of n, which is the largest prime factor of the original n.\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [x * i for i, x in enumerate(xs)][1:]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if len(s) > 0 and s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# your code here\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    return n - apples - oranges"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_index = -1\n    \n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = index\n            elif num == smallest_even and index < smallest_index:\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Your code here\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_num = -1\n    for num in freq:\n        if freq[num] >= num and num > max_num:\n            max_num = num\n    return max_num"}
{"idx": 70, "completion": "if not lst:\n        return []\n    sorted_lst = []\n    lst_copy = lst.copy()\n    while lst_copy:\n        min_val = min(lst_copy)\n        sorted_lst.append(min_val)\n        lst_copy.remove(min_val)\n        if lst_copy:\n            max_val = max(lst_copy)\n            sorted_lst.append(max_val)\n            lst_copy.remove(max_val)\n    return sorted_lst"}
{"idx": 71, "completion": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)"}
{"idx": 72, "completion": "# Check if the list is a palindrome\n    is_palindrome = q == q[::-1]\n    \n    # Calculate the sum of the elements\n    sum_elements = sum(q)\n    \n    # Determine if the object will fly\n    return is_palindrome and sum_elements <= w"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the input is 0, which is a cube of 0\n    if a == 0:\n        return True\n    \n    # Determine the absolute value to handle negative numbers\n    abs_a = abs(a)\n    \n    # Iterate possible cube roots from 0 to the absolute value of a\n    for i in range(abs_a + 1):\n        cube = i ** 3\n        if cube == abs_a:\n            return True\n        if cube > abs_a:\n            break  # No need to check further if cube exceeds a\n    \n    return False"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 10 ** (n - 1) + 9 * 10 ** (n - 2) - 9 ** (n - 1)"}
{"idx": 84, "completion": "sum_digits = sum(int(d) for d in str(N))\n    return bin(sum_digits)[2:]"}
{"idx": 85, "completion": "return sum([num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    # Sort by row in ascending order, then by column in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    \n    if sum_fl % 2 == 1:  # Sum is odd, sort in ascending order\n        return sorted(array)\n    else:  # Sum is even, sort in descending order\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = []\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n            encrypted.append(shifted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for char in S:\n        if char in ['.', '?', '!']:\n            sentences.append(''.join(current_sentence).strip())\n            current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = 'aeiouAEIOU'\n    encoded = []\n    for char in message:\n        if char in vowels:\n            # Determine the new character by shifting 2 places ahead\n            new_char = chr(ord(char) + 2)\n            # Handle edge cases for 'y' and 'Y' (though vowels are a, e, i, o, u)\n            if char.lower() == 'y':\n                new_char = 'a' if char.islower() else 'A'\n            elif char.lower() == 'u':\n                new_char = 'w' if char.islower() else 'W'\n            elif char.lower() == 'U':\n                new_char = 'W'\n            encoded.append(new_char)\n        else:\n            # Swap the case of non-vowel letters\n            new_char = char.swapcase()\n            encoded.append(new_char)\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_divisor = int(n**0.5) + 1\n        for d in range(3, max_divisor, 2):\n            if n % d == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    if max_prime == 0:\n        return 0\n    \n    return sum(int(d) for d in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Get the unit digit of each number\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_a * unit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num > 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if abs(num - int(num)) >= 0.5:\n            return int(num) - 1\n        else:\n            return int(num)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return s.replace(',', ' ').split()\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "def has_even_digit(n):\n        \"\"\"Check if the number n has any even digits.\"\"\"\n        while n > 0:\n            digit = n % 10\n            if digit % 2 == 0:\n                return True\n            n = n // 10\n        return False\n    \n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"}
{"idx": 105, "completion": "if not arr:\n        return []\n    \n    # Filter and sort the relevant numbers\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered_sorted = sorted(filtered)\n    filtered_sorted_reversed = filtered_sorted[::-1]\n    \n    # Map numbers to their corresponding names\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = [number_names[num] for num in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_i = 0\n            for j in range(1, i+1):\n                sum_i += j\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Check if all elements in lst1 are already even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Count the number of odd numbers in lst1 and even numbers in lst2\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if even_in_lst2 >= odd_in_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letter_counts = {}\n    letters = test.split()\n    \n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    if not letter_counts:\n        return {}\n    \n    max_count = max(letter_counts.values())\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units == 0:\n            continue\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x if x >= 0 else ~x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n    word = word.lower()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if concatenating in any order gives a balanced string\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "return sum([num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 != 0])"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n\n    # Check the format using a regular expression\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # February\n        # Check for leap year\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n    \n    # Check if there is an overlap\n    if overlap_start > overlap_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = overlap_end - overlap_start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes"}
{"idx": 129, "completion": "n = len(grid)\n    min_val = float('inf')\n    min_path = []\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] < min_val:\n                min_val = grid[i][j]\n                min_path = [grid[i][j]]\n    \n    if k == 1:\n        return min_path\n    \n    neighbors = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == min_val:\n                if i > 0:\n                    neighbors.append((i-1, j))\n                if i < n-1:\n                    neighbors.append((i+1, j))\n                if j > 0:\n                    neighbors.append((i, j-1))\n                if j < n-1:\n                    neighbors.append((i, j+1))\n    \n    next_min = float('inf')\n    for (i, j) in neighbors:\n        if grid[i][j] < next_min:\n            next_min = grid[i][j]\n    \n    min_path.append(next_min)\n    \n    if k == 2:\n        return min_path\n    \n    candidates = []\n    for (i, j) in neighbors:\n        if grid[i][j] == next_min:\n            candidates.append((i, j))\n    \n    next_neighbors = []\n    for (i, j) in candidates:\n        if i > 0:\n            next_neighbors.append((i-1, j))\n        if i < n-1:\n            next_neighbors.append((i+1, j))\n        if j > 0:\n            next_neighbors.append((i, j-1))\n        if j < n-1:\n            next_neighbors.append((i, j+1))\n    \n    next_next_min = float('inf')\n    for (i, j) in next_neighbors:\n        if grid[i][j] < next_next_min:\n            next_next_min = grid[i][j]\n    \n    min_path.append(next_next_min)\n    \n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                if len(stack) > 0 and stack[-1] == '[':\n                    return True\n            else:\n                stack.append(char)\n    return False"}
{"idx": 133, "completion": "return sum([math.ceil(x)**2 for x in lst])"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        else:\n            return value\n\n    parsed_a = parse_value(a)\n    parsed_b = parse_value(b)\n\n    if isinstance(parsed_a, str) or isinstance(parsed_b, str):\n        if str(parsed_a) == str(parsed_b):\n            return None\n        return a if str(parsed_a) > str(parsed_b) else b\n    else:\n        if parsed_a == parsed_b:\n            return None\n        return a if parsed_a > parsed_b else b"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive underscores with a dash\n    while '__' in text:\n        text = text.replace('__', '-')\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name_part, extension = file_name.split('.')\n    \n    # Check name part\n    if not name_part:\n        return 'No'\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    primes = []\n    for word in words:\n        length = len(word)\n        if length > 1:\n            is_prime = True\n            for i in range(2, int(length ** 0.5) + 1):\n                if length % i == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(word)\n    return ' '.join(primes)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    numerator = x_num * n_num\n    denominator = x_den * n_den\n    \n    return numerator % denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if len(num_str) > 0:\n                first_digit = int(num_str[0])\n                last_digit = int(num_str[-1])\n                if first_digit % 2 != 0 and last_digit % 2 != 0:\n                    count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "filtered = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered, key=lambda x: (len(x), x))"}
{"idx": 150, "completion": "if n == 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))"}
{"idx": 152, "completion": "return [abs(score - guess) for score, guess in zip(game, guess)]"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if not a or not b:\n        return False\n    \n    len_b = len(b)\n    double_a = a + a  # This allows us to check all possible rotations as substrings\n    \n    for i in range(len_b):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result.append(roman_numerals[value])\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [total_eaten, left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += op + str(num)\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for num in range(a, b + 1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"idx": 0, "completion": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"idx": 1, "completion": "# Remove all spaces from the input string\n    paren_string = paren_string.replace(' ', '')\n    \n    result = []\n    stack = []\n    current_group = []\n    \n    for char in paren_string:\n        if char == '(':\n            if stack:\n                current_group.append(char)\n            stack.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n    \n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Invalid parentheses string, handle as needed\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return string\n    # Find the longest palindromic suffix.\n    i = len(string)\n    while i > 0 and not is_palindrome(string[i-1:]):\n        i -= 1\n    # Append the reverse of the prefix before the palindromic suffix.\n    return string + string[:i-1][::-1]"}
{"idx": 11, "completion": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "beat_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note in beat_dict:\n            beats.append(beat_dict[note])\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int) and not isinstance(value, bool)]"}
{"idx": 23, "completion": "length = 0\n    for _ in string:\n        length += 1\n    return length"}
{"idx": 24, "completion": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return 0"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n            result.append(num)\n        else:\n            seen[num] += 1\n    return result"}
{"idx": 27, "completion": "new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char.lower())\n        else:\n            new_string.append(char.upper())\n    return ''.join(new_string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    lo = -1\n    hi = 1\n    while poly(xs, lo) * poly(xs, hi) > 0:\n        lo *= 2\n        hi *= 2\n    while lo <= hi:\n        mid = (lo + hi) / 2\n        if poly(xs, mid) < 0:\n            lo = mid\n        else:\n            hi = mid\n        if abs(hi - lo) < 1e-10:\n            break\n    return (lo + hi) / 2"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies.pop(0))\n        else:\n            result.append(l[i])\n    return result"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "digits = []\n    while x > 0:\n        digits.append(x % base)\n        x = x // base\n    return ''.join(map(str, reversed(digits)))"}
{"idx": 45, "completion": "return (a * h) / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        return (l_sorted[n // 2 - 1] + l_sorted[n // 2]) / 2"}
{"idx": 48, "completion": "text = text.replace(' ', '').lower()\n    return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "# Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n    \n    # Convert the result to a sorted list\n    result = sorted(common_elements)\n    \n    return result"}
{"idx": 59, "completion": "i = 2\n    while i * i <= n:\n        while n % i == 0:\n            n = n // i\n        i += 1\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if len(s) > 0 and s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    min_even = None\n    min_index = -1\n    \n    for index, num in enumerate(arr):\n        if num % 2 == 0:\n            if min_even is None or num < min_even:\n                min_even = num\n                min_index = index\n    \n    if min_even is not None:\n        return [min_even, min_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Your code here\n    for i in range(len(lst)):\n        if lst[i] == lst.count(lst[i]):\n            return lst[i]\n    return -1"}
{"idx": 70, "completion": "# Your code here\n    if not lst:\n        return []\n    lst = sorted(lst)\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is balanced (palindromic)\n    if q != q[::-1]:\n        return False\n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    return True"}
{"idx": 73, "completion": "n = len(arr)\n    # Create a table to store results of subproblems\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    \n    # Fill the table for substrings of length 1\n    for i in range(n):\n        dp[i][i] = 0\n    \n    # Fill the table for substrings of length 2\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            dp[i][i + 1] = 0\n        else:\n            dp[i][i + 1] = 1\n    \n    # Fill the table for substrings of length greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i + 1][j], dp[i][j - 1]) + 1\n    \n    return dp[0][n - 1]"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    # Determine which list to return based on the total characters\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the input is 0, which is a cube of 0\n    if a == 0:\n        return True\n    \n    # Determine the absolute value of a to handle negative numbers\n    abs_a = abs(a)\n    \n    # Iterate through possible cube roots from 0 to the cube root of abs_a\n    for i in range(0, int(abs_a ** (1/3)) + 2):\n        if i ** 3 == abs_a:\n            return True\n    \n    return False"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 10 ** (n - 1) - 9 ** (n - 1)"}
{"idx": 84, "completion": "sum_digits = sum(int(d) for d in str(N))\n    return bin(sum_digits)[2:]"}
{"idx": 85, "completion": "return sum(lst[1::2])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    # Sort by row ascending, then by column descending\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    \n    if sum_fl % 2 != 0:  # Sum is odd, sort in ascending order\n        return sorted(array)\n    else:  # Sum is even, sort in descending order\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 4)\n            encrypted += shifted_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    second_smallest = float('inf')\n    for num in lst:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n    if second_smallest == float('inf'):\n        return None\n    return second_smallest"}
{"idx": 91, "completion": "sentences = re.split(r'[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    encoded = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            encoded.append(new_char)\n        else:\n            encoded.append(char.swapcase())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(d) for d in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    lower_case = all(isinstance(key, str) and key.islower() for key in keys)\n    upper_case = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return lower_case or upper_case"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return abs(a % 10) * abs(b % 10)"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return [word.strip() for word in s.split(',')]\n    else:\n        return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    else:\n        for num in range(y, x-1, -1):\n            if num % 2 == 0:\n                return num\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = 0\n    for num in range(n, m+1):\n        total += num\n    average = total / (m - n + 1)\n    rounded = round(average)\n    return bin(rounded)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    \n    # Filter and sort the array\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    \n    # Map numbers to their corresponding names\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = [number_names[num] for num in filtered]\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_num = 0\n            for j in range(1, i + 1):\n                sum_num += j\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    n = len(arr)\n    for i in range(n):\n        if all(arr[(i + j) % n] <= arr[(i + j + 1) % n] for j in range(n - 1)):\n            return True\n    return False"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of odd numbers in lst1 can be replaced by even numbers from lst2, return \"YES\"\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letter_counts = {}\n    letters = test.split()\n    \n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    if not letter_counts:\n        return {}\n    \n    max_count = max(letter_counts.values())\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z',\n                  'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'}\n    \n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if concatenating in either order gives a balanced string\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date is in the correct format (mm-dd-yyyy)\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n    \n    month_str, day_str, year_str = parts\n    \n    # Check if month, day, and year are numeric\n    if not (month_str.isdigit() and day_str.isdigit() and year_str.isdigit()):\n        return False\n    \n    month = int(month_str)\n    day = int(day_str)\n    year = int(year_str)\n    \n    # Check if month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if day is valid based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        max_day = 31\n    elif month in {4, 6, 9, 11}:\n        max_day = 30\n    else:  # February\n        if (year % 400 == 0) or (year % 100 != 0 and year % 4 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n    \n    if day < 1 or day > max_day:\n        return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    # Determine the overlapping interval\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length < 2:\n        return \"NO\"\n    # Check if length is a prime number\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n            sum_magnitudes += num\n        elif num < 0:\n            product *= -1\n            sum_magnitudes += abs(num)\n        else:\n            product *= 0\n    \n    return product * sum_magnitudes"}
{"idx": 129, "completion": "n = len(grid)\n    neighbors = [(-1,0),(1,0),(0,-1),(0,1)]\n    min_path = None\n\n    for i in range(n):\n        for j in range(n):\n            stack = [(i,j,[grid[i][j]])]\n            while stack:\n                x, y, path = stack.pop()\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path\n                    continue\n                for dx, dy in neighbors:\n                    nx, ny = x + dx, y + dy\n                    if 0 <= nx < n and 0 <= ny < n:\n                        stack.append((nx, ny, path + [grid[nx][ny]]))\n    \n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) == 0 and string.count('[') >= 2 and string.count(']') >= 2"}
{"idx": 133, "completion": "# Round each element to the nearest integer (ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Square each element in the rounded list\n    squared_lst = [x ** 2 for x in rounded_lst]\n    \n    # Sum all the squared elements\n    total = sum(squared_lst)\n    \n    return total"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    return last_char == last_word[-1] and len(last_word) == 1"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        else:\n            return value\n\n    parsed_a = parse_value(a)\n    parsed_b = parse_value(b)\n\n    if isinstance(parsed_a, str) or isinstance(parsed_b, str):\n        if str(parsed_a) == str(parsed_b):\n            return None\n        return a if str(parsed_a) > str(parsed_b) else b\n    else:\n        if parsed_a == parsed_b:\n            return None\n        return a if parsed_a > parsed_b else b"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    return (n % 2) == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive underscores with a single dash\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the part before and after the dot\n    before_dot, after_dot = file_name.split('.')\n    \n    # Check the part before the dot\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check the part after the dot\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n    \n    return product_numerator % product_denominator == 0"}
{"idx": 145, "completion": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "# List of planets in order from the Sun\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are valid\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    # Find the indices of the two planets\n    index1 = planets_order.index(planet1)\n    index2 = planets_order.index(planet2)\n    \n    # Determine the start and end indices\n    start = min(index1, index2) + 1\n    end = max(index1, index2)\n    \n    # Extract the planets between the two indices\n    between_planets = planets_order[start:end]\n    \n    # Return the result as a tuple\n    return tuple(between_planets)"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"idx": 150, "completion": "if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is a substring of the first word\n    if b in a:\n        return True\n    \n    # Generate all rotations of the second word\n    rotations = []\n    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        rotations.append(rotation)\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "if not 1 <= number <= 1000:\n        return \"\"\n    \n    roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = []\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: -x[0]):\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [total_eaten, left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += op + str(num)\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    else:\n        result = []\n        for c in s:\n            if c.isalpha():\n                if c.islower():\n                    result.append(c.upper())\n                else:\n                    result.append(c.lower())\n            else:\n                result.append(c)\n        return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"idx": 0, "completion": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"idx": 1, "completion": "result = []\n    current_group = []\n    stack = []\n    for c in paren_string:\n        if c == '(':\n            stack.append(c)\n            current_group.append(c)\n        elif c == ')':\n            if stack:\n                stack.pop()\n                current_group.append(c)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n        elif c == ' ':\n            pass\n        else:\n            raise ValueError(\"Invalid character in input string\")\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    max_depths = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Handle invalid cases where closing bracket comes before opening\n                    pass\n        max_depths.append(max_depth)\n    return max_depths"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return ''\n    i = 0\n    for j in range(len(string)):\n        if is_palindrome(string[j:]):\n            i = j\n            break\n    return string + string[:i][::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length.\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a not in ('0', '1') or char_b not in ('0', '1'):\n            raise ValueError(\"Input strings must contain only '0's and '1's.\")\n        xor_bit = '1' if char_a != char_b else '0'\n        result.append(xor_bit)\n    \n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "beat_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note in beat_dict:\n            beats.append(beat_dict[note])\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list_sorted = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(numbers_list_sorted)"}
{"idx": 20, "completion": "numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    result = None\n\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers_sorted[i], numbers_sorted[i + 1])\n\n    return result"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count"}
{"idx": 24, "completion": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return -1"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char.lower())\n        else:\n            new_string.append(char.upper())\n    return ''.join(new_string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n\n    begin, end = -1.0, 1.0\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n\n    return begin"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = l[::2]\n    even_indicies.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indicies[i//2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            next_val = fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4]\n            fib_list.append(next_val)\n        return fib_list[n]"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    if len(l_sorted) % 2 == 1:\n        return l_sorted[len(l_sorted) // 2]\n    else:\n        return (l_sorted[len(l_sorted) // 2 - 1] + l_sorted[len(l_sorted) // 2]) / 2"}
{"idx": 48, "completion": "if len(text) == 0:\n        return True\n    return text[0] == text[-1] and is_palindrome(text[1:-1])"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "balance = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"idx": 57, "completion": "if len(l) <= 2:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "# Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result to a sorted list\n    result = sorted(common_elements)\n    \n    return result"}
{"idx": 59, "completion": "# The function starts checking divisors from the smallest (2) upwards.\n    # For each divisor found, it divides n by that divisor as much as possible,\n    # thus reducing n and ensuring that any subsequent divisors found are larger and prime.\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            n = n // divisor\n        else:\n            divisor += 1\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# your code here\n    # split the string into a list\n    s = s.split()\n    # get the number of apples\n    apples = int(s[0])\n    # get the number of oranges\n    oranges = int(s[2])\n    # return the number of mangoes\n    return n - apples - oranges"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "from collections import Counter\n    \n    counts = Counter(lst)\n    candidates = [num for num, cnt in counts.items() if num <= cnt]\n    \n    return max(candidates) if candidates else -1"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = []\n    lst_copy = lst.copy()\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        sorted_lst.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            sorted_lst.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return sorted_lst"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is balanced (palindromic)\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    \n    return True"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the input is 0, which is a cube of 0\n    if a == 0:\n        return True\n    \n    # Determine the absolute value of the input to handle negative numbers\n    abs_a = abs(a)\n    \n    # Iterate through possible cube roots from 0 to the absolute value of the input\n    for i in range(abs_a + 1):\n        # Calculate the cube of the current integer\n        cube = i ** 3\n        # If the cube matches the absolute value of the input, return True\n        if cube == abs_a:\n            return True\n        # If the cube exceeds the absolute value of the input, break the loop\n        if cube > abs_a:\n            break\n    \n    # If no cube root is found, return False\n    return False"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length <= 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 10 ** (n - 1) + 9 * 10 ** (n - 2) - 9 ** (n - 1)"}
{"idx": 84, "completion": "total = sum(int(d) for d in str(N))\n    return bin(total)[2:]"}
{"idx": 85, "completion": "return sum(lst[1::2])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    sum_val = first + last\n    if sum_val % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted = []\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 2 * 2) % 26) + ord('a'))\n            encrypted.append(shifted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_sorted = sorted(list(set(lst)))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]"}
{"idx": 91, "completion": "sentences = re.split(r'[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    encoded_message = []\n    for char in message:\n        if char.lower() in vowels:\n            # Replace vowel with the letter 2 places ahead\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            # Swap case\n            if char.isupper():\n                new_char = new_char.upper()\n            encoded_message.append(new_char)\n        else:\n            # Just swap case for non-vowels\n            if char.isupper():\n                encoded_message.append(char.lower())\n            else:\n                encoded_message.append(char.upper())\n    return ''.join(encoded_message)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(d) for d in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return abs(a % 10 * b % 10)"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return s.replace(',', ' ').split()\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = 0\n    for num in range(n, m+1):\n        total += num\n    average = round(total / (m - n + 1))\n    return bin(average)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    # Filter and sort the array\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    # Replace numbers with names\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [number_names[x-1] for x in filtered]\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for num in range(1, i+1):\n                factorial *= num\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_i = sum(range(1, i+1))\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "even = 0\n    odd = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letters = test.split()\n    if not letters:\n        return {}\n    \n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units == 0:\n            continue\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Iterate from the end of the word towards the start\n    for i in range(len(word)-2, 0, -1):\n        current_char = word[i]\n        prev_char = word[i-1]\n        next_char = word[i+1] if i+1 < len(word) else ''\n        \n        # Check if the current character is a vowel and is between two consonants\n        if (current_char.lower() in vowels and\n            prev_char in consonants and\n            next_char in consonants):\n            return current_char\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if the combination of the two strings is balanced\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date is in the correct format using regex\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    else:  # February\n        if day < 1 or day > 29:\n            return False\n        # Additional check for leap year if day is 29\n        if day == 29 and not is_leap_year(year):\n            return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n    \n    if overlap_start > overlap_end:\n        return \"NO\"\n    \n    length = overlap_end - overlap_start + 1\n    if length <= 1:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    if length == 2:\n        return \"YES\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    \n    return product * magnitude_sum"}
{"idx": 129, "completion": "n = len(grid)\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            path = dfs(grid, i, j, k)\n            if min_path is None or path < min_path:\n                min_path = path\n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                next_term = 1 + i // 2\n            else:\n                next_term = sequence[i - 1] + sequence[i - 2] + sequence[i - 3]\n            sequence.append(next_term)\n        return sequence"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    if not has_odd:\n        return 0\n    return product"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                if len(stack) > 0 and stack[-1] == '[':\n                    return True\n            else:\n                stack.append(char)\n    return False"}
{"idx": 133, "completion": "total = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_num = rounded_num ** 2\n        total += squared_num\n    return total"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    words = txt.split()\n    if not words:\n        return False\n    last_word = words[-1]\n    return last_char == last_word[-1] and len(last_word) == 1"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_neg = max(negatives) if negatives else None\n    smallest_pos = min(positives) if positives else None\n    \n    return (largest_neg, smallest_pos)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            # Replace comma with dot for consistent parsing\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        return value\n\n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n\n    if isinstance(a_parsed, str) or isinstance(b_parsed, str):\n        # If either value is a string that couldn't be parsed to a number, compare as strings\n        if str(a_parsed) == str(b_parsed):\n            return None\n        return a if str(a_parsed) > str(b_parsed) else b\n    else:\n        if a_parsed == b_parsed:\n            return None\n        return a if a_parsed > b_parsed else b"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive underscores with a dash\n    while '__' in text:\n        text = text.replace('__', '-')\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name_part, extension = file_name.split('.')\n    \n    # Check the name part\n    if not name_part:\n        return 'No'\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check the extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "if not lst:\n        return 0\n    sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if len(num_str) > 0:\n                first_digit = int(num_str[0])\n                last_digit = int(num_str[-1])\n                if first_digit % 2 != 0 and last_digit % 2 != 0:\n                    count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "# Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if n == 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))"}
{"idx": 152, "completion": "return [abs(score - guess) for score, guess in zip(game, guess)]"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if not a or not b:\n        return False\n    \n    len_a = len(a)\n    len_b = len(b)\n    \n    if len_b > len_a:\n        return False\n    \n    # Generate all rotations of the second word\n    rotations = []\n    for i in range(len_b):\n        rotation = b[i:] + b[:i]\n        rotations.append(rotation)\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result.append(roman_numerals[value])\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "# Sort the sides to identify the hypotenuse (longest side)\n    sides = sorted([a, b, c])\n    # Check if the sum of the squares of the two shorter sides equals the square of the longest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n        elif char != ' ':\n            current_group.append(char)\n    return result"}
{"idx": 2, "completion": "return number % 1"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Invalid parentheses string, handle as needed\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"idx": 8, "completion": "sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"}
{"idx": 11, "completion": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(b, a % b)\n    else:\n        return greatest_common_divisor(a, b % a)"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "beat_map = {'o': 4, 'o|': 2, '.|': 1}\n    beats = music_string.split()\n    return [beat_map[beat] for beat in beats]"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "num_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i+1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers_sorted[i], numbers_sorted[i+1])\n    \n    return result"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count"}
{"idx": 24, "completion": "if n == 1:\n        return 1\n    else:\n        for i in range(n-1, 0, -1):\n            if n % i == 0:\n                return i\n        return 1"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n\n    low = -1\n    high = 1\n    while poly(xs, low) * poly(xs, high) > 0:\n        low *= 2\n        high *= 2\n\n    while high - low > 1e-10:  # the precise enough\n        mid = (low + high) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        if poly(xs, low) * poly(xs, mid) < 0:\n            high = mid\n        else:\n            low = mid\n    return (low + high) / 2"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 != 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies.pop(0))\n        else:\n            result.append(l[i])\n    return result"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = [0, 1]\n    prime_fib_numbers = []\n    while len(prime_fib_numbers) < n:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_fib)\n        if is_prime(next_fib):\n            prime_fib_numbers.append(next_fib)\n    return prime_fib_numbers[n-1]"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    if len(l_sorted) % 2 == 1:\n        return l_sorted[len(l_sorted) // 2]\n    else:\n        return (l_sorted[len(l_sorted) // 2 - 1] + l_sorted[len(l_sorted) // 2]) / 2"}
{"idx": 48, "completion": "text = text.replace(\" \", \"\").lower()\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"}
{"idx": 56, "completion": "balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"idx": 57, "completion": "if len(l) <= 2:\n        return True\n    increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "# Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1 & set2\n    \n    # Convert the result to a sorted list\n    result = sorted(common_elements)\n    \n    return result"}
{"idx": 59, "completion": "# The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    # The largest prime factor is the largest factor of n that is a prime.\n    #"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, char in enumerate(s_lower):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count"}
{"idx": 65, "completion": "digits = str(x)\n    length = len(digits)\n    if shift >= length:\n        return digits[::-1]\n    else:\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n\n    smallest_even = None\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Your code here\n    for i in range(len(lst)):\n        if lst.count(lst[i]) >= lst[i]:\n            return lst[i]\n    return -1"}
{"idx": 70, "completion": "if not lst:\n        return []\n    lst_sorted = []\n    lst_copy = lst.copy()\n    while lst_copy:\n        min_val = min(lst_copy)\n        lst_sorted.append(min_val)\n        lst_copy.remove(min_val)\n        if lst_copy:\n            max_val = max(lst_copy)\n            lst_sorted.append(max_val)\n            lst_copy.remove(max_val)\n    return lst_sorted"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is a palindrome\n    is_palindrome = q == q[::-1]\n    \n    # Calculate the sum of the elements in the list\n    sum_elements = sum(q)\n    \n    # Check if the list is balanced (palindrome) and the sum is <= w\n    return is_palindrome and sum_elements <= w"}
{"idx": 73, "completion": "n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Determine which list to return based on the total characters\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the cube root of the absolute value of 'a' is an integer\n    # This is done by checking if the cube of the integer cube root equals 'a'\n    # or if the cube of the negative of the integer cube root equals 'a' (for negative 'a')\n    return int(round(abs(a) ** (1/3))) ** 3 == abs(a)"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 10 ** (n - 1) + 9 * 10 ** (n - 2) - 9 ** (n - 1)"}
{"idx": 84, "completion": "# Sum the digits of N\n    digit_sum = sum(int(d) for d in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_str = bin(digit_sum)[2:]\n    \n    return binary_str"}
{"idx": 85, "completion": "return sum([x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    total = first + last\n    \n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = []\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n            encrypted.append(shifted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for char in S:\n        if char in ['.', '?', '!']:\n            sentences.append(''.join(current_sentence).strip())\n            current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    encoded = []\n    for char in message:\n        if char.lower() in vowels:\n            # Determine the new character by moving two places ahead\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            # Swap case\n            if char.isupper():\n                new_char = new_char.upper()\n            else:\n                new_char = new_char.lower()\n            encoded.append(new_char)\n        else:\n            # Just swap case\n            if char.isupper():\n                encoded.append(char.lower())\n            else:\n                encoded.append(char.upper())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (abs(a) % 10) * (abs(b) % 10)"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if abs(num - int(num)) >= 0.5:\n            return int(num) - 1\n        else:\n            return int(num)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return [word.strip() for word in s.split(',')]\n    else:\n        return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = sum(range(n, m + 1))\n    average = round(total / (m - n + 1))\n    return bin(average)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in filtered:\n        result.append(names[num - 1])\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for num in range(1, i + 1):\n                factorial *= num\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_num = 0\n            for num in range(1, i + 1):\n                sum_num += num\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Check if all elements in lst1 are already even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Count the number of odd numbers in lst1 and even numbers in lst2\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # Check if we can replace all odd numbers in lst1 with even numbers from lst2\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letters = test.split()\n    if not letters:\n        return {}\n    \n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    word = word[::-1]  # Reverse the word to process from the right side\n    \n    for i in range(1, len(word)-1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is already balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if concatenating in either order gives a balanced string\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    start = max(start1, start2)\n    end = min(end1, end2)\n    \n    # Check if there is an overlap\n    if start > end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = end - start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    \n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    \n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    product = 1\n    sum_magnitudes = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        sum_magnitudes += abs(num)\n    return product * sum_magnitudes"}
{"idx": 129, "completion": "n = len(grid)\n    # Find the cell with the smallest value to start the path\n    start_val = float('inf')\n    start_pos = None\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] < start_val:\n                start_val = grid[i][j]\n                start_pos = (i, j)\n    i, j = start_pos\n    path = [grid[i][j]]\n    for _ in range(k - 1):\n        # Find the smallest adjacent value not already in the path\n        min_val = float('inf')\n        next_pos = None\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                if grid[ni][nj] < min_val and (len(path) < 2 or grid[ni][nj] != path[-2]):\n                    min_val = grid[ni][nj]\n                    next_pos = (ni, nj)\n        if next_pos is None:\n            # If no new adjacent cell is found, stay in the same cell\n            next_pos = (i, j)\n        i, j = next_pos\n        path.append(grid[i][j])\n    return path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 == 1:\n            product *= int(d)\n            has_odd = True\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                if len(stack) > 0 and stack[-1] == '[':\n                    return True\n            else:\n                stack.append(char)\n    return False"}
{"idx": 133, "completion": "# Round each element to the nearest integer (ceiling)\n    rounded = [math.ceil(x) for x in lst]\n    # Square each element\n    squared = [x ** 2 for x in rounded]\n    # Sum the squared elements\n    return sum(squared)"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            # Replace comma with dot for consistent parsing\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        return value\n\n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n\n    if isinstance(a_parsed, (int, float)) and isinstance(b_parsed, (int, float)):\n        if a_parsed > b_parsed:\n            return a\n        elif b_parsed > a_parsed:\n            return b\n        else:\n            return None\n    else:\n        # If either value is a string that couldn't be parsed to a number, compare as strings\n        a_str = str(a)\n        b_str = str(b)\n        if a_str > b_str:\n            return a\n        elif b_str > a_str:\n            return b\n        else:\n            return None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive underscores with a dash\n    while '__' in text:\n        text = text.replace('__', '-')\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name_part, extension = file_name.split('.')\n    \n    # Check the name part\n    if not name_part:\n        return 'No'\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check the extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"idx": 143, "completion": "words = sentence.split()\n    primes = []\n    for word in words:\n        length = len(word)\n        if is_prime(length):\n            primes.append(word)\n    return ' '.join(primes)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    numerator = x_num * n_num\n    denominator = x_den * n_den\n    \n    return numerator % denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if len(num_str) > 0:\n                first_digit = int(num_str[0])\n                last_digit = int(num_str[-1])\n                if first_digit % 2 != 0 and last_digit % 2 != 0:\n                    count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1+1:index2])\n    else:\n        return tuple(planets[index2+1:index1])"}
{"idx": 149, "completion": "# Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if n == 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x ** 2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is already a substring of the first word\n    if b in a:\n        return True\n    \n    # Generate all rotations of the second word and check if any is a substring of the first word\n    length = len(b)\n    for i in range(1, length):\n        rotated = b[-i:] + b[:-i]\n        if rotated in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = []\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: -x[0]):\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "# Check if any side is zero or negative\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n    \n    # Check if the sides can form a triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return False\n    \n    # Check for right angle using Pythagorean theorem\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n        elif unique == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression += oprt + str(oprn)\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "lower = min(a, b)\n    upper = max(a, b)\n    result = []\n    for num in range(lower, upper + 1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"idx": 0, "completion": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"idx": 1, "completion": "result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if current_group:\n                current_group.append(char)\n                result.append(''.join(current_group))\n                current_group = []\n        else:\n            pass\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Invalid case, but per problem description, inputs are valid\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return ''\n    i = 0\n    for j in range(len(string)):\n        if is_palindrome(string[j:]):\n            i = j\n            break\n    return string + string[:i][::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length.\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a not in ('0', '1') or char_b not in ('0', '1'):\n            raise ValueError(\"Input strings must contain only '0's and '1's.\")\n        result.append('1' if char_a != char_b else '0')\n    \n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"idx": 17, "completion": "beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers = sorted(numbers)\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    if min_val == max_val:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "length = 0\n    for _ in string:\n        length += 1\n    return length"}
{"idx": 24, "completion": "for d in reversed(range(1, n)):\n        if n % d == 0:\n            return d\n    return 1"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n            result.append(num)\n        else:\n            seen[num] += 1\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    lo = -1\n    hi = 1\n    while poly(xs, lo) * poly(xs, hi) > 0:\n        lo *= 2\n        hi *= 2\n    while hi - lo > 1e-10:  # Note: This is the precision of the result\n        mid = (lo + hi) / 2\n        if poly(xs, lo) * poly(xs, mid) <= 0:\n            hi = mid\n        else:\n            lo = mid\n    return lo"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    l_prime[::3] = sorted(l_prime[::3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = l[::2]\n    even_indicies_sorted = sorted(even_indicies)\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indicies_sorted[i//2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = []\n    a, b = 0, 1\n    while len(fib_numbers) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fib_numbers.append(a)\n    return fib_numbers[-1]"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set(l)\n    for num in l:\n        if -num in s and num != 0:\n            return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return (a * h) / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n//2]\n    else:\n        return (l_sorted[n//2 - 1] + l_sorted[n//2]) / 2"}
{"idx": 48, "completion": "text = text.replace(' ', '').lower()\n    return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    result = []\n    for char in text:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result)"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "# Convert both lists to sets to find the intersection (common elements)\n    common_elements = set(l1) & set(l2)\n    # Sort the result and return as a list\n    return sorted(common_elements)"}
{"idx": 59, "completion": "# The function starts by initializing the variable i to 2, which is the smallest prime number.\n    i = 2\n    # The while loop continues as long as i squared is less than or equal to n. This is because if i is larger than the square root of n, then i cannot be a factor of n that hasn't been checked already.\n    while i * i <= n:\n        # Inside the loop, the function checks if i is a factor of n (i.e., if n is divisible by i).\n        if n % i == 0:\n            # If i is a factor, the function divides n by i, effectively reducing n to the remaining part after removing the factor i.\n            n = n // i\n        else:\n            # If i is not a factor, the function increments i by 1 to check the next integer.\n            i += 1\n    # Once the loop ends, the largest prime factor is the remaining value of n, which is returned.\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [x * i for i, x in enumerate(xs)][1:]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = \"aeiou\"\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        elif s[i] == 'y' and i == len(s)-1:\n            count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    if shift > len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Create a frequency dictionary\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Iterate through the frequency dictionary to find the greatest integer\n    max_num = -1\n    for num, count in freq.items():\n        if num <= count and num > max_num:\n            max_num = num\n    \n    return max_num"}
{"idx": 70, "completion": "# Your code here\n    if not lst:\n        return []\n    lst = sorted(lst)\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is balanced (palindromic)\n    is_balanced = q == q[::-1]\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    sum_elements = sum(q)\n    is_light_enough = sum_elements <= w\n    \n    # The object will fly if it's both balanced and light enough\n    return is_balanced and is_light_enough"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Determine which list to return based on the total characters\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the input is 0, which is a cube of 0\n    if a == 0:\n        return True\n    \n    # Take the absolute value of the input to handle negative numbers\n    abs_a = abs(a)\n    \n    # Iterate through possible cube roots from 0 to the cube root of the absolute value of a\n    for i in range(0, int(abs_a ** (1/3)) + 2):\n        if i ** 3 == abs_a:\n            return True\n    \n    return False"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "return \"db\" + bin(decimal)[2:] + \"db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 10 ** (n - 1) - 9 ** (n - 1)"}
{"idx": 84, "completion": "sum_digits = sum(int(d) for d in str(N))\n    return bin(sum_digits)[2:]"}
{"idx": 85, "completion": "sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    # Sort by row ascending, then by column descending\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    \n    if sum_fl % 2 != 0:\n        # Sort in ascending order\n        return sorted(array)\n    else:\n        # Sort in descending order\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 4)\n            encrypted += shifted_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_sorted = sorted(list(set(lst)))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for char in S:\n        if char in ['.', '?', '!']:\n            sentences.append(''.join(current_sentence).strip())\n            current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    encoded = []\n    for char in message:\n        if char.lower() in vowels:\n            # Shift the vowel two places ahead\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            # Swap case\n            if char.isupper():\n                new_char = new_char.upper()\n            else:\n                new_char = new_char.lower()\n            encoded.append(new_char)\n        else:\n            # Just swap case for non-vowels\n            if char.isupper():\n                encoded.append(char.lower())\n            else:\n                encoded.append(char.upper())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n**0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(d) for d in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Get the unit digits of each number\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_a * unit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num - int(num) == 0.5:\n        return int(num) + 1 if num > 0 else int(num) - 1\n    else:\n        return int(round(num))"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return s.replace(',', ' ').split()\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    return [digit_names[x-1] for x in filtered]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_num = 0\n            for j in range(1, i + 1):\n                sum_num += j\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of odd numbers in lst1 can be replaced by even numbers from lst2, return \"YES\"\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letter_counts = {}\n    for letter in test.split():\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    if not letter_counts:\n        return {}\n    \n    max_count = max(letter_counts.values())\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result_str = ''.join(result)\n    is_palindrome = result_str == result_str[::-1]\n    return (result_str, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units == 0:\n            continue\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x if x >= 0 else ~x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    word = word.lower()\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i].lower()\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if s1 + s2 is balanced\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    # Check if s2 + s1 is balanced\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "arr.sort()\n    return arr[-k:][::-1]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers"}
{"idx": 124, "completion": "if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if year % 4 == 0:\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n    \n    # Check if there is an overlap\n    if overlap_start > overlap_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = overlap_end - overlap_start + 1\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    return product * magnitude_sum"}
{"idx": 129, "completion": "n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    def neighbors(i, j):\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                yield ni, nj\n    \n    min_path = None\n    \n    for i in range(n):\n        for j in range(n):\n            stack = [(i, j, [grid[i][j]], set([(i, j)]))]\n            while stack:\n                x, y, path, visited = stack.pop()\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path.copy()\n                    continue\n                for nx, ny in neighbors(x, y):\n                    if (nx, ny) not in visited:\n                        new_path = path + [grid[nx][ny]]\n                        new_visited = visited.copy()\n                        new_visited.add((nx, ny))\n                        stack.append((nx, ny, new_path, new_visited))\n    \n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 == 1:\n            product *= int(d)\n            has_odd = True\n    if has_odd:\n        return product\n    else:\n        return 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                if len(stack) > 0 and stack[-1] == '[':\n                    return True\n            else:\n                stack.append(char)\n    return False"}
{"idx": 133, "completion": "# Round each element in the list to the upper integer (ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Square each element in the rounded list\n    squared_lst = [x ** 2 for x in rounded_lst]\n    \n    # Sum all the squared elements\n    total = sum(squared_lst)\n    \n    return total"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            # Replace comma with dot to handle both decimal separators\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        return value\n\n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n\n    if a_parsed == b_parsed:\n        return None\n    elif a_parsed > b_parsed:\n        return a\n    else:\n        return b"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive underscores with a dash\n    while '__' in text:\n        text = text.replace('__', '-')\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n    if digit_count > 3:\n        return 'No'\n    \n    # Check the number of dots in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the part before and after the dot\n    parts = file_name.split('.')\n    if len(parts) != 2:\n        return 'No'\n    \n    before_dot, after_dot = parts\n    \n    # Check the part before the dot\n    if not before_dot:\n        return 'No'\n    if not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check the part after the dot\n    valid_extensions = ['txt', 'exe', 'dll']\n    if after_dot not in valid_extensions:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    primes = []\n    for word in words:\n        length = len(word)\n        if is_prime(length):\n            primes.append(word)\n    return ' '.join(primes)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Multiply the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Check if the product simplifies to a whole number\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            s = str(abs(num))\n            if int(s[0]) % 2 == 1 and int(s[-1]) % 2 == 1:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "# List of planets in order from the Sun\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are in the list\n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    # Find the indices of the two planets\n    index1 = planets_order.index(planet1)\n    index2 = planets_order.index(planet2)\n    \n    # Determine the start and end indices\n    start = min(index1, index2)\n    end = max(index1, index2)\n    \n    # Extract the planets between the two indices\n    between = planets_order[start + 1 : end]\n    \n    # Adjust the order based on the original planet order\n    if index1 > index2:\n        between = between[::-1]  # Reverse if the first planet is further\n    \n    return tuple(between)"}
{"idx": 149, "completion": "filtered = [word for word in lst if len(word) % 2 == 0]\n    filtered.sort()\n    filtered.sort(key=len)\n    return filtered"}
{"idx": 150, "completion": "if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(num**2 for num in lst if num > 0 and num % 2 != 0 and isinstance(num, int))"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = \"\"\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if not a or not b:\n        return False\n    \n    len_a = len(a)\n    len_b = len(b)\n    \n    if len_b > len_a:\n        return False\n    \n    for i in range(len_b):\n        rotated = b[i:] + b[:i]\n        if rotated in a:\n            return True\n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = []\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: -x[0]):\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique = len(set(word))\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n        elif unique == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += op + str(num)\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if current_group:\n                current_group.append(char)\n                result.append(''.join(current_group))\n                current_group = []\n        else:\n            continue\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        if i > 0:\n            result.append(delimeter)\n        result.append(numbers[i])\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return ''\n    # Find the longest palindromic suffix\n    i = len(string)\n    while i > 0 and not is_palindrome(string[i-1:]):\n        i -= 1\n    # Append the reverse of the prefix before the palindromic suffix\n    return string + string[:i-1][::-1]"}
{"idx": 11, "completion": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "distinct_chars = set()\n    for char in string:\n        if char.isalpha():\n            distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"idx": 17, "completion": "note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.append(note_to_beats[note])\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers = sorted(numbers)\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count"}
{"idx": 24, "completion": "for d in range(n - 1, 0, -1):\n        if n % d == 0:\n            return d\n    return 1"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n            result.append(num)\n        else:\n            seen[num] += 1\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    lo = -1\n    hi = 1\n    while poly(xs, lo) * poly(xs, hi) > 0:\n        lo *= 2\n        hi *= 2\n    while hi - lo > 1e-10:  # Note: This is the precision of the answer.\n        mid = (lo + hi) / 2\n        if poly(xs, lo) * poly(xs, mid) <= 0:\n            hi = mid\n        else:\n            lo = mid\n    return lo"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        l_prime[i] = sorted(l[i:i+3])[0]\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies.pop(0))\n        else:\n            result.append(l[i])\n    return result"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = [1, 1]\n    prime_fib_numbers = []\n    while len(prime_fib_numbers) < n:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_fib)\n        if is_prime(next_fib):\n            prime_fib_numbers.append(next_fib)\n    return prime_fib_numbers[n-1]"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(reversed(digits))"}
{"idx": 45, "completion": "return (a * h) / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    if len(l_sorted) % 2 == 1:\n        return l_sorted[len(l_sorted) // 2]\n    else:\n        return (l_sorted[len(l_sorted) // 2 - 1] + l_sorted[len(l_sorted) // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "common_elements = set(l1) & set(l2)\n    return sorted(common_elements)"}
{"idx": 59, "completion": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return n\n\n    for i in range(2, n):\n        if n % i == 0 and is_prime(i):\n            return largest_prime_factor(n // i)\n\n    return -1  # In case no prime factors found, though n > 1 and not prime should have at least one."}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s[-1] == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_index = -1\n    \n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Your code here\n    for i in range(len(lst)):\n        if lst.count(i) >= i:\n            return i\n    return -1"}
{"idx": 70, "completion": "sorted_list = []\n    lst_copy = lst.copy()\n    while lst_copy:\n        min_val = min(lst_copy)\n        sorted_list.append(min_val)\n        lst_copy.remove(min_val)\n        if lst_copy:\n            max_val = max(lst_copy)\n            sorted_list.append(max_val)\n            lst_copy.remove(max_val)\n    return sorted_list"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is balanced (palindromic)\n    is_balanced = q == q[::-1]\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight w\n    sum_elements = sum(q)\n    is_light_enough = sum_elements <= w\n    \n    # The object will fly if it's both balanced and light enough\n    return is_balanced and is_light_enough"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the input is 0, which is a cube of 0\n    if a == 0:\n        return True\n    \n    # Determine the absolute value of a to handle negative numbers\n    abs_a = abs(a)\n    \n    # Iterate through possible cube roots from 0 to the cube root of abs_a\n    for i in range(0, int(abs_a ** (1/3)) + 2):\n        if i ** 3 == abs_a:\n            return True\n    \n    return False"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 10 ** (n - 1) - 9 ** (n - 1)"}
{"idx": 84, "completion": "sum_digits = sum(int(d) for d in str(N))\n    return bin(sum_digits)[2:]"}
{"idx": 85, "completion": "return sum([num for idx, num in enumerate(lst) if idx % 2 != 0 and num % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, val in enumerate(row):\n            if val == x:\n                result.append((row_idx, col_idx))\n    # Sort by row in ascending order, then by column in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    \n    if sum_fl % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(ord(char) + 4)\n            encrypted += shifted_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for char in S:\n        if char in ['.', '?', '!']:\n            if current_sentence:\n                sentences.append(''.join(current_sentence).strip())\n                current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    encoded = []\n    for char in message:\n        if char.lower() in vowels:\n            # Replace vowel with the letter 2 places ahead\n            new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n            # Swap case\n            if char.isupper():\n                new_char = new_char.upper()\n            else:\n                new_char = new_char.lower()\n            encoded.append(new_char)\n        else:\n            # Swap case for non-vowel characters\n            if char.isupper():\n                encoded.append(char.lower())\n            else:\n                encoded.append(char.upper())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if all(isinstance(key, str) and key.islower() for key in keys):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (abs(a) % 10) * (abs(b) % 10)"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        if num - int(num) < 0.5:\n            return int(num)\n        else:\n            return int(num) + 1\n    else:\n        if abs(num - int(num)) <= 0.5:\n            return int(num)\n        else:\n            return int(num) - 1"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return [word.strip() for word in s.split(',')]\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    else:\n        for num in range(y, x - 1, -1):\n            if num % 2 == 0:\n                return num\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = 0\n    for num in range(n, m+1):\n        total += num\n    average = round(total / (m - n + 1))\n    return bin(average)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in filtered:\n        result.append(names[num-1])\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Compute factorial of i\n            factorial = 1\n            for num in range(1, i + 1):\n                factorial *= num\n            result.append(factorial)\n        else:\n            # Compute sum of numbers from 1 to i\n            sum_num = 0\n            for num in range(1, i + 1):\n                sum_num += num\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Check if all elements in lst1 are already even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Count the number of odd numbers in lst1 and even numbers in lst2\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letter_counts = {}\n    letters = test.split()\n    \n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    if not letter_counts:\n        return {}\n    \n    max_count = max(letter_counts.values())\n    result = {k: v for k, v in letter_counts.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        odd_digits = [d for d in s if int(d) % 2 != 0]\n        count = len(odd_digits)\n        replaced = f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\"\n        result.append(replaced)\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    word = word[::-1]  # Reverse the word to start checking from the right\n    n = len(word)\n    \n    for i in range(1, n-1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if concatenating s1 and s2 is balanced\n    if is_balanced(s1 + s2):\n        return 'Yes'\n    # Check if concatenating s2 and s1 is balanced\n    if is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n    \n    if overlap_start > overlap_end:\n        return \"NO\"\n    \n    length = overlap_end - overlap_start\n    if length < 0:\n        return \"NO\"\n    \n    if length == 0:\n        return \"NO\"\n    \n    if length == 1:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    if length > 1:\n        for i in range(2, int(length ** 0.5) + 1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            product *= -1\n            magnitude_sum += abs(num)\n        else:\n            product *= 0\n    \n    return product * magnitude_sum if product != 0 else 0"}
{"idx": 129, "completion": "n = len(grid)\n    min_val = float('inf')\n    min_path = []\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] < min_val:\n                min_val = grid[i][j]\n                min_path = [grid[i][j]]\n\n    if k == 1:\n        return min_path\n\n    neighbors = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    visited = set()\n\n    def dfs(i, j, path):\n        if len(path) == k:\n            return path\n        min_subpath = None\n        for di, dj in neighbors:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                visited.add((ni, nj))\n                subpath = dfs(ni, nj, path + [grid[ni][nj]])\n                if subpath is not None:\n                    if min_subpath is None or subpath < min_subpath:\n                        min_subpath = subpath\n                visited.remove((ni, nj))\n        return min_subpath\n\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == min_val:\n                visited.add((i, j))\n                path = dfs(i, j, [min_val])\n                if path is not None:\n                    return path\n                visited.remove((i, j))\n\n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 == 1:\n            has_odd = True\n            product *= int(d)\n    return product if has_odd else 0"}
{"idx": 132, "completion": "# first check if the string is balanced\n    # then check if there is a nested bracket\n    # if both conditions are met, return True\n    # else return False\n    if string == '':\n        return False\n    if string[0] != '[' or string[-1] != ']':\n        return False\n    if len(string) % 2 != 0:\n        return False\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        else:\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) != 0:\n        return False\n    # now check if there is a nested bracket\n    # if there is a nested bracket, return True\n    # else return False\n    # a nested bracket is a pair of brackets that are not adjacent\n    # for example, '[[]]' has a nested bracket\n    # '[][]' does not have a nested bracket\n    # '[[][]]' has a nested bracket\n    # '[[]][[' has a nested bracket\n    # '[]' does not have a nested bracket\n    # '[]]]]]]][[[[[]' does not have a nested bracket\n    # '[[]]' has a nested bracket\n    # '[[[]]]' has a nested bracket\n    # '[[][]]' has a nested bracket\n    # '[[]][[' has a nested bracket\n    # '[]' does not have a nested bracket\n    # '[]]]]]]][[[[[]' does not have a nested bracket\n    # '[[]]' has a nested bracket\n    # '[[[]]]' has a nested bracket\n    # '[[][]]' has a nested bracket\n    # '[[]][[' has a nested bracket\n    # '[]' does not have a nested bracket\n    # '[]]]]]]][[[[[]' does not have a nested bracket\n    # '[[]]' has a nested bracket\n    # '[[[]]]' has a nested bracket\n    # '[[][]]' has a nested bracket\n    # '[[]][[' has a nested bracket\n    # '[]' does not have a nested bracket\n    # '[]]]]]]][[[[[]' does not have a nested bracket\n    # '[[]]' has a nested bracket\n    # '[[[]]]' has a"}
{"idx": 133, "completion": "total = 0\n    for num in lst:\n        ceiling = math.ceil(num)\n        total += ceiling ** 2\n    return total"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i\n    return largest_index"}
{"idx": 136, "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_neg = max(negatives) if negatives else None\n    smallest_pos = min(positives) if positives else None\n    \n    return (largest_neg, smallest_pos)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            if '.' in value:\n                try:\n                    return float(value)\n                except ValueError:\n                    return None\n            else:\n                try:\n                    return int(value)\n                except ValueError:\n                    return None\n        elif isinstance(value, (int, float)):\n            return value\n        return None\n\n    val_a = parse_value(a)\n    val_b = parse_value(b)\n    \n    if val_a is None or val_b is None:\n        return None\n    \n    if val_a == val_b:\n        return None\n    elif val_a > val_b:\n        return a\n    else:\n        return b"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n-1)"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive underscores with a single dash\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name_part, extension = file_name.split('.')\n    \n    # Check name part\n    if not name_part:\n        return 'No'\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"idx": 143, "completion": "words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n    \n    return product_numerator % product_denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"idx": 150, "completion": "if n == 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum([x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int)])"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is a substring of the first word\n    if b in a:\n        return True\n    \n    # Generate all rotations of the second word\n    rotations = []\n    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        rotations.append(rotation)\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = []\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: -x[0]):\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "# Check if the sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Check for right angle using Pythagorean theorem\n        sides = sorted([a, b, c])\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [total_eaten, left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += op + str(num)\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for num in range(a, b + 1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"idx": 0, "completion": "# Iterate through each pair of numbers\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # Calculate the absolute difference between the two numbers\n            diff = abs(numbers[i] - numbers[j])\n            # If the difference is less than the threshold, return True\n            if diff < threshold:\n                return True\n    # If no such pair is found, return False\n    return False"}
{"idx": 1, "completion": "result = []\n    stack = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group.append(char)\n                if not stack:\n                    result.append(''.join(current_group))\n                    current_group = []\n        elif char != ' ':\n            current_group.append(char)\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        return 0.0\n\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Unbalanced parentheses, handle as per requirements\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return ''\n    # Find the longest palindromic suffix\n    i = len(string)\n    while i > 0 and not is_palindrome(string[i-1:]):\n        i -= 1\n    # Append the reverse of the prefix before the palindromic suffix\n    return string + string[:i-1][::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError('Inputs must be of equal length')\n    result = []\n    for i in range(len(a)):\n        if a[i] == '1' and b[i] == '1':\n            result.append('0')\n        elif a[i] == '1' or b[i] == '1':\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i + 1])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "beat_mapping = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note in beat_mapping:\n            beats.append(beat_mapping[note])\n        else:\n            raise ValueError(f\"Invalid note: {note}\")\n    return beats"}
{"idx": 18, "completion": "times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list.sort(key=lambda x: number_map[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(x - min_num) / range_num for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int) and not isinstance(value, bool)]"}
{"idx": 23, "completion": "count = 0\n    for _ in string:\n        count += 1\n    return count"}
{"idx": 24, "completion": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return 0"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must not be zero.\")\n\n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def derivative(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i != 0])\n\n    x = 1.0  # Initial guess\n    tolerance = 0.0001\n    max_iterations = 1000\n\n    for _ in range(max_iterations):\n        fx = poly(x)\n        if abs(fx) < tolerance:\n            return x\n        dfx = derivative(x)\n        if dfx == 0:\n            break\n        x = x - fx / dfx\n\n    raise ValueError(\"Failed to find a zero within the specified tolerance.\")"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    l_prime[::3] = sorted(l_prime[::3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    even_values = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(i)\n            even_values.append(l[i])\n    even_values.sort()\n    for i in range(len(even_indicies)):\n        l[even_indicies[i]] = even_values[i]\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = []\n    a, b = 0, 1\n    while len(fib_numbers) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            fib_numbers.append(a)\n    return fib_numbers[-1]"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n//2]\n    else:\n        return (l_sorted[n//2 - 1] + l_sorted[n//2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    new_text = \"\"\n    for char in text:\n        if char not in vowels:\n            new_text += char\n    return new_text"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x - y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n - 1):\n            a, b = b, a + b\n        return b"}
{"idx": 56, "completion": "balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"idx": 57, "completion": "if len(l) <= 2:\n        return True\n    if l[0] < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n    else:\n        for i in range(len(l) - 1):\n            if l[i] != l[i + 1]:\n                return False\n    return True"}
{"idx": 58, "completion": "common_elements = set(l1) & set(l2)\n    return sorted(common_elements)"}
{"idx": 59, "completion": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return n\n\n    for i in range(2, n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n\n    return largest_prime_factor(n)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [x * i for i, x in enumerate(xs)][1:]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s)-1:\n            count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n\n    smallest_even = None\n    smallest_index = None\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even and index < smallest_index:\n                smallest_index = index\n\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    max_num = -1\n    for num, count in freq.items():\n        if num <= count and num > max_num:\n            max_num = num\n    \n    return max_num"}
{"idx": 70, "completion": "sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list"}
{"idx": 71, "completion": "if (a + b > c) and (a + c > b) and (b + c > a):\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is a palindrome\n    is_palindrome = q == q[::-1]\n    \n    # Check if the sum of the elements is less than or equal to the maximum weight\n    sum_less_than_weight = sum(q) <= w\n    \n    # Return True only if both conditions are met\n    return is_palindrome and sum_less_than_weight"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the input is 0, which is a cube of 0\n    if a == 0:\n        return True\n    \n    # Determine the absolute value to handle negative numbers\n    abs_a = abs(a)\n    \n    # Iterate through possible integers to find a cube root\n    for i in range(0, abs_a + 1):\n        cube = i ** 3\n        if cube == abs_a:\n            return True\n        if cube > abs_a:\n            return False\n    \n    return False"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # convert decimal to binary and remove '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"idx": 84, "completion": "return bin(sum(int(d) for d in str(N)))[2:]"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for row_idx, row in enumerate(lst):\n        for col_idx, value in enumerate(row):\n            if value == x:\n                result.append((row_idx, col_idx))\n    result.sort()\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return array\n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    if sum_fl % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4  # Shift down by two multiplied by two places (2 * 2 = 4)\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n                encrypted += chr(shifted)\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n                encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = 'aeiouAEIOU'\n    encoded = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            encoded.append(new_char)\n        else:\n            encoded.append(char.swapcase())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_divisor = int(n**0.5) + 1\n        for i in range(3, max_divisor, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return abs(a % 10 * b % 10)"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num > 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if abs(num - int(num)) >= 0.5:\n            return int(num) - 1\n        else:\n            return int(num)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return [word.strip() for word in s.split(',')]\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = 0\n    for num in range(n, m+1):\n        total += num\n    average = total / (m - n + 1)\n    rounded = round(average)\n    return bin(rounded)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter out numbers not between 1 and 9\n    filtered = [x for x in arr if 1 <= x <= 9]\n    \n    # Sort the filtered list\n    filtered.sort()\n    \n    # Reverse the sorted list\n    filtered.reverse()\n    \n    # Replace each number with its corresponding name\n    result = [num_to_name[num] for num in filtered]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Compute factorial for even i\n            fact = 1\n            for j in range(1, i + 1):\n                fact *= j\n            result.append(fact)\n        else:\n            # Compute sum for odd i\n            sum_num = 0\n            for j in range(1, i + 1):\n                sum_num += j\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    for i in range(len(arr)):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Check if all elements in lst1 are already even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Count the number of odd numbers in lst1 and even numbers in lst2\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # Check if we can replace all odd numbers in lst1 with even numbers from lst2\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letters = test.split()\n    if not letters:\n        return {}\n    \n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 == 1:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Iterate from the end of the word towards the beginning\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is empty\n    if not s1 or not s2:\n        return 'Yes' if not s1 and not s2 else 'No'\n    # Check if both strings are balanced\n    if is_balanced(s1) and is_balanced(s2):\n        return 'Yes'\n    # Check if one string is balanced and the other can be balanced by concatenating\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes' if is_balanced(s1 + s2) or is_balanced(s2 + s1) else 'No'\n    # Check if concatenating the strings in any order can result in a balanced string\n    return 'Yes' if is_balanced(s1 + s2) or is_balanced(s2 + s1) else 'No'"}
{"idx": 120, "completion": "arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    odd_numbers.sort()\n    return odd_numbers"}
{"idx": 124, "completion": "if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n    \n    # Check if there is an overlap\n    if overlap_start > overlap_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = overlap_end - overlap_start\n    \n    # Handle the case where the length is negative (no overlap)\n    if length < 0:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            product *= -1\n            magnitude_sum += abs(num)\n        else:\n            product *= 0\n    \n    return product * magnitude_sum"}
{"idx": 129, "completion": "n = len(grid)\n    # Find the cell with the smallest value\n    start = None\n    for i in range(n):\n        for j in range(n):\n            if start is None or grid[i][j] < grid[start[0]][start[1]]:\n                start = (i, j)\n    # BFS\n    from collections import deque\n    queue = deque()\n    queue.append((start[0], start[1], [grid[start[0]][start[1]]]))\n    visited = set()\n    visited.add((start[0], start[1], tuple([grid[start[0]][start[1]]])))\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    while queue:\n        i, j, path = queue.popleft()\n        if len(path) == k:\n            return path\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                new_path = path + [grid[ni][nj]]\n                if (ni, nj, tuple(new_path)) not in visited:\n                    visited.add((ni, nj, tuple(new_path)))\n                    queue.append((ni, nj, new_path))\n    return []"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i - 3])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 == 1:\n            product *= int(d)\n            has_odd = True\n    if has_odd:\n        return product\n    else:\n        return 0"}
{"idx": 132, "completion": "count = 0\n    for char in string:\n        if char == '[':\n            count += 1\n        elif char == ']':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0 and len(string) >= 4 and string.count('[]') != len(string) // 2"}
{"idx": 133, "completion": "total = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        total += rounded_num ** 2\n    return total"}
{"idx": 134, "completion": "if not txt:\n        return False\n    \n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    \n    words = txt.split()\n    if not words:\n        return False\n    \n    last_word = words[-1]\n    if len(last_word) == 1 and last_word[0] == last_char:\n        return True\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        return value\n\n    parsed_a = parse_value(a)\n    parsed_b = parse_value(b)\n\n    if isinstance(parsed_a, (int, float)) and isinstance(parsed_b, (int, float)):\n        if parsed_a > parsed_b:\n            return a\n        elif parsed_b > parsed_a:\n            return b\n        else:\n            return None\n    elif isinstance(parsed_a, str) and isinstance(parsed_b, (int, float)):\n        return a if parsed_a > str(parsed_b) else b if str(parsed_b) > parsed_a else None\n    elif isinstance(parsed_a, (int, float)) and isinstance(parsed_b, str):\n        return a if str(parsed_a) > parsed_b else b if parsed_b > str(parsed_a) else None\n    else:\n        return a if parsed_a > parsed_b else b if parsed_b > parsed_a else None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive underscores with a single dash\n    while \"__\" in text:\n        text = text.replace(\"__\", \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the part before and after the dot\n    before_dot, after_dot = file_name.split('.', 1)\n    \n    # Check the part before the dot\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check the part after the dot\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"idx": 143, "completion": "words = sentence.split()\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return ' '.join(primes)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n    \n    # Simplify the product fraction by dividing numerator and denominator by their greatest common divisor (GCD)\n    gcd_value = gcd(product_numerator, product_denominator)\n    simplified_numerator = product_numerator // gcd_value\n    simplified_denominator = product_denominator // gcd_value\n    \n    # Check if the denominator is 1 after simplification\n    return simplified_denominator == 1"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if len(num_str) > 0:\n                first_digit = int(num_str[0])\n                last_digit = int(num_str[-1])\n                if first_digit % 2 != 0 and last_digit % 2 != 0:\n                    count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "# Remove strings with odd lengths\n    lst = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list first by length, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if n == 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if not a or not b:\n        return False\n    \n    doubled_a = a + a\n    return b in doubled_a"}
{"idx": 155, "completion": "num = abs(num)\n    even_count = 0\n    odd_count = 0\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result.append(roman_numerals[value])\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "# Check if the sides can form a triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Check for right-angled triangle using Pythagorean theorem\n        sides = sorted([a, b, c])\n        return sides[0]**2 + sides[1]**2 == sides[2]**2\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "# Calculate the total number of carrots eaten after the meal\n    total_eaten = number + min(need, remaining)\n    # Calculate the remaining carrots after the meal\n    remaining_after = max(remaining - need, 0)\n    return [total_eaten, remaining_after]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if current_group:\n                current_group.append(char)\n                result.append(''.join(current_group))\n                current_group = []\n        elif char != ' ':\n            current_group.append(char)\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(num - mean) for num in numbers]\n    mad = sum(absolute_differences) / len(absolute_differences)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Invalid parentheses string, handle as needed\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return string\n    # Find the longest palindromic suffix.\n    i = len(string)\n    while i > 0 and not is_palindrome(string[i-1:]):\n        i -= 1\n    # Append the reverse of the prefix before the palindromic suffix.\n    return string + string[:i-1][::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError(\"Input strings must be of equal length.\")\n    \n    result = []\n    for char_a, char_b in zip(a, b):\n        if char_a == '1' and char_b == '1':\n            result.append('0')\n        elif char_a == '0' and char_b == '0':\n            result.append('0')\n        else:\n            result.append('1')\n    \n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())\n    return len(distinct_chars)"}
{"idx": 17, "completion": "beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    numbers_list = numbers.split(' ')\n    numbers_list = [number_map[num] for num in numbers_list]\n    numbers_list.sort()\n    numbers_list = [str(num) for num in numbers_list]\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i+1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers_sorted[i], numbers_sorted[i+1])\n    \n    return result"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "length = 0\n    for _ in string:\n        length += 1\n    return length"}
{"idx": 24, "completion": "for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n    return 0"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "# Create a dictionary to keep track of the count of each number\n    count_dict = {}\n    # Iterate through the list to populate the dictionary\n    for num in numbers:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    # Create a new list with elements that occur only once, preserving order\n    result = [num for num in numbers if count_dict[num] == 1]\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    lo = -1\n    hi = 1\n    while poly(xs, lo) * poly(xs, hi) > 0:\n        lo *= 2\n        hi *= 2\n    while hi - lo > 1e-10:  # Note: This is 10^-10. 1e-8 is 10^-8.\n        mid = (lo + hi) / 2\n        if poly(xs, lo) * poly(xs, mid) <= 0:\n            hi = mid\n        else:\n            lo = mid\n    return lo"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        l_prime[i] = sorted(l[i:i+3])[0]\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    even_values = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(i)\n            even_values.append(l[i])\n    even_values.sort()\n    for i in range(len(even_indicies)):\n        l[even_indicies[i]] = even_values[i]\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib_numbers = [0, 1]\n    prime_fib_numbers = []\n    while len(prime_fib_numbers) < n:\n        next_fib = fib_numbers[-1] + fib_numbers[-2]\n        fib_numbers.append(next_fib)\n        if is_prime(next_fib):\n            prime_fib_numbers.append(next_fib)\n    return prime_fib_numbers[n-1]"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set(l)\n    for num in l:\n        if -num in s and num != 0:\n            return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return (a * h) / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "common_elements = set(l1) & set(l2)\n    return sorted(common_elements)"}
{"idx": 59, "completion": "def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k):\n            if k % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return n\n\n    for i in range(2, n):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return -1  # never reached if n > 1 and is not a prime"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s) - 1:\n            count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    if shift > len(x):\n        return x[::-1]\n    else:\n        return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        if num > 0:\n            if num in freq:\n                freq[num] += 1\n            else:\n                freq[num] = 1\n    max_num = -1\n    for num, count in freq.items():\n        if num <= count and num > max_num:\n            max_num = num\n    return max_num"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_list = []\n    lst_copy = lst.copy()\n    \n    while lst_copy:\n        min_val = min(lst_copy)\n        sorted_list.append(min_val)\n        lst_copy.remove(min_val)\n        \n        if lst_copy:\n            max_val = max(lst_copy)\n            sorted_list.append(max_val)\n            lst_copy.remove(max_val)\n    \n    return sorted_list"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is balanced (palindromic)\n    if q != q[::-1]:\n        return False\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    if sum(q) > w:\n        return False\n    \n    return True"}
{"idx": 73, "completion": "n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    if len(lst1) == 0 and len(lst2) == 0:\n        return []\n    elif len(lst1) == 0:\n        return lst2\n    elif len(lst2) == 0:\n        return lst1\n    else:\n        total1 = sum(len(s) for s in lst1)\n        total2 = sum(len(s) for s in lst2)\n        if total1 < total2:\n            return lst1\n        elif total2 < total1:\n            return lst2\n        else:\n            return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the cube root of the absolute value of 'a' is an integer\n    # This is done by taking the cube root, rounding it to the nearest integer, \n    # cubing that integer, and checking if it equals the original number.\n    # The absolute value is used to handle negative numbers correctly.\n    return (round(abs(a) ** (1/3)) ** 3) == abs(a)"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 9 * 10 ** (n - 2) + 9 * 10 ** (n - 2) - 9 * 10 ** (n - 3)"}
{"idx": 84, "completion": "# Sum the digits of N\n    digit_sum = sum(int(d) for d in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_str = bin(digit_sum)[2:]\n    \n    return binary_str"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda t: t[1], reverse=True)\n    return result"}
{"idx": 88, "completion": "if not array:\n        return array\n    \n    first = array[0]\n    last = array[-1]\n    sum_fl = first + last\n    \n    if sum_fl % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = []\n    for char in s:\n        if char.isalpha():\n            shifted_char = chr(((ord(char.lower()) - ord('a') + 2 * 2) % 26) + ord('a'))\n            encrypted.append(shifted_char)\n        else:\n            encrypted.append(char)\n    return ''.join(encrypted)"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    if lst[0] == lst[1]:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for char in S:\n        if char in ['.', '?', '!']:\n            sentences.append(''.join(current_sentence).strip())\n            current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = \"aeiouAEIOU\"\n    encoded = []\n    for char in message:\n        if char in vowels:\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            encoded.append(new_char)\n        else:\n            encoded.append(char.swapcase())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(d) for d in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Get the unit digits of both numbers\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_a * unit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return s.replace(',', ' ').split()\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    else:\n        for num in range(y, x-1, -1):\n            if num % 2 == 0:\n                return num\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = 0\n    for num in range(n, m+1):\n        total += num\n    average = total / (m - n + 1)\n    rounded = round(average)\n    return bin(rounded)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    \n    # Filter and sort the array\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    \n    # Map numbers to their corresponding names\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    result = [number_names[num] for num in filtered]\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate factorial for even i\n            factorial = 1\n            for num in range(1, i+1):\n                factorial *= num\n            result.append(factorial)\n        else:\n            # Calculate sum for odd i\n            sum_num = 0\n            for num in range(1, i+1):\n                sum_num += num\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even = 0\n    odd = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Check if all elements in lst1 are already even\n    if all(num % 2 == 0 for num in lst1):\n        return \"YES\"\n    \n    # Count the number of odd numbers in lst1 and even numbers in lst2\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1, return \"YES\"\n    if even_in_lst2 >= odd_in_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letters = test.split()\n    if not letters:\n        return {}\n    \n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        count = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                count += 1\n        result.append(f\"the number of odd elements {count}n the str{count}ng {count} of the {count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units == 0:\n            continue\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x if x >= 0 else ~x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Iterate from the end of the word towards the beginning\n    for i in range(len(word)-2, 0, -1):\n        if word[i].lower() in vowels:\n            # Check if the characters before and after are consonants\n            if word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is balanced\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes'\n    # Check if concatenating in any order gives a balanced string\n    if is_balanced(s1 + s2) or is_balanced(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "sum = 0\n    for i in range(0, len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            sum += lst[i]\n    return sum"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [x for x in collatz_sequence if x % 2 != 0]\n    odd_numbers_sorted = sorted(odd_numbers)\n    return odd_numbers_sorted"}
{"idx": 124, "completion": "if not date:\n        return False\n    if len(date) != 10:\n        return False\n    if date[2] != '-' or date[5] != '-':\n        return False\n    month, day, year = date.split('-')\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month = int(month)\n    day = int(day)\n    year = int(year)\n    if month < 1 or month > 12:\n        return False\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:\n        if day < 1 or day > 29:\n            return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n    \n    # Check if there is an intersection\n    if overlap_start > overlap_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    length = overlap_end - overlap_start + 1\n    \n    # Handle negative lengths (shouldn't happen per problem statement)\n    if length <= 0:\n        return \"NO\"\n    \n    # Check if the length is a prime number\n    if length == 1:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        magnitude_sum += abs(num)\n    \n    return product * magnitude_sum"}
{"idx": 129, "completion": "n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    \n    def get_neighbors(i, j):\n        neighbors = []\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n:\n                neighbors.append((ni, nj))\n        return neighbors\n    \n    min_path = None\n    \n    for i in range(n):\n        for j in range(n):\n            stack = [(i, j, [grid[i][j]])]\n            while stack:\n                x, y, path = stack.pop()\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path.copy()\n                    continue\n                for nx, ny in get_neighbors(x, y):\n                    new_path = path + [grid[nx][ny]]\n                    stack.append((nx, ny, new_path))\n    \n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        trib = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                trib.append(1 + i // 2)\n            else:\n                trib.append(trib[i - 1] + trib[i - 2] + trib[i + 1])\n        return trib"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    if has_odd:\n        return product\n    else:\n        return 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n                if len(stack) > 0 and stack[-1] == '[':\n                    return True\n            else:\n                stack.append(char)\n    return False"}
{"idx": 133, "completion": "squared_sum = 0\n    for num in lst:\n        ceiling = math.ceil(num)\n        squared_sum += ceiling ** 2\n    return squared_sum"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    largest_neg = max(negatives) if negatives else None\n    smallest_pos = min(positives) if positives else None\n    \n    return (largest_neg, smallest_pos)"}
{"idx": 137, "completion": "# Convert both inputs to strings to handle commas and dots uniformly\n    str_a = str(a)\n    str_b = str(b)\n    \n    # Replace commas with dots for parsing as floats\n    normalized_a = str_a.replace(',', '.')\n    normalized_b = str_b.replace(',', '.')\n    \n    # Parse the normalized strings into floats\n    try:\n        float_a = float(normalized_a)\n        float_b = float(normalized_b)\n    except ValueError:\n        # This should theoretically not happen per the problem statement\n        return None\n    \n    if float_a == float_b:\n        return None\n    elif float_a > float_b:\n        return a\n    else:\n        return b"}
{"idx": 138, "completion": "if n % 2 != 0:\n        return False\n    if n < 8:\n        return False\n    return True"}
{"idx": 139, "completion": "if n == 0:\n        return 1\n    else:\n        return factorial(n) * special_factorial(n - 1)"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive underscores with a dash\n    dash = \"--\"\n    while dash in text:\n        text = text.replace(dash, \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split into name and extension\n    name_part, extension = file_name.split('.')\n    \n    # Check name part\n    if not name_part:\n        return 'No'\n    if not name_part[0].isalpha():\n        return 'No'\n    \n    # Check extension\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    primes = []\n    for word in words:\n        if is_prime(len(word)):\n            primes.append(word)\n    return ' '.join(primes)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            s = str(abs(num))\n            first = int(s[0])\n            last = int(s[-1])\n            if first % 2 == 1 and last % 2 == 1:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    filtered_list.sort(key=lambda x: (len(x), x))\n    \n    return filtered_list"}
{"idx": 150, "completion": "if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n        elif strength == max_strength:\n            if extensions.index(extension) < extensions.index(strongest_extension):\n                strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if not a or not b:\n        return False\n    if len(b) > len(a):\n        return False\n    double_a = a + a\n    for i in range(len(b)):\n        rotated = b[i:] + b[:i]\n        if rotated in double_a:\n            return True\n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even = 0\n    odd = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return (even, odd)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x',\n        40: 'xl', 50: 'l', 90: 'xc', 100: 'c',\n        400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n    \n    result = []\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result.append(roman_numerals[value])\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [total_eaten, left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for op, num in zip(operator, operand[1:]):\n        expression += op + str(num)\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result.append(c.upper())\n            else:\n                result.append(c.lower())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for num in range(a, b + 1):\n        if all(int(digit) % 2 == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"idx": 0, "completion": "for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False"}
{"idx": 1, "completion": "result = []\n    current_group = []\n    for char in paren_string:\n        if char == '(':\n            current_group.append(char)\n        elif char == ')':\n            if current_group:\n                current_group.append(char)\n                result.append(''.join(current_group))\n                current_group = []\n        elif char != ' ':\n            current_group.append(char)\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_diffs = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_diffs) / len(absolute_diffs)\n    return mad"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"idx": 6, "completion": "groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                if current_depth > 0:\n                    current_depth -= 1\n                else:\n                    # Invalid parentheses string, handle as needed\n                    pass\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "filtered_strings = []\n    for string in strings:\n        if substring in string:\n            filtered_strings.append(string)\n    return filtered_strings"}
{"idx": 8, "completion": "sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_ += num\n        product *= num\n    return (sum_, product)"}
{"idx": 9, "completion": "max_so_far = numbers[0]\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if not string:\n        return string\n    # Find the longest palindromic suffix.\n    i = len(string)\n    while i > 0 and not is_palindrome(string[i-1:]):\n        i -= 1\n    # Append the reverse of the prefix before the palindromic suffix.\n    return string + string[:i-1][::-1]"}
{"idx": 11, "completion": "return ''.join(chr(ord(a) ^ ord(b)) for a, b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    for s in strings:\n        if len(s) == max_length:\n            return s\n    return None"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    return greatest_common_divisor(b, a % b)"}
{"idx": 14, "completion": "prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"idx": 15, "completion": "return ' '.join(map(str, range(n + 1)))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "beat_dict = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        beats.append(beat_dict[note])\n    return beats"}
{"idx": 18, "completion": "count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n    return count"}
{"idx": 19, "completion": "number_words = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda word: number_words[word])\n    return ' '.join(sorted_words)"}
{"idx": 20, "completion": "numbers = sorted(numbers)\n    min_diff = float('inf')\n    result = (0.0, 0.0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    if range_val == 0:\n        return [0.0] * len(numbers)\n    return [(x - min_val) / range_val for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int) and not isinstance(x, bool)]"}
{"idx": 23, "completion": "length = 0\n    for _ in string:\n        length += 1\n    return length"}
{"idx": 24, "completion": "for d in reversed(range(1, n)):\n        if n % d == 0:\n            return d\n    return 0"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = {}\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen[num] = 1\n            result.append(num)\n        else:\n            seen[num] += 1\n    return result"}
{"idx": 27, "completion": "new_string = []\n    for char in string:\n        if char.isupper():\n            new_string.append(char.lower())\n        else:\n            new_string.append(char.upper())\n    return ''.join(new_string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n\n    low, high = -1.0, 1.0\n    while poly(xs, low) * poly(xs, high) > 0:\n        low *= 2.0\n        high *= 2.0\n\n    while high - low > 1e-8:\n        mid = (low + high) / 2.0\n        if poly(xs, mid) * poly(xs, high) > 0:\n            high = mid\n        else:\n            low = mid\n\n    return (low + high) / 2.0"}
{"idx": 33, "completion": "l_prime = []\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l_prime.append(l[i])\n        else:\n            l_prime.append(l[i])\n    l_prime[::3] = sorted(l_prime[::3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indicies = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indicies.append(l[i])\n    even_indicies.sort()\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indicies.pop(0))\n        else:\n            result.append(l[i])\n    return result"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num: int):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    a, b = 1, 1\n    while True:\n        a, b = b, a + b\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"}
{"idx": 40, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n ** 2"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "\"*** YOUR CODE HERE ***\"\n    for i in range(len(l)):\n        for j in range(len(l)):\n            if i != j and l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = x // base\n    return ''.join(reversed(digits))"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n+1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        return (l_sorted[n // 2 - 1] + l_sorted[n // 2]) / 2"}
{"idx": 48, "completion": "text = text.lower()\n    return text == text[::-1]"}
{"idx": 49, "completion": "result = 1\n    for _ in range(n):\n        result = (result * 2) % p\n    return result"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    new_text = []\n    for char in text:\n        if char.lower() not in vowels:\n            new_text.append(char)\n    return ''.join(new_text)"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x * y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "balance = 0\n    for bracket in brackets:\n        if bracket == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"}
{"idx": 57, "completion": "increasing = True\n    decreasing = True\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            increasing = False\n        if l[i] < l[i + 1]:\n            decreasing = False\n    return increasing or decreasing"}
{"idx": 58, "completion": "# Convert both lists to sets to find common elements\n    set1 = set(l1)\n    set2 = set(l2)\n    \n    # Find the intersection of the two sets\n    common_elements = set1.intersection(set2)\n    \n    # Convert the result to a sorted list\n    sorted_common = sorted(common_elements)\n    \n    return sorted_common"}
{"idx": 59, "completion": "# The function starts by initializing a variable i to 2, which is the smallest prime number.\n    i = 2\n    # The function then enters a loop that continues as long as i squared is less than or equal to n.\n    while i * i <= n:\n        # Inside the loop, the function checks if n is divisible by i.\n        if n % i == 0:\n            # If it is, the function divides n by i, effectively reducing n.\n            n = n // i\n        else:\n            # If n is not divisible by i, the function increments i by 1.\n            i += 1\n    # The loop continues until i squared is greater than n, at which point the loop exits.\n    # The function then returns the remaining value of n, which is the largest prime factor.\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "\"*** YOUR CODE HERE ***\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [x * i for i, x in enumerate(xs)][1:]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    s = s.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n        if s[i] == 'y' and i == len(s)-1:\n            count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    if shift >= len(x_str):\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# your code here\n    s = s.split()\n    apples = int(s[0])\n    oranges = int(s[2])\n    return n - apples - oranges"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "# Your code here\n    max_num = max(lst)\n    for num in range(max_num, 0, -1):\n        if lst.count(num) >= num:\n            return num\n    return -1"}
{"idx": 70, "completion": "sorted_list = []\n    while lst:\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal places\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "# Check if the list is balanced (palindromic)\n    is_balanced = q == q[::-1]\n    \n    # Check if the sum of the elements is less than or equal to the maximum possible weight\n    sum_elements = sum(q)\n    is_light_enough = sum_elements <= w\n    \n    # The object will fly if it's balanced and light enough\n    return is_balanced and is_light_enough"}
{"idx": 73, "completion": "n = len(arr)\n    dp = [[0] * n for _ in range(n)]\n    \n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if arr[i] == arr[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i + 1][j], dp[i][j - 1])\n    \n    return dp[0][n - 1]"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "primes = []\n    for num in range(2, 100):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "# Check if the cube root of the absolute value of 'a' is an integer\n    # This is done by checking if the cube of the rounded cube root equals 'a'\n    # The absolute value is used to handle negative numbers correctly\n    return round(abs(a) ** (1/3)) ** 3 == abs(a)"}
{"idx": 78, "completion": "primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]  # Convert decimal to binary and remove the '0b' prefix\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 1\n    return 10 ** (n - 1) + 9 * 10 ** (n - 2)"}
{"idx": 84, "completion": "sum_digits = sum(int(d) for d in str(N))\n    return bin(sum_digits)[2:]"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word, key=lambda x: ord(x)))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort()\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first = array[0]\n    last = array[-1]\n    total = first + last\n    \n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"idx": 89, "completion": "encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shifted = ord(char) + 4  # Shift down by two multiplied by two places (2 * 2 = 4)\n            if char.islower():\n                if shifted > ord('z'):\n                    shifted -= 26\n                encrypted += chr(shifted)\n            elif char.isupper():\n                if shifted > ord('Z'):\n                    shifted -= 26\n                encrypted += chr(shifted)\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = min(lst)\n    second_smallest = float('inf')\n    for num in lst:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"idx": 91, "completion": "sentences = []\n    current_sentence = []\n    for char in S:\n        if char in ['.', '?', '!']:\n            sentences.append(''.join(current_sentence).strip())\n            current_sentence = []\n        else:\n            current_sentence.append(char)\n    if current_sentence:\n        sentences.append(''.join(current_sentence).strip())\n    \n    count = 0\n    for sentence in sentences:\n        words = sentence.split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"}
{"idx": 92, "completion": "pass"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    encoded = []\n    for char in message:\n        if char in vowels:\n            # Determine the new character by moving two places ahead\n            if char.islower():\n                new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n            else:\n                new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n            encoded.append(new_char)\n        else:\n            # Swap the case of non-vowel characters\n            if char.islower():\n                encoded.append(char.upper())\n            else:\n                encoded.append(char.lower())\n    return ''.join(encoded)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        max_divisor = int(n**0.5) + 1\n        for i in range(3, max_divisor, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n    \n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = dict.keys()\n    is_lower = all(isinstance(key, str) and key.islower() for key in keys)\n    is_upper = all(isinstance(key, str) and key.isupper() for key in keys)\n    \n    return is_lower or is_upper"}
{"idx": 96, "completion": "if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (abs(a) % 10) * (abs(b) % 10)"}
{"idx": 98, "completion": "count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"idx": 99, "completion": "num = float(value)\n    if num >= 0:\n        if num - int(num) >= 0.5:\n            return int(num) + 1\n        else:\n            return int(num)\n    else:\n        if abs(num - int(num)) >= 0.5:\n            return int(num) - 1\n        else:\n            return int(num)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    for _ in range(n):\n        pile.append(current)\n        if current % 2 == 1:\n            current += 2\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "if not s:\n        return []\n    if ',' in s:\n        return s.replace(',', ' ').split()\n    return s.split()"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    else:\n        if y % 2 == 0:\n            return y\n        else:\n            if y - 1 >= x:\n                return y - 1\n            else:\n                return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    total = 0\n    for num in range(n, m+1):\n        total += num\n    average = total / (m - n + 1)\n    rounded = round(average)\n    return bin(rounded)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        has_even = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even = True\n                break\n        if not has_even:\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "if not arr:\n        return []\n    filtered = [x for x in arr if 1 <= x <= 9]\n    filtered.sort()\n    filtered.reverse()\n    names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = []\n    for num in filtered:\n        result.append(names[num-1])\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Compute factorial for even i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Compute sum for odd i\n            sum_num = 0\n            for j in range(1, i + 1):\n                sum_num += j\n            result.append(sum_num)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n            sum_digits = -int(str(num)[0])\n            for digit in str(num)[1:]:\n                sum_digits += int(digit)\n        else:\n            sum_digits = 0\n            for digit in str(num):\n                sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_in_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count the number of even numbers in lst2\n    even_in_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If the number of odd numbers in lst1 is less than or equal to the number of even numbers in lst2, return \"YES\"\n    if odd_in_lst1 <= even_in_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    letters = test.split()\n    if not letters:\n        return {}\n    \n    count_dict = {}\n    for letter in letters:\n        if letter in count_dict:\n            count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n    \n    if not count_dict:\n        return {}\n    \n    max_count = max(count_dict.values())\n    result = {k: v for k, v in count_dict.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = []\n    for char in s:\n        if char not in c:\n            result.append(char)\n    result = ''.join(result)\n    is_palindrome = result == result[::-1]\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for s in lst:\n        odd = 0\n        for c in s:\n            if int(c) % 2 != 0:\n                odd += 1\n        result.append(f\"the number of odd elements {odd}n the str{odd}ng {odd} of the {odd}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_operations = 0\n    for well in grid:\n        water_units = sum(well)\n        if water_units == 0:\n            continue\n        operations = math.ceil(water_units / capacity)\n        total_operations += operations\n    return total_operations"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    \n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    words = s.split()\n    result = []\n    \n    for word in words:\n        consonant_count = 0\n        for char in word:\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = set('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ')\n    \n    # Iterate from the end of the word towards the beginning\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "s1, s2 = lst\n    # Check if either string is empty\n    if not s1 or not s2:\n        return 'Yes' if not s1 and not s2 else 'No'\n    # Check if both strings are balanced\n    if is_balanced(s1) and is_balanced(s2):\n        return 'Yes'\n    # Check if one string is balanced and the other is not\n    if is_balanced(s1) or is_balanced(s2):\n        return 'Yes' if is_balanced(s1 + s2) or is_balanced(s2 + s1) else 'No'\n    # Both strings are unbalanced, check if their concatenation can be balanced\n    return 'Yes' if is_balanced(s1 + s2) or is_balanced(s2 + s1) else 'No'"}
{"idx": 120, "completion": "if k == 0:\n        return []\n    arr.sort()\n    return arr[-k:]"}
{"idx": 121, "completion": "return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])"}
{"idx": 122, "completion": "sum = 0\n    for i in range(k):\n        if len(str(arr[i])) <= 2:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    odd_numbers = [num for num in collatz_sequence if num % 2 != 0]\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date is in the correct format using regex\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is valid (1-12)\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_day = 31\n    elif month in [4, 6, 9, 11]:\n        max_day = 30\n    else:  # February\n        # Check for leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            max_day = 29\n        else:\n            max_day = 28\n\n    if day < 1 or day > max_day:\n        return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 0:\n                count += 1\n        return count"}
{"idx": 126, "completion": "# Check for duplicates\n    if len(lst) != len(set(lst)):\n        return False\n    \n    # Check if the list is sorted in ascending order\n    return lst == sorted(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Determine the overlapping interval\n    overlap_start = max(start1, start2)\n    overlap_end = min(end1, end2)\n\n    # Check if there is an overlap\n    if overlap_start > overlap_end:\n        return \"NO\"\n\n    # Calculate the length of the intersection\n    length = overlap_end - overlap_start\n\n    # Handle the case where length is negative (no overlap)\n    if length < 0:\n        return \"NO\"\n\n    # Check if the length is a prime number\n    if length < 2:\n        return \"NO\"\n\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            product *= 1\n        elif num < 0:\n            product *= -1\n        else:\n            product *= 0\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes"}
{"idx": 129, "completion": "n = len(grid)\n    min_val = float('inf')\n    min_path = []\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] < min_val:\n                min_val = grid[i][j]\n                min_path = [grid[i][j]]\n    \n    if k == 1:\n        return min_path\n    \n    neighbors = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    visited = set()\n    queue = []\n    \n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == min_val:\n                queue.append((i, j, [grid[i][j]]))\n                visited.add((i, j))\n    \n    while queue:\n        i, j, path = queue.pop(0)\n        if len(path) == k:\n            return path\n        for di, dj in neighbors:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                new_path = path + [grid[ni][nj]]\n                queue.append((ni, nj, new_path))\n                visited.add((ni, nj))\n    \n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        res = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                res.append(1 + i // 2)\n            else:\n                res.append(res[i - 1] + res[i - 2] + res[i + 1])\n        return res"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for d in str(n):\n        if int(d) % 2 == 1:\n            product *= int(d)\n            has_odd = True\n    if has_odd:\n        return product\n    else:\n        return 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    return len(stack) == 0 and string.count('[') >= 2 and string.count(']') >= 2"}
{"idx": 133, "completion": "rounded_lst = [math.ceil(num) for num in lst]\n    squared_lst = [num ** 2 for num in rounded_lst]\n    return sum(squared_lst)"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if not last_char.isalpha():\n        return False\n    if len(txt) == 1:\n        return True\n    if txt[-2] == ' ':\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n    \n    if not negative_nums:\n        a = None\n    else:\n        a = max(negative_nums)\n    \n    if not positive_nums:\n        b = None\n    else:\n        b = min(positive_nums)\n    \n    return (a, b)"}
{"idx": 137, "completion": "def parse_value(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            try:\n                if '.' in value:\n                    return float(value)\n                else:\n                    return int(value)\n            except ValueError:\n                return value\n        else:\n            return value\n\n    a_parsed = parse_value(a)\n    b_parsed = parse_value(b)\n\n    if isinstance(a_parsed, str) or isinstance(b_parsed, str):\n        if str(a_parsed) == str(b_parsed):\n            return None\n        return a if str(a_parsed) > str(b_parsed) else b\n    else:\n        if a_parsed == b_parsed:\n            return None\n        return a if a_parsed > b_parsed else b"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Replace consecutive underscores with a dash\n    while '__' in text:\n        text = text.replace('__', '-')\n    \n    return text"}
{"idx": 141, "completion": "# Check the number of digits in the file name\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check the number of dots in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into the part before the dot and the part after the dot\n    before_dot, after_dot = file_name.split('.')\n    \n    # Check the part before the dot\n    if not before_dot or not before_dot[0].isalpha():\n        return 'No'\n    \n    # Check the part after the dot\n    if after_dot not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total"}
{"idx": 143, "completion": "words = sentence.split()\n    prime_words = []\n    for word in words:\n        if is_prime(len(word)):\n            prime_words.append(word)\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "if not nums:\n        return []\n    return sorted(nums, key=lambda x: (sum(int(d) for d in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 == 1 and last_digit % 2 == 1:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 < index2:\n        return tuple(planets[index1 + 1:index2])\n    else:\n        return tuple(planets[index2 + 1:index1])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the filtered list first by length, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"idx": 150, "completion": "if n == 1:\n        return y\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(num ** 2 for num in lst if num > 0 and num % 2 != 0 and isinstance(num, int))"}
{"idx": 152, "completion": "return [abs(score - guess) for score, guess in zip(game, guess)]"}
{"idx": 153, "completion": "max_strength = -float('inf')\n    strongest_extension = None\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is a substring of the first word\n    if b in a:\n        return True\n    \n    # Generate all rotations of the second word\n    rotations = []\n    for i in range(len(b)):\n        rotation = b[i:] + b[:i]\n        rotations.append(rotation)\n    \n    # Check if any rotation of the second word is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "num = abs(num)\n    even_count = 0\n    odd_count = 0\n    for digit in str(num):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm',\n        900: 'cm',\n        500: 'd',\n        400: 'cd',\n        100: 'c',\n        90: 'xc',\n        50: 'l',\n        40: 'xl',\n        10: 'x',\n        9: 'ix',\n        5: 'v',\n        4: 'iv',\n        1: 'i'\n    }\n    \n    result = []\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: -x[0]):\n        while number >= value:\n            result.append(numeral)\n            number -= value\n    return ''.join(result).lower()"}
{"idx": 157, "completion": "# Sort the sides to identify the hypotenuse (longest side)\n    sides = sorted([a, b, c])\n    # Check if the sum of the squares of the two shorter sides equals the square of the longest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    return eval(expression)"}
{"idx": 161, "completion": "letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    result = []\n    for c in s:\n        if c.isalpha():\n            if c.isupper():\n                result.append(c.lower())\n            else:\n                result.append(c.upper())\n        else:\n            result.append(c)\n    return ''.join(result)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    result = []\n    for i in range(a, b + 1):\n        if i % 2 == 0:\n            result.append(i)\n    return result"}
