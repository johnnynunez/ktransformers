{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current = []\n    count = 0\n\n    for char in paren_string:\n        current.append(char)\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(''.join(current))\n                current = []\n\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for number in numbers[:-1]:\n        result.append(number)\n        result.append(delimeter)\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"idx": 6, "completion": "# Split the input string into individual groups of parentheses\n    paren_groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting levels for each group\n    max_nesting_levels = []\n\n    # Iterate over each group of parentheses\n    for group in paren_groups:\n        max_depth = 0\n        current_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n\n        # Append the maximum depth for this group to the list\n        max_nesting_levels.append(max_depth)\n\n    return max_nesting_levels"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "sum_result = sum(numbers)\n    product_result = 1\n    for number in numbers:\n        product_result *= number\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    return string + string[-2::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError(\"Strings must be of the same length\")\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "# Convert the string to lowercase to ignore case\n    string = string.lower()\n    \n    # Use a set to store distinct characters\n    distinct_characters = set(string)\n    \n    # Return the number of distinct characters\n    return len(distinct_characters)"}
{"idx": 17, "completion": "note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [note_lengths[note] for note in notes]"}
{"idx": 18, "completion": "if not string or not substring:\n        return 0\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"idx": 19, "completion": "num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n % 2 == 0:\n        return n == 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    a = 1\n    b = -sum([xs[i] / xs[-1] for i in range(len(xs) - 1)])\n    return -b / (2 * a)"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            n -= 1\n            if n == 0:\n                return next_fib"}
{"idx": 40, "completion": "# your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return \"\".join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"Negative arguments not implemented\")\n    return _fib(n)[0]"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1).intersection(set(l2)))"}
{"idx": 59, "completion": "# Start with the smallest prime factor\n    factor = 2\n    while factor * factor <= n:\n        # If factor is a factor of n, divide n by factor\n        while n % factor == 0 and n != factor:\n            n //= factor\n        # Increment factor to check the next number\n        factor += 1\n    return n"}
{"idx": 60, "completion": "if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string by spaces to separate the numbers from the words\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to track the smallest even value and its index\n    smallest_even_value = None\n    smallest_index = -1\n    \n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if (smallest_even_value is None) or (value < smallest_even_value):\n                smallest_even_value = value\n                smallest_index = index\n            elif value == smallest_even_value:\n                if index < smallest_index:\n                    smallest_index = index\n    \n    # If no even value is found, return an empty list\n    if smallest_even_value is None:\n        return []\n    \n    # Return the smallest even value and its index in a list\n    return [smallest_even_value, smallest_index]"}
{"idx": 69, "completion": "from collections import Counter\n    freq = Counter(lst)\n    candidates = [x for x in freq if freq[x] >= x]\n    if not candidates:\n        return -1\n    return max(candidates)"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left = 0\n    right = len(sorted_lst) - 1\n    toggle = True\n    \n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    \n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the set of prime hexadecimal digits\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the input string\n    for char in num:\n        # Check if the character is in the set of prime digits\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary_representation = bin(decimal)[2:]\n    return f\"db{binary_representation}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1)) + 1"}
{"idx": 84, "completion": "# Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to a binary string\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    sorted_words = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        sorted_words.append(sorted_word)\n    return ' '.join(sorted_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort by columns in descending order within the same row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first_value = array[0]\n    last_value = array[-1] if array else 0\n    sum_values = first_value + last_value\n    \n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted = ''\n    for char in s:\n        # Calculate the new character by shifting it down by 2 * 2 = 4 places\n        new_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted += new_char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    next_small = float('inf')\n    for num in lst:\n        if num < smallest:\n            next_small = smallest\n            smallest = num\n        elif num < next_small and num != smallest:\n            next_small = num\n    return next_small if next_small != float('inf') else None"}
{"idx": 91, "completion": "# Split the input string into sentences using '.', '?', or '!' as delimiters\n    sentences = re.split(r'[.!?]', S)\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Strip any leading/trailing whitespace from the sentence\n        sentence = sentence.strip()\n        \n        # Check if the sentence starts with the word \"I\"\n        if sentence.startswith(\"I\"):\n            # If it does, increment the boredom counter\n            boredom_count += 1\n    \n    # Return the total count of boredoms\n    return boredom_count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y"}
{"idx": 93, "completion": "vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = vowels[char.lower()]\n                if char.isupper():\n                    encoded_char = encoded_char.upper()\n                encoded_message += encoded_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Extract unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    while len(pile) < n:\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "# Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n    \n    # Iterate from y down to x to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    average = (n + m) // 2 if (n + m) % 2 == 0 else round((n + m) / 2)\n    return bin(average)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "# Filter the array to only include integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Replace each digit by its corresponding name\n    number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [number_names[num - 1] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = sum(range(1, i + 1))\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n\n    # Check if the array is sorted in non-decreasing order starting from min_index\n    for i in range(1, n):\n        if arr[(min_index + i) % n] < arr[(min_index + i - 1) % n]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # If lst1 already contains only even numbers, return \"YES\"\n    if odd_count_lst1 == 0:\n        return \"YES\"\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values(), default=0)\n    return {k: v for k, v in counts.items() if v == max_count}"}
{"idx": 112, "completion": "# Delete characters from s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "# First, filter out non-negative integers\n    non_negative_arr = [num for num in arr if num >= 0]\n\n    # Then, sort the array based on the number of ones in their binary representation\n    # and if the number of ones is the same, sort based on decimal value\n    sorted_arr = sorted(non_negative_arr, key=lambda x: (bin(x).count('1'), x))\n\n    return sorted_arr"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < len(word) - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1, s2 = lst\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "# First, sort the array in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Then, take the last k elements from the sorted array\n    max_k = sorted_arr[-k:]\n    \n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "total = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100:\n            total += arr[i]\n    return total"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Split the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except:\n        return False\n    \n    # Check if the date format is correct\n    if len(date.split('-')) != 3:\n        return False\n    \n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n    \n    # Check if the day is valid for each month\n    if month in [1,3,5,7,8,10,12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4,6,9,11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"idx": 126, "completion": "if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "def get_neighbors(i, j, N):\n        neighbors = []\n        if i > 0:\n            neighbors.append((i-1, j))\n        if i < N-1:\n            neighbors.append((i+1, j))\n        if j > 0:\n            neighbors.append((j-1, j))\n        if j < N-1:\n            neighbors.append((j+1, j))\n        return neighbors\n\n    N = len(grid)\n    min_path = None\n    for i in range(N):\n        for j in range(N):\n            visited = {}\n            queue = [(grid[i][j], i, j, [grid[i][j]])]\n            while queue:\n                current_val, current_i, current_j, path = queue.pop(0)\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path.copy()\n                    continue\n                for ni, nj in get_neighbors(current_i, current_j, N):\n                    if (ni, nj) not in visited or visited[(ni, nj)] > current_val:\n                        visited[(ni, nj)] = current_val\n                        queue.append((grid[ni][nj], ni, nj, path + [grid[ni][nj]]))\n    return min_path"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    if n == 0:\n        return tribonacci[:1]\n    elif n == 1:\n        return tribonacci\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n = n // 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False if not stack else True"}
{"idx": 133, "completion": "import math\n    return sum(math.ceil(x)**2 for x in lst)"}
{"idx": 134, "completion": "if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        else:\n            second_last_char = txt[-2]\n            if second_last_char == ' ':\n                return True\n            else:\n                return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False"}
{"idx": 139, "completion": "# Calculate the factorial of a number\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    # Calculate the special factorial\n    special_fact = 1\n    for i in range(1, n + 1):\n        special_fact *= factorial(i)\n\n    return special_fact"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Find all sequences of more than 2 underscores and replace them with a single '-'\n    while \"___\" in text:\n        text = text.replace(\"___\", \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot\n    if len(parts) != 2:\n        return 'No'\n    \n    name, extension = parts\n    \n    # Check if the name is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the number of digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Check if there are not more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator parts\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n\n    # Convert the string parts to integers\n    x_num = int(x_numerator)\n    x_den = int(x_denominator)\n    n_num = int(n_numerator)\n    n_den = int(n_denominator)\n\n    # Calculate the product of the two fractions\n    product_numerator = x_num * n_num\n    product_denominator = x_den * n_den\n\n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0"}
{"idx": 145, "completion": "def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "sum_of_squares = 0\n    for number in lst:\n        if isinstance(number, int) and number > 0 and number % 2 != 0:\n            sum_of_squares += number ** 2\n    return sum_of_squares"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n        return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    roman_num = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_num += symbol\n            number -= value\n    return roman_num"}
{"idx": 157, "completion": "# The sides of a right-angled triangle must satisfy the Pythagorean theorem.\n    # The theorem states that in a right-angled triangle, the square of the length\n    # of the hypotenuse (the side opposite the right angle) is equal to the sum of\n    # the squares of the lengths of the other two sides.\n    \n    # First, we need to identify the hypotenuse, which is the longest side.\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Then, we remove the hypotenuse from the list of sides.\n    sides.remove(hypotenuse)\n    \n    # Now, we check if the square of the hypotenuse is equal to the sum of the squares\n    # of the other two sides.\n    if hypotenuse**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operator and operand lists\n    for i in range(len(operator)):\n        op = operator[i]\n        num = operand[i+1]\n        \n        # Perform the operation based on the operator\n        if op == '+':\n            result += num\n        elif op == '-':\n            result -= num\n        elif op == '*':\n            result *= num\n        elif op == '//':\n            result //= num\n        elif op == '**':\n            result **= num\n    \n    return result"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if all(int(d)%2==0 for d in str(i))]"}
{"idx": 0, "completion": "for i, number in enumerate(numbers):\n        for j, other_number in enumerate(numbers):\n            if i != j:\n                if abs(number - other_number) < threshold:\n                    return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = \"\"\n    stack = []\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            if not stack:\n                # Start of a new group\n                result.append(\"\")\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                # End of the current group\n                result[-1] = current_group\n                current_group = \"\"\n\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "sum_result = sum(numbers)\n    product_result = 1\n    for number in numbers:\n        product_result *= number\n    return sum_result, product_result"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]"}
{"idx": 11, "completion": "return \"\".join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "if a == 0 or b == 0:\n        return max(a, b)\n    return greatest_common_divisor(b, a % b)"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Create a dictionary to map the note representations to their corresponding beats\n    note_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the music string into individual note representations\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beats\n    beats = []\n    \n    # Iterate over each note in the notes list\n    for note in notes:\n        # Append the corresponding number of beats to the beats list\n        beats.append(note_beats[note])\n    \n    return beats"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"idx": 19, "completion": "number_order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_order.index(x))\n    return ' '.join(numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "return list(dict.fromkeys(numbers))"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "# find the interval where the polynomial has a zero\n    a, b = -1, 1\n    while poly(xs, a) * poly(xs, b) > 0:\n        a *= 2\n        b *= 2\n    # use binary search to find the zero\n    while b - a > 1e-10:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) > 0:\n            a = c\n        else:\n            b = c\n    return (a + b) / 2"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    count = 0\n    a, b = 0, 1\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return a"}
{"idx": 40, "completion": "# your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n    return result"}
{"idx": 45, "completion": "return (a * h) / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (2 * modp(n - 1, p)) % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"Fibonacci index cannot be negative\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# Start with the smallest prime factor\n    factor = 2\n    while n % factor == 0:\n        n //= factor\n    if n == 1:\n        return factor\n    # Now n is odd, so we can skip even numbers\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        if n == 1:\n            return factor\n        factor += 2\n    return n"}
{"idx": 60, "completion": "return sum(range(n + 1))"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string by spaces\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to keep track of the smallest even value and its index\n    smallest_even = None\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                if index < smallest_index:\n                    smallest_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n\n    result = -1\n    for num, count in frequency.items():\n        if count >= num and num > result:\n            result = num\n\n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    toggle = True\n\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the prime digits in hexadecimal\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime digit\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary_representation = bin(decimal)[2:]\n    return f\"db{binary_representation}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 < gpa < 4.0:\n            letter_grades.append('A')\n        elif 3.3 < gpa <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 < gpa <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 < gpa <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 < gpa <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 < gpa <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 < gpa <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 < gpa <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 < gpa <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 < gpa <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 < gpa <= 0.7:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "# Calculate the total number of n-digit numbers\n    total_n_digit_numbers = 9 * (10 ** (n - 1))\n    \n    # Calculate the number of n-digit numbers that start with 1\n    start_with_1 = 1 * (10 ** (n - 1))\n    \n    # Calculate the number of n-digit numbers that end with 1\n    end_with_1 = 1 * (10 ** (n - 1))\n    \n    # Calculate the number of n-digit numbers that start AND end with 1\n    start_and_end_with_1 = 1 * (10 ** (n - 2)) if n > 1 else 1\n    \n    # Apply the inclusion-exclusion principle\n    result = start_with_1 + end_with_1 - start_and_end_with_1\n    \n    return result"}
{"idx": 84, "completion": "# Calculate the sum of digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort coordinates of the same row by columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted = ''\n    for char in s:\n        # Calculate the new character by shifting it down by (2 * 2) = 4 places\n        new_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted += new_char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    next_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            next_smallest = smallest\n            smallest = num\n        elif num < next_smallest and num != smallest:\n            next_smallest = num\n    \n    return next_smallest if next_smallest != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = vowels[char.lower()] if char.islower() else vowels[char.lower()].upper()\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_of_digits"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if all(isinstance(key, str) for key in keys):\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n    return False"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    return unit_a * unit_b"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number - int(number) == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    while len(pile) < n:\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "# Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n    \n    # Iterate from y down to x to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded = round(average)\n    return bin(rounded)"}
{"idx": 104, "completion": "def has_even_digit(n):\n        return any(d in {0, 2, 4, 6, 8} for d in set(str(n)))\n    \n    return sorted([num for num in x if not has_even_digit(num)])"}
{"idx": 105, "completion": "# Filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_to_name[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            # Calculate factorial of i\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum of numbers from 1 to i\n            total = sum(range(1, i + 1))\n            result.append(total)\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    \n    n = len(arr)\n    min_index = arr.index(min(arr))\n    \n    for i in range(n):\n        if arr[(min_index + i) % n] != sorted(arr)[i]:\n            return False\n    \n    return True"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # If there are no odd numbers in lst1, no exchange is needed\n    if odd_count_lst1 == 0:\n        return \"YES\"\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "# Split the input string into a list of words\n    words = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each character in the word\n        for char in word:\n            # If the character is already in the dictionary, increment its count\n            if char in letter_count:\n                letter_count[char] += 1\n            # Otherwise, add the character to the dictionary with a count of 1\n            else:\n                letter_count[char] = 1\n    \n    # If the dictionary is empty, return it\n    if not letter_count:\n        return letter_count\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_count.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    max_letters = {}\n    \n    # Iterate over the items in the letter_count dictionary\n    for letter, count in letter_count.items():\n        # If the count is equal to the maximum count, add the letter to the max_letters dictionary\n        if count == max_count:\n            max_letters[letter] = count\n    \n    return max_letters"}
{"idx": 112, "completion": "# Step 1: Remove all characters in s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Step 3: Return the result as a tuple\n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"idx": 114, "completion": "if not nums:\n        return 0\n    min_sum = nums[0]\n    current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Initialize the number of times we need to lower the buckets\n    times = 0\n\n    # Iterate over each well in the grid\n    for well in grid:\n        # Count the number of units of water in the current well\n        water_units = sum(well)\n\n        # If there are water units in the well, calculate how many times we need to lower the bucket\n        if water_units > 0:\n            # The number of times we need to lower the bucket is the ceiling of the water units divided by the bucket capacity\n            times += math.ceil(water_units / capacity)\n\n    return times"}
{"idx": 116, "completion": "# Filter out non-negative integers\n    non_negative = [num for num in arr if num >= 0]\n\n    # Sort based on the number of ones in binary representation and then by decimal value\n    sorted_arr = sorted(non_negative, key=lambda x: (bin(x).count('1'), x))\n\n    return sorted_arr"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    result = []\n    words = s.split()\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < len(word) - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1, s2 = lst\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Take the last k elements from the sorted array\n    max_k = arr_sorted[-k:]\n    \n    # Return the sorted list of the maximum k numbers\n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total += value\n    return total"}
{"idx": 122, "completion": "sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100 and arr[i] > -100:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "import re\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date format is mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # For February, check for leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "import heapq\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize a priority queue with all possible starting points\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n\n    # Perform a BFS with priority queue\n    while pq:\n        current_val, x, y, path = heapq.heappop(pq)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (new_path[0], nx, ny, new_path))\n\n    return []"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    odd_digits = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            odd_digits = True\n        n = n // 10\n    return product if odd_digits else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False if not stack else True"}
{"idx": 133, "completion": "import math\n    return sum(math.ceil(x)**2 for x in lst)"}
{"idx": 134, "completion": "if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        else:\n            second_last_char = txt[-2]\n            if second_last_char == ' ':\n                return True\n            else:\n                return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float if not already a number\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        a_num = a\n        b_num = b\n    else:\n        try:\n            a_num = float(a)\n            b_num = float(b)\n        except (ValueError, TypeError):\n            return None\n    \n    # Compare the numbers\n    if a_num > b_num:\n        return a\n    elif b_num > a_num:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since we are looking for 4 positive even numbers, the smallest sum we can get is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n    # If n is even, it can be expressed as the sum of 4 even numbers\n    # If n is odd, it cannot be expressed as the sum of 4 even numbers\n    return n % 2 == 0"}
{"idx": 139, "completion": "def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find all sequences of consecutive underscores\n    import re\n    sequences = re.findall(r'_{2,}', text)\n    \n    # Replace each sequence with a single '-'\n    for seq in sequences:\n        text = text.replace(seq, '-')\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if there are not more than three digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    \n    # Convert the numerator and denominator to integers\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    \n    # Calculate the product of the numerators and denominators\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Check if the product is a whole number\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: sum(int(d) for d in str(abs(x))))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths from the list\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "# Initialize variables to keep track of the strongest extension and its strength\n    strongest_extension = None\n    max_strength = None\n    \n    # Iterate over each extension in the list\n    for extension in extensions:\n        # Calculate the number of uppercase and lowercase letters\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        \n        # Calculate the strength of the current extension\n        strength = CAP - SM\n        \n        # Update the strongest extension if the current one is stronger\n        if max_strength is None or strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    # Return the class name with the strongest extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1] + b[:-1]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    roman_num = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_num += symbol\n            number -= value\n    return roman_num"}
{"idx": 157, "completion": "# First, we need to identify the longest side of the triangle, which will be the hypotenuse if it's a right-angled triangle.\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Now, we remove the hypotenuse from the list of sides to get the other two sides.\n    sides.remove(hypotenuse)\n    \n    # According to the Pythagorean theorem, in a right-angled triangle, the square of the hypotenuse is equal to the sum of the squares of the other two sides.\n    # So, we'll check if this condition holds true.\n    if hypotenuse**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = f\"{operand[0]}\"\n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if all(int(c)%2==0 for c in str(i))]"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    result = []\n    current_group = ''\n    stack = []\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            if not stack:\n                # Start of a new group\n                result.append('')\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                # End of the current group\n                result[-1] = current_group\n                current_group = ''\n\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for number in numbers:\n        if result:\n            result.append(delimeter)\n        result.append(number)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_numbers = sum(numbers)\n    product_numbers = 1\n    for number in numbers:\n        product_numbers *= number\n    return (sum_numbers, product_numbers)"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    return string + string[-2::-1]"}
{"idx": 11, "completion": "result = []\n    for i in range(len(a)):\n        result.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Split the music string into individual note representations\n    notes = music_string.split()\n    \n    # Define the mapping from note representation to beats\n    note_to_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Convert each note representation to its corresponding number of beats\n    beats = [note_to_beats[note] for note in notes]\n    \n    return beats"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = 0\n    i = 0\n    while i <= len(string) - len(substring):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count"}
{"idx": 19, "completion": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result"}
{"idx": 21, "completion": "min_value = min(numbers)\n    max_value = max(numbers)\n    return [(x - min_value) / (max_value - min_value) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors"}
{"idx": 26, "completion": "return list(dict.fromkeys(numbers))"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"The number of coefficients must be even.\")\n\n    a = xs[-1]\n    b = xs[-2]\n\n    x = -b / a\n\n    return x"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(len(l) // 3):\n        l_prime[3 * i] = sorted(l[3 * i:3 * i + 3])[0]\n        l_prime[3 * i + 1] = sorted(l[3 * i:3 * i + 3])[1]\n        l_prime[3 * i + 2] = sorted(l[3 * i:3 * i + 3])[2]\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib_seq = [0, 1]\n    count = 0\n    while True:\n        next_fib = fib_seq[-1] + fib_seq[-2]\n        fib_seq.append(next_fib)\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib"}
{"idx": 40, "completion": "# your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return \"\".join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in text:\n        if char.lower() not in vowels:\n            result += char\n    return result"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"idx": 60, "completion": "sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string by spaces to separate the numbers and words\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                if index < smallest_index:\n                    smallest_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num in freq:\n        if freq[num] >= num and num > result:\n            result = num\n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    toggle = True\n    \n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    \n    return result"}
{"idx": 71, "completion": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the hexadecimal digits that are prime\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime digit\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 < gpa < 4.0:\n            letter_grades.append('A')\n        elif 3.3 < gpa <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 < gpa <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 < gpa <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 < gpa <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 < gpa <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 < gpa <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 < gpa <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 < gpa <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 < gpa <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 < gpa <= 0.7:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 2  # Only the number 1 and 0, but 0 is not positive, so only 1\n    else:\n        # For n-digit numbers, the first digit can be 1, and the last digit can be 1\n        # The first digit can be 1 in 1 case (which is 1)\n        # The last digit can be 1 in 9^(n-1) cases (since the first digit can't be 0)\n        # We subtract 1 to exclude the case where both the first and last digits are 1\n        return 9 * (10 ** (n - 1)) - 9 * (9 ** (n - 1)) + 1"}
{"idx": 84, "completion": "# Calculate the sum of digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char.lower()) - ord('a') + 2 * 2) % 26\n            encrypted_char = chr(ord('a') + shift)\n            encrypted += encrypted_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    next_small = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            next_small = smallest\n            smallest = num\n        elif num < next_small and num != smallest:\n            next_small = num\n    \n    return next_small if next_small != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    encoded_message = []\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the position of the vowel in the alphabet\n                position = ord(char.lower()) - ord('a')\n                # Find the new character by moving 2 positions ahead\n                new_position = (position + 2) % 26\n                new_char = chr(new_position + ord('a'))\n                # Preserve the case of the original character\n                if char.isupper():\n                    new_char = new_char.upper()\n                else:\n                    new_char = new_char.lower()\n                encoded_message.append(new_char)\n            else:\n                # Swap the case of the consonant\n                if char.isupper():\n                    encoded_message.append(char.lower())\n                else:\n                    encoded_message.append(char.upper())\n        else:\n            # Non-alphabetic characters remain unchanged\n            encoded_message.append(char)\n    return ''.join(encoded_message)"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Extract unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number - int(number) == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "stones = []\n    current = n\n    while len(stones) < n:\n        stones.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return stones"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = (n + m) // 2 if (n + m) % 2 == 0 else round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        if all(int(d) % 2 != 0 for d in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "# Filter out numbers that are not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_names[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = sum(range(1, i+1))\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    min_index = arr.index(min(arr))\n\n    for i in range(1, n):\n        if arr[(min_index + i) % n] < arr[(min_index + i - 1) % n]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Count the number of odd elements in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n\n    # Count the number of even elements in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # If the number of odd elements in lst1 is less than or equal to the number of even elements in lst2,\n    # then it's possible to exchange elements to make lst1 all even.\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "# Split the string into individual words\n    words = test.split()\n    \n    # Initialize an empty dictionary to store the counts of each letter\n    letter_counts = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each character in the word\n        for char in word:\n            # If the character is already in the dictionary, increment its count\n            if char in letter_counts:\n                letter_counts[char] += 1\n            # Otherwise, add the character to the dictionary with a count of 1\n            else:\n                letter_counts[char] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values(), default=0)\n    \n    # Initialize an empty dictionary to store the letters with the maximum count\n    max_letters = {}\n    \n    # Iterate over the items in the letter_counts dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the max_letters dictionary\n        if count == max_count:\n            max_letters[letter] = count\n    \n    return max_letters"}
{"idx": 112, "completion": "# Remove characters in c from s\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < len(word) - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for c in s:\n            if c == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1 = lst[0]\n    s2 = lst[1]\n\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Select the last k elements (which are the largest)\n    max_k = arr_sorted[-k:]\n    \n    # Return the sorted list of the maximum k numbers\n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "# Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over the first k elements\n    for i in range(min(k, len(arr))):\n        # Check if the current element has at most two digits\n        if arr[i] < 100 and arr[i] > -100:\n            total_sum += arr[i]\n    \n    return total_sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"idx": 126, "completion": "if len(lst) <= 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "import heapq\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize a priority queue with all possible starting points\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n\n    while pq:\n        current_val, x, y, path = heapq.heappop(pq)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (new_path[0], nx, ny, new_path))\n\n    return []"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n = n // 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0 and '[]' in string"}
{"idx": 133, "completion": "# Round each element to the upper int (Ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum(x ** 2 for x in rounded_lst)\n    \n    return sum_of_squares"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if txt[-2] == ' ' or not txt[-2].isalpha():\n            return True\n    return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is less than 8\n    if n < 8:\n        return False\n    \n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n    \n    return False"}
{"idx": 139, "completion": "factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    special_factorial = 1\n    for i in range(1, n + 1):\n        special_factorial *= factorial // (i ** (n - i))\n    return special_factorial"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Find all sequences of more than 2 underscores and replace them with a single '-'\n    while \"___\" in text:\n        text = text.replace(\"___\", \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Count the number of digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    \n    # Check if there are more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed types\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "# Split the fractions into numerator and denominator\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n\n    # Convert the numerator and denominator to integers\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n\n    # Multiply the numerators and denominators\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n\n    # Check if the result is a whole number\n    return result_num % result_den == 0"}
{"idx": 145, "completion": "def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "def first_digit(n):\n        n = abs(n)\n        while n >= 10:\n            n = n // 10\n        return n\n    \n    def last_digit(n):\n        return abs(n) % 10\n    \n    count = 0\n    for num in nums:\n        if num > 10 and first_digit(num) % 2 != 0 and last_digit(num) % 2 != 0:\n            count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            if b[i:] + b[:i] in a:\n                return True\n        return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"idx": 157, "completion": "# The sides of the triangle must satisfy the Pythagorean theorem\n    # a^2 + b^2 = c^2, where c is the longest side (hypotenuse)\n    \n    # First, identify the longest side\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Remove the hypotenuse from the list of sides\n    sides.remove(hypotenuse)\n    \n    # Check if the Pythagorean theorem holds\n    if sides[0]**2 + sides[1]**2 == hypotenuse**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate over the operator and operand lists to build the expression\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    \n    # Evaluate the expression and return the result\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Determine the range of numbers to consider\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate through the range and check each number\n    for num in range(start, end + 1):\n        # Convert the number to a string to easily access each digit\n        num_str = str(num)\n        # Check if all digits in the number are even\n        if all(int(digit) % 2 == 0 for digit in num_str):\n            even_digits.append(num)\n    \n    return even_digits"}
{"idx": 0, "completion": "for i, number in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            if abs(number - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = \"\"\n    stack = []\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            if not stack:\n                # Start of a new group\n                result.append(\"\")\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                # End of the current group\n                result[-1] = current_group\n                current_group = \"\"\n\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "# Split the input string into groups of parentheses\n    paren_groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting levels for each group\n    max_nesting_levels = []\n\n    # Iterate over each group of parentheses\n    for group in paren_groups:\n        max_depth = 0\n        current_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n\n        # Append the maximum depth for this group to the list\n        max_nesting_levels.append(max_depth)\n\n    return max_nesting_levels"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for number in numbers:\n        product_result *= number\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "if not numbers:\n        return []\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[i - 1], numbers[i]))\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n\n    # Find the longest palindromic postfix\n    for cut in range(len(string)):\n        if is_palindrome(string[cut:]):\n            # Append reversed prefix to the string\n            return string + string[:cut][::-1]\n\n    # Fallback, should never happen for non-empty strings\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [note_lengths[note] for note in notes]"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"idx": 19, "completion": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    number_list = numbers.split()\n    number_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(number_list)"}
{"idx": 20, "completion": "sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n\n    if min_val == max_val:\n        raise ValueError(\"All elements in the list must be distinct\")\n\n    rescaled = [(x - min_val) / (max_val - min_val) for x in numbers]\n    return rescaled"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "# Check if the number of coefficients is even\n    if len(xs) % 2 == 0:\n        raise ValueError(\"The number of coefficients must be odd.\")\n\n    # Check if the largest coefficient is non-zero\n    if xs[-1] == 0:\n        raise ValueError(\"The largest coefficient must be non-zero.\")\n\n    # Define the function to find the root of\n    def f(x):\n        return poly(xs, x)\n\n    # Use the bisection method to find the root\n    a, b = -100, 100  # Initial interval\n    tolerance = 1e-10\n\n    while (b - a) / 2 > tolerance:\n        c = (a + b) / 2\n        if f(c) == 0:\n            return c\n        elif f(a) * f(c) < 0:\n            b = c\n        else:\n            a = c\n\n    return (a + b) / 2"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i + 3] = sorted(l[i:i + 3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            n -= 1\n            if n == 0:\n                return next_fib"}
{"idx": 40, "completion": "if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "if is_prime(n):\n        return n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return largest_prime_factor(n // i)\n    return n"}
{"idx": 60, "completion": "return sum(range(n + 1))"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "digits = str(x)\n    shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even_value = None\n    smallest_even_index = None\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = index\n            elif value == smallest_even_value:\n                if smallest_even_index is None or index < smallest_even_index:\n                    smallest_even_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even_value is not None:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    result = -1\n    for num, count in freq.items():\n        if count >= num and num > result:\n            result = num\n    \n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    toggle = True\n    \n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    \n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    if a == 0:\n        return True\n    x = 1\n    while x**3 <= a:\n        if x**3 == a:\n            return True\n        x += 1\n    return False"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits and their decimal equivalents\n    prime_hex_digits = {'2': 2, '3': 3, '5': 5, '7': 7, 'B': 11, 'D': 13}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime hexadecimal digit\n        if char in prime_hex_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length == 1:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 2  # The number 1 and the number 0\n    else:\n        return 9 * (10 ** (n - 2))"}
{"idx": 84, "completion": "# Calculate the sum of digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort by columns in descending order within the same row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return array\n    \n    first_index_value = array[0]\n    last_index_value = array[-1] if array else 0\n    sum_values = first_index_value + last_index_value\n    \n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted = ''\n    for char in s:\n        if char.isalpha():\n            shift = (ord(char.lower()) - ord('a') + 2 * 2) % 26\n            encrypted += chr(ord('a') + shift)\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    unique_sorted = []\n    for num in sorted_lst:\n        if num not in unique_sorted:\n            unique_sorted.append(num)\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]"}
{"idx": 91, "completion": "# Split the input string into sentences based on '.', '?', or '!'\n    sentences = re.split(r'[.!?]', S)\n    \n    # Initialize a counter for boredoms\n    boredom_count = 0\n    \n    # Iterate through each sentence\n    for sentence in sentences:\n        # Strip any leading/trailing whitespace from the sentence\n        sentence = sentence.strip()\n        \n        # Check if the sentence starts with the word \"I\"\n        if sentence.startswith(\"I\"):\n            # Increment the boredom counter\n            boredom_count += 1\n    \n    # Return the total count of boredoms\n    return boredom_count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the index of the vowel in the vowels string\n                index = vowels.find(char.lower())\n                # Find the next vowel in the sequence\n                next_vowel = vowels[(index + 2) % len(vowels)]\n                # Replace the vowel with the next one in the sequence\n                if char.isupper():\n                    encoded_message += next_vowel.upper()\n                else:\n                    encoded_message += next_vowel\n            else:\n                # Swap the case of the consonant\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            # If the character is not a letter, just add it to the encoded message\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n\n    sum_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_digits"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "stones = []\n    current_level = n\n    while len(stones) < n:\n        stones.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return stones"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "# Swap x and y if x is greater than y\n    if x > y:\n        x, y = y, x\n    \n    # Initialize the result to -1 (default if no even number is found)\n    result = -1\n    \n    # Iterate through the range [x, y]\n    for num in range(x, y + 1):\n        # Check if the number is even\n        if num % 2 == 0:\n            # Update the result if the current even number is larger\n            if num > result:\n                result = num\n    \n    return result"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    average = (n + m) / 2\n    rounded_average = round(average)\n    binary_representation = bin(rounded_average)\n    return binary_representation"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "# Filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_names[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        sum_digits = 0\n        for digit in str(num):\n            if digit == '-':\n                continue\n            sum_digits += int(digit)\n        if num < 0:\n            sum_digits = -sum_digits\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    shifts = 0\n\n    while shifts < n:\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n        shifts += 1\n\n    return False"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # If lst1 already has no odd numbers, return \"YES\"\n    if odd_count_lst1 == 0:\n        return \"YES\"\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    # Split the string into individual words\n    words = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_count = {}\n    \n    for word in words:\n        for letter in word:\n            if letter in letter_count:\n                letter_count[letter] += 1\n            else:\n                letter_count[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(letter_count.values(), default=0)\n    \n    # Filter the dictionary to only include letters with the maximum count\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    \n    return result"}
{"idx": 112, "completion": "# Step 1: Remove all characters in s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Step 3: Return the result as a tuple\n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"idx": 114, "completion": "# Initialize the minimum sum to the first element\n    min_sum = nums[0]\n    current_sum = nums[0]\n    \n    # Iterate through the array starting from the second element\n    for num in nums[1:]:\n        # Update the current sum to be the minimum of the current number or the current sum plus the number\n        current_sum = min(num, current_sum + num)\n        # Update the minimum sum if the current sum is smaller\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum"}
{"idx": 115, "completion": "# Initialize the number of times we need to lower the buckets\n    times = 0\n\n    # Iterate over each well in the grid\n    for well in grid:\n        # Count the number of units of water in the current well\n        water_units = well.count(1)\n\n        # If there are water units in the well, calculate how many times we need to lower the bucket\n        if water_units > 0:\n            # The number of times we need to lower the bucket is the ceiling of the water units divided by the bucket capacity\n            times += math.ceil(water_units / capacity)\n\n    return times"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Define a function to count the number of consonants in a word\n    def count_consonants(word):\n        consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n        return sum(1 for char in word if char in consonants)\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Check if the word has exactly n consonants\n        if count_consonants(word) == n:\n            # If it does, append it to the result list\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    word_length = len(word)\n    \n    for i in range(word_length - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < word_length - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1, s2 = lst\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Take the last k elements from the sorted array\n    max_k_elements = sorted_arr[-k:]\n    \n    return max_k_elements"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "# Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate over the first k elements of the array\n    for i in range(min(k, len(arr))):\n        # Check if the current element has at most two digits\n        if arr[i] < 100 and arr[i] > -100:\n            # Add the element to the sum\n            total_sum += arr[i]\n\n    return total_sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    if len(lst) != len(set(lst)):\n        return False\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # If there is no intersection, return \"NO\"\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "import heapq\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize a priority queue with all starting positions\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n\n    # Perform BFS with priority queue\n    while pq:\n        current_val, x, y, path = heapq.heappop(pq)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (new_path[0], nx, ny, new_path))\n\n    return []"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n = n // 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    if not stack:\n        return False\n    else:\n        return True"}
{"idx": 133, "completion": "# Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum(x ** 2 for x in rounded_lst)\n    \n    return sum_of_squares"}
{"idx": 134, "completion": "if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        else:\n            return not txt[-2].isalpha()\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace commas with dots for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False"}
{"idx": 139, "completion": "def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find all sequences of more than 2 underscores\n    import re\n    pattern = re.compile(r'_{2,}')\n    \n    # Replace each sequence with a single '-'\n    text = pattern.sub('-', text)\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n\n    # Convert the numerator and denominator to integers\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n\n    # Calculate the numerator and denominator of the product\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "if not nums:\n        return []\n\n    # Create a list of tuples (number, sum of digits)\n    num_sum_pairs = []\n    for num in nums:\n        abs_num = abs(num)\n        digit_sum = sum(int(digit) for digit in str(abs_num))\n        num_sum_pairs.append((num, digit_sum))\n\n    # Sort the list based on the sum of digits, then by the original index\n    sorted_pairs = sorted(num_sum_pairs, key=lambda x: (x[1], nums.index(x[0])))\n\n    # Extract the sorted numbers\n    sorted_nums = [pair[0] for pair in sorted_pairs]\n\n    return sorted_nums"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "strongest_extension = None\n    max_strength = None\n\n    for extension in extensions:\n        CAP = sum(1 for char in extension if char.isupper())\n        SM = sum(1 for char in extension if char.islower())\n        strength = CAP - SM\n\n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:] + b[0]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the Roman numeral symbols and their corresponding values\n    roman_numerals = [\n        (\"M\", 1000),\n        (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n        (\"I\", 1),\n    ]\n\n    # Initialize an empty string to build the Roman numeral\n    roman_numeral = \"\"\n\n    # Iterate over the Roman numeral symbols and their values\n    for symbol, value in roman_numerals:\n        # While the number is greater than or equal to the current value\n        while number >= value:\n            # Append the symbol to the Roman numeral string\n            roman_numeral += symbol\n            # Subtract the value from the number\n            number -= value\n\n    # Convert the Roman numeral string to lowercase\n    return roman_numeral.lower()"}
{"idx": 157, "completion": "# Sort the sides to make sure a <= b <= c\n    sides = sorted([a, b, c])\n    \n    # Check if the square of the longest side is equal to the sum of squares of the other two sides\n    return sides[2] ** 2 == sides[0] ** 2 + sides[1] ** 2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = f\"{operand[0]}\"\n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_group = \"\"\n    stack = []\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            if not stack:\n                # Start of a new group\n                result.append(\"\")\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                # End of the current group\n                result[-1] = current_group\n                current_group = \"\"\n\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for number in numbers[:-1]:\n        result.append(number)\n        result.append(delimeter)\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    sum_result = sum(numbers)\n    product_result = 1\n    for number in numbers:\n        product_result *= number\n    return sum_result, product_result"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    return string + string[-2::-1]"}
{"idx": 11, "completion": "if len(a) != len(b):\n        raise ValueError(\"Strings must be of equal length\")\n    return ''.join('1' if x != y else '0' for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count"}
{"idx": 19, "completion": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "return list(dict.fromkeys(numbers))"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    return math.pow(-sum(xs[:-1]) / xs[-1], 1 / (len(xs) - 1))"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            n -= 1\n            if n == 0:\n                return next_fib"}
{"idx": 40, "completion": "if len(l) < 3:\n        return False\n\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in text:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result)"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    shift = shift % len(s)\n    return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string to extract the number of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                if index < smallest_index:\n                    smallest_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "from collections import Counter\n    count = Counter(lst)\n    result = -1\n    for num in sorted(count, reverse=True):\n        if count[num] >= num:\n            result = num\n            break\n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left = 0\n    right = len(sorted_lst) - 1\n    toggle = True\n\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, a) if is_prime(i)]\n\n    for i in primes:\n        for j in primes:\n            if i == j:\n                continue\n            for k in primes:\n                if j == k or i == k:\n                    continue\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the set of prime hexadecimal digits\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime digit, increment the counter\n        if char in prime_digits:\n            prime_count += 1\n    \n    # Return the count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1)) - 1"}
{"idx": 84, "completion": "digit_sum = sum(int(digit) for digit in str(N))\n    return bin(digit_sum)[2:]"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort by columns in descending order for each row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted_string = \"\"\n    for char in s:\n        # Calculate the new character by shifting it down by 2 * 2 = 4 places\n        new_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted_string += new_char\n    return encrypted_string"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    next_small = float('inf')\n    for num in lst:\n        if num < smallest:\n            next_small = smallest\n            smallest = num\n        elif num < next_small and num != smallest:\n            next_small = num\n    return next_small if next_small != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = {'a', 'e', 'i', 'o', 'u'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the next character in the alphabet\n                if char.islower():\n                    new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n                encoded_message += new_char\n            else:\n                # Swap case\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Get the unit digits of both numbers\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    while len(pile) < n:\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s.strip())"}
{"idx": 102, "completion": "# Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n\n    # Iterate from y down to x to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "# Filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_to_name[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = sum(range(1, i+1))\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    for i in range(n):\n        if all(arr[(i + j) % n] == sorted_arr[j] for j in range(n)):\n            return True\n    return False"}
{"idx": 110, "completion": "# Check if lst1 is already all even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n\n    # Check if lst2 has any even numbers to exchange\n    if all(x % 2 != 0 for x in lst2):\n        return \"NO\"\n\n    # Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n\n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # If there are enough even numbers in lst2 to replace the odd numbers in lst1\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values()) if counts else 0\n    return {letter: count for letter, count in counts.items() if count == max_count}"}
{"idx": 112, "completion": "# Delete characters in s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum"}
{"idx": 115, "completion": "total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    words = s.split()\n    result = []\n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    for i in range(len(word)-1, 1, -1):\n        if word[i] in consonants and word[i-1] in vowels and word[i-2] in consonants:\n            return word[i-1]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1 = lst[0]\n    s2 = lst[1]\n\n    # Try both orders\n    if is_good(s1 + s2):\n        return 'Yes'\n    if is_good(s2 + s1):\n        return 'Yes'\n\n    return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Get the last k elements which are the maximum k numbers\n    max_k = arr_sorted[-k:]\n    \n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "sum_elements = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100:\n            sum_elements += arr[i]\n    return sum_elements"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "import re\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Check if the date format is mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n\n    # Split the date into month, day, and year\n    month, day, year = map(int, date.split('-'))\n\n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n\n    # Check the number of days based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        # For February, check if it's a leap year\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product_of_signs"}
{"idx": 129, "completion": "import heapq\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize a priority queue with all starting positions\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n\n    # Perform a BFS with priority queue\n    while pq:\n        current_val, x, y, path = heapq.heappop(pq)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (new_path[0], nx, ny, new_path))\n\n    return []"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    odd_digits_found = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            odd_digits_found = True\n        n = n // 10\n    return product if odd_digits_found else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False"}
{"idx": 133, "completion": "import math\n    return sum([math.ceil(x)**2 for x in lst])"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        else:\n            second_last_char = txt[-2]\n            if second_last_char == ' ':\n                return True\n            else:\n                return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Extract negative and positive integers\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    # Find the largest negative and smallest positive\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since we are looking for the sum of 4 positive even numbers, the smallest possible sum is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n    # If n is even, it can be expressed as the sum of 4 even numbers\n    # If n is odd, it cannot be expressed as the sum of 4 even numbers\n    return n % 2 == 0"}
{"idx": 139, "completion": "def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    \n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n    \n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find all sequences of more than 2 underscores\n    import re\n    pattern = re.compile(r'_{2,}')\n    \n    # Replace each sequence with a single '-'\n    text = pattern.sub('-', text)\n    \n    return text"}
{"idx": 141, "completion": "# Check if there are more than three digits\n    if sum(c.isdigit() for c in file_name) > 3:\n        return 'No'\n    \n    # Check if there is exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name into name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if the name is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    \n    # Calculate the product of the two fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Check if the product is a whole number\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is a substring of the first word\n    if b in a:\n        return True\n    \n    # Rotate the second word and check if any rotation is a substring of the first word\n    for i in range(len(b)):\n        rotated_b = b[i+1:] + b[:i+1]\n        if rotated_b in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the Roman numeral symbols and their corresponding values\n    roman_numerals = [\n        (\"m\", 1000),\n        (\"cm\", 900),\n        (\"d\", 500),\n        (\"cd\", 400),\n        (\"c\", 100),\n        (\"xc\", 90),\n        (\"l\", 50),\n        (\"xl\", 40),\n        (\"x\", 10),\n        (\"ix\", 9),\n        (\"v\", 5),\n        (\"iv\", 4),\n        (\"i\", 1),\n    ]\n\n    # Initialize an empty string to build the Roman numeral\n    roman_numeral = \"\"\n\n    # Iterate over the Roman numeral symbols and their values\n    for symbol, value in roman_numerals:\n        # While the remaining number is greater than or equal to the current value\n        while number >= value:\n            # Append the current symbol to the Roman numeral string\n            roman_numeral += symbol\n            # Subtract the value from the number\n            number -= value\n\n    # Return the Roman numeral string in lowercase\n    return roman_numeral"}
{"idx": 157, "completion": "# The sides of a right-angled triangle must satisfy the Pythagorean theorem.\n    # The theorem states that in a right-angled triangle, the square of the length\n    # of the hypotenuse (the side opposite the right angle) is equal to the sum of\n    # the squares of the lengths of the other two sides.\n    \n    # First, we need to identify the hypotenuse, which is the longest side of the triangle.\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Next, we remove the hypotenuse from the list of sides.\n    sides.remove(hypotenuse)\n    \n    # Now, we check if the square of the hypotenuse is equal to the sum of the squares\n    # of the other two sides.\n    if hypotenuse**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate over the operator and operand lists to build the expression\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    \n    # Evaluate the expression and return the result\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if all(int(c)%2 == 0 for c in str(i))]"}
{"idx": 0, "completion": "for i, number in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            if abs(number - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = ''\n    depth = 0\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n            if depth == 0:\n                groups.append(current_group)\n                current_group = ''\n\n    return groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "if not numbers:\n        return []\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(max_list[i - 1], numbers[i]))\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    return string + string[-2::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "# Convert the string to lowercase to make the comparison case-insensitive\n    string = string.lower()\n    # Use a set to store unique characters\n    unique_chars = set(string)\n    # Return the number of unique characters\n    return len(unique_chars)"}
{"idx": 17, "completion": "note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    notes = music_string.split()\n    beats = [note_lengths[note] for note in notes]\n    \n    return beats"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"idx": 19, "completion": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers = numbers.split()\n    numbers.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers)"}
{"idx": 20, "completion": "if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = []\n    for num in numbers:\n        rescaled_num = (num - min_num) / (max_num - min_num)\n        rescaled.append(rescaled_num)\n    return rescaled"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += 2\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n    return math.pow(-sum(xs[:-1]) / xs[-1], 1 / (len(xs) - 1))"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n        else:\n            l_prime[i:] = sorted(l[i:])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n    count = 0\n    a, b = 0, 1\n    while True:\n        if is_prime(b):\n            count += 1\n            if count == n:\n                return b\n        a, b = b, a + b"}
{"idx": 40, "completion": "# your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    if x == 0:\n        return \"0\"\n    remainders = []\n    while x > 0:\n        remainders.append(str(x % base))\n        x //= base\n    return \"\".join(remainders[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "for number in l:\n        if number >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"n must be >= 0\")\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# Start with the smallest prime factor\n    factor = 2\n    while n % factor == 0:\n        n //= factor\n    if n == 1:\n        return factor\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 2\n    return n"}
{"idx": 60, "completion": "return sum(range(1, n + 1))"}
{"idx": 61, "completion": "\"\"\"\n    count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\n    \"\"\"\n    # Solution 2\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s[:-1]:\n        if char in vowels:\n            count += 1\n    if s and s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "x = str(x)\n    shift = shift % len(x)\n    return x[-shift:] + x[:-shift]"}
{"idx": 66, "completion": "# Initialize the sum to 0\n    total_sum = 0\n    \n    # Iterate over each character in the string\n    for char in s:\n        # Check if the character is uppercase\n        if char.isupper():\n            # Add the ASCII value of the character to the total sum\n            total_sum += ord(char)\n    \n    # Return the total sum\n    return total_sum"}
{"idx": 67, "completion": "# Split the string by spaces to separate the numbers and words\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "if not arr:\n        return []\n    \n    min_even = None\n    min_index = -1\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if (min_even is None) or (value < min_even) or (value == min_even and index < min_index):\n                min_even = value\n                min_index = index\n    \n    if min_even is None:\n        return []\n    else:\n        return [min_even, min_index]"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num in freq:\n        if freq[num] >= num and num > result:\n            result = num\n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    toggle = True\n    \n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    \n    return result"}
{"idx": 71, "completion": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the hexadecimal digits that are prime\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime digit\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary_representation = bin(decimal)[2:]\n    return f\"db{binary_representation}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 < gpa < 4.0:\n            letter_grades.append('A')\n        elif 3.3 < gpa <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 < gpa <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 < gpa <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 < gpa <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 < gpa <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 < gpa <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 < gpa <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 < gpa <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 < gpa <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 < gpa <= 0.7:\n            letter_grades.append('D-')\n        elif gpa == 0.0:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length == 1:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "# The number of n-digit numbers that start with 1 is 9^(n-1)\n    # The number of n-digit numbers that end with 1 is 9^(n-1)\n    # However, we have double-counted the numbers that both start and end with 1\n    # The number of n-digit numbers that both start and end with 1 is 8^(n-2)\n    # Therefore, the total count is 9^(n-1) + 9^(n-1) - 8^(n-2)\n    if n == 1:\n        return 1  # Only the number 1 itself\n    return 2 * (9 ** (n - 1)) - (8 ** (n - 1))"}
{"idx": 84, "completion": "# Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to a binary string\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort coordinates of the same row by columns in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted_string = \"\"\n    for char in s:\n        # Calculate the new character by shifting it down by 2 * 2 = 4 places\n        new_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted_string += new_char\n    return encrypted_string"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    next_small = float('inf')\n    for num in lst:\n        if num < smallest:\n            next_small = smallest\n            smallest = num\n        elif num < next_small and num != smallest:\n            next_small = num\n    return next_small if next_small != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    \n    # Check if one of the numbers is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y"}
{"idx": 93, "completion": "encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                if char.islower():\n                    new_char = chr(((ord(char) - ord('a') + 2) % 26) + ord('a'))\n                else:\n                    new_char = chr(((ord(char) - ord('A') + 2) % 26) + ord('A'))\n                encoded_message += new_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i in range(0, len(s)):\n        if i % 2 == 0 and s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "pile = []\n    current_level = n\n    while current_level > 0:\n        pile.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return pile"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "# Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n    \n    # Iterate from y down to x to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "def has_even_digit(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num = num // 10\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"}
{"idx": 105, "completion": "# Filter the array to only include integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_names[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = sum(range(1, i + 1))\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    min_index = arr.index(min(arr))\n\n    for i in range(n):\n        if arr[(min_index + i) % n] != sorted_arr[i]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # If lst1 already has no odd numbers, return \"YES\"\n    if odd_count_lst1 == 0:\n        return \"YES\"\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    words = test.split()\n    count = {}\n    for word in words:\n        if word in count:\n            count[word] += 1\n        else:\n            count[word] = 1\n    \n    max_count = max(count.values())\n    result = {k: v for k, v in count.items() if v == max_count}\n    \n    return result"}
{"idx": 112, "completion": "# Create a set of characters to be deleted for faster lookup\n    c_set = set(c)\n    \n    # Filter out characters in s that are in c_set\n    result_string = ''.join([char for char in s if char not in c_set])\n    \n    # Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "total_water = sum(sum(row) for row in grid)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < len(word) - 1 and word[i-1] in consonants and word[i+1] in consonants:\n                return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1 = lst[0]\n    s2 = lst[1]\n\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Take the last k elements which are the largest\n    max_k = arr_sorted[-k:]\n    \n    # Return the sorted list of the largest k elements\n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "# Initialize sum to 0\n    total_sum = 0\n    \n    # Iterate over the first k elements\n    for i in range(min(k, len(arr))):\n        # Convert the current element to a string to count the number of digits\n        num_str = str(arr[i])\n        # If the number has at most two digits, add it to the sum\n        if len(num_str) <= 2:\n            total_sum += arr[i]\n    \n    return total_sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "import heapq\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n\n    # Initialize a priority queue with all possible starting points\n    pq = []\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(pq, (grid[i][j], i, j, [grid[i][j]]))\n\n    while pq:\n        current_val, x, y, path = heapq.heappop(pq)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(pq, (new_path[0], nx, ny, new_path))\n\n    return []"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    odd_digits_found = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            odd_digits_found = True\n        n = n // 10\n    if not odd_digits_found:\n        return 0\n    return product"}
{"idx": 132, "completion": "stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False if not stack else True"}
{"idx": 133, "completion": "# Round each element in the list to the upper int (Ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum(x ** 2 for x in rounded_lst)\n    \n    return sum_of_squares"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if txt[-2] == ' ' or not txt[-2].isalpha():\n            return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace commas with dots for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False"}
{"idx": 139, "completion": "def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= factorial(i)\n\n    return result"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Find all sequences of more than one underscore\n    import re\n    sequences = re.findall(r\"_{2,}\", text)\n    \n    # Replace each sequence with a single hyphen\n    for seq in sequences:\n        text = text.replace(seq, \"-\")\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n\n    # Convert the string representations to integers\n    x_numerator = int(x_numerator)\n    x_denominator = int(x_denominator)\n    n_numerator = int(n_numerator)\n    n_denominator = int(n_denominator)\n\n    # Calculate the product of the numerators and denominators\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n\n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: sum(int(d) for d in str(abs(x))))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths from the list\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length of each word in ascending order\n    # and then alphabetically if lengths are the same\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n    \n    return sorted_lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "def calculate_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n\n    strongest_extension = max(extensions, key=calculate_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the second word is already a substring of the first word\n    if b in a:\n        return True\n    \n    # Generate all rotations of the second word\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation is a substring of the first word\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"idx": 157, "completion": "# The sides of a right-angled triangle must satisfy the Pythagorean theorem.\n    # The theorem states that in a right-angled triangle, the square of the length\n    # of the hypotenuse (the side opposite the right angle) is equal to the sum of\n    # the squares of the lengths of the other two sides.\n    \n    # First, we need to identify the hypotenuse, which is the longest side.\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Remove the hypotenuse from the list of sides.\n    sides.remove(hypotenuse)\n    \n    # Now, we check if the square of the hypotenuse is equal to the sum of the squares\n    # of the other two sides.\n    if hypotenuse**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = f\"{operand[0]}\"\n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if all(int(d) % 2 == 0 for d in str(i))]"}
{"idx": 0, "completion": "for i, number in enumerate(numbers):\n        for j in range(i + 1, len(numbers)):\n            if abs(number - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = \"\"\n    stack = []\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            if not stack:\n                # Start of a new group\n                groups.append(\"\")\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                # End of the current group\n                groups[-1] = current_group\n                current_group = \"\"\n\n    return groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]"}
{"idx": 11, "completion": "return \"\".join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Create a dictionary to map the note representations to their corresponding beats\n    note_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the music string into individual note representations\n    notes = music_string.split()\n    \n    # Initialize an empty list to store the beats\n    beats = []\n    \n    # Iterate over each note in the notes list\n    for note in notes:\n        # Append the corresponding number of beats to the beats list\n        beats.append(note_beats[note])\n    \n    return beats"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count"}
{"idx": 19, "completion": "number_order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_order.index(x))\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n\n    def f(x):\n        return poly(xs, x)\n\n    a = -1\n    b = 1\n\n    while f(a) * f(b) > 0:\n        a *= 2\n        b *= 2\n\n    while b - a > 1e-10:\n        m = (a + b) / 2\n        if f(m) * f(a) > 0:\n            a = m\n        else:\n            b = m\n\n    return (a + b) / 2"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x == 1:\n            return False\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [1, 1]\n    while True:\n        fibs.append(fibs[-1] + fibs[-2])\n        if is_prime(fibs[-1]):\n            n -= 1\n            if n == 0:\n                return fibs[-1]"}
{"idx": 40, "completion": "# your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    if x == 0:\n        return \"0\"\n    remainders = []\n    while x > 0:\n        remainders.append(str(x % base))\n        x = x // base\n    return \"\".join(reversed(remainders))"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    result = []\n    for char in text:\n        if char.lower() not in vowels:\n            result.append(char)\n    return ''.join(result)"}
{"idx": 52, "completion": "for num in l:\n        if num >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "if l[0] < l[-1]:\n        return all(x <= y for x, y in zip(l, l[1:]))\n    else:\n        return all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "assert n > 1 and not is_prime(n)\n    return max(prime_factors(n))"}
{"idx": 60, "completion": "if n == 1:\n        return 1\n    else:\n        return n + sum_to_n(n - 1)"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string by spaces to separate the numbers and words\n    parts = s.split()\n    \n    # Extract the number of apples and oranges from the string\n    apples = int(parts[0])\n    oranges = int(parts[2])\n    \n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                if index < smallest_index:\n                    smallest_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "from collections import Counter\n    freq = Counter(lst)\n    candidates = [x for x in freq if freq[x] >= x]\n    return max(candidates) if candidates else -1"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    toggle = True\n    \n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    \n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count"}
{"idx": 74, "completion": "def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            if i == j:\n                continue\n            for k in primes:\n                if j == k or i == k:\n                    continue\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    if a == 0:\n        return True\n    for i in range(1, a + 1):\n        if i * i * i == a:\n            return True\n    return False"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the input string\n    for char in num:\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary_representation = bin(decimal)[2:]\n    return f\"db{binary_representation}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))"}
{"idx": 84, "completion": "# Calculate the sum of digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary representation\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    first_index_value = array[0]\n    last_index_value = array[-1] if array else 0\n    sum_values = first_index_value + last_index_value\n    \n    if sum_values % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted_string = \"\"\n    for char in s:\n        # Shift each character down by 2 * 2 = 4 places\n        encrypted_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted_string += encrypted_char\n    return encrypted_string"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    next_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            next_smallest = smallest\n            smallest = num\n        elif num < next_smallest and num != smallest:\n            next_smallest = num\n    return next_smallest if next_smallest != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_char = vowels[char.lower()] if char.islower() else vowels[char.lower()].upper()\n            else:\n                encoded_char = char.swapcase()\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n < 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Get the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i in range(0, len(s), 2):\n        if s[i].isupper() and s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "pile = []\n    current = n\n    while len(pile) < n:\n        pile.append(current)\n        if current % 2 == 0:\n            current += 1\n        else:\n            current += 2\n    return pile"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "# If x > y, swap them to ensure x <= y\n    if x > y:\n        x, y = y, x\n    \n    # Start from y and move downwards to x to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    \n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "# Filter the array to include only integers between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_names[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(sum(range(1, i+1)))\n        else:\n            result.append(math.factorial(i))\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if str(num) == str(num)[::-1]:\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        sum_digits = 0\n        for digit in str(num):\n            if digit == '-':\n                continue\n            sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    min_index = arr.index(min(arr))\n\n    for i in range(n):\n        if arr[(min_index + i) % n] != sorted(arr)[i]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Check if lst1 is already all even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n\n    # Check if lst2 has any even numbers to exchange\n    if all(x % 2 != 0 for x in lst2):\n        return \"NO\"\n\n    # Count odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n\n    # Count even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n\n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}"}
{"idx": 112, "completion": "# Step 1: Remove characters from s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    # Step 3: Return the result as a tuple\n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum"}
{"idx": 115, "completion": "total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "# First, we need to filter out any non-negative integers\n    non_negative_arr = [num for num in arr if num >= 0]\n\n    # Then, we sort the array based on the number of ones in their binary representation\n    # If the number of ones is the same, we sort based on the decimal value\n    sorted_arr = sorted(non_negative_arr, key=lambda x: (bin(x).count('1'), x))\n\n    return sorted_arr"}
{"idx": 117, "completion": "# Define a list of vowels for comparison\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Initialize a counter for consonants\n        consonant_count = 0\n        \n        # Iterate over each character in the word\n        for char in word:\n            # Check if the character is a consonant\n            if char.isalpha() and char not in vowels:\n                consonant_count += 1\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < len(word) - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for c in s:\n            if c == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1 = lst[0]\n    s2 = lst[1]\n\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Take the last k elements, which are the largest\n    max_k = arr_sorted[-k:]\n    \n    # Return the sorted list of the maximum k numbers\n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100 and arr[i] > -100:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the number of days in each month\n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if the day is within the valid range for the given month\n    if day < 1 or day > days_in_month.get(month, 0):\n        return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    count += 1\n        return count"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    \n    return sum_of_magnitudes * product_of_signs"}
{"idx": 129, "completion": "def is_valid(x, y, N):\n        return 0 <= x < N and 0 <= y < N\n\n    N = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n    min_path = None\n\n    for i in range(N):\n        for j in range(N):\n            queue = [(grid[i][j], i, j, [grid[i][j]])]\n            while queue:\n                current_value, x, y, path = queue.pop(0)\n                if len(path) == k:\n                    if min_path is None or path < min_path:\n                        min_path = path.copy()\n                    continue\n                for dx, dy in directions:\n                    nx, ny = x + dx, y + dy\n                    if is_valid(nx, ny, N):\n                        new_path = path + [grid[nx][ny]]\n                        queue.append((grid[nx][ny], nx, ny, new_path))\n\n    return min_path"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci_sequence = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + i // 2)\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i - 1] + tribonacci_sequence[i - 2] + tribonacci_sequence[i + 1])\n    \n    return tribonacci_sequence"}
{"idx": 131, "completion": "product = 1\n    odd_found = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            odd_found = True\n        n //= 10\n    return product if odd_found else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        for i in range(len(string)):\n            if string[i] == '[':\n                for j in range(i+1, len(string)):\n                    if string[j] == ']':\n                        if j - i > 1:\n                            return True\n        return False\n    else:\n        return False"}
{"idx": 133, "completion": "import math\n    return sum([math.ceil(x)**2 for x in lst])"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        second_last_char = txt[-2]\n        if second_last_char == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# The smallest sum of 4 positive even numbers is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n    # If n is even, it can be expressed as the sum of 4 even numbers\n    if n % 2 == 0:\n        return True\n    # If n is odd, it cannot be expressed as the sum of 4 even numbers\n    return False"}
{"idx": 139, "completion": "factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    special_factorial = 1\n    for i in range(1, n + 1):\n        special_factorial *= factorial // (i ** (n - i))\n    return special_factorial"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find all sequences of 2 or more underscores\n    import re\n    sequences = re.findall(r'_{2,}', text)\n    \n    # Replace each sequence with a single '-'\n    for seq in sequences:\n        text = text.replace(seq, '-', 1)\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check if there are not more than three digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # If all checks pass, return 'Yes'\n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_numerator, x_denominator = x.split('/')\n    n_numerator, n_denominator = n.split('/')\n    \n    # Convert the numerator and denominator to integers\n    x_numerator = int(x_numerator)\n    x_denominator = int(x_denominator)\n    n_numerator = int(n_numerator)\n    n_denominator = int(n_denominator)\n    \n    # Calculate the product of the numerators and denominators\n    product_numerator = x_numerator * n_numerator\n    product_denominator = x_denominator * n_denominator\n    \n    # Check if the product is a whole number\n    return product_numerator % product_denominator == 0"}
{"idx": 145, "completion": "def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start < end:\n        return tuple(planets[start+1:end])\n    else:\n        return tuple(planets[end+1:start])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Check if the length of b is greater than a\n    if len(b) > len(a):\n        return False\n    \n    # Create all rotations of b\n    rotations = [b[i:] + b[:i] for i in range(len(b))]\n    \n    # Check if any rotation is a substring of a\n    for rotation in rotations:\n        if rotation in a:\n            return True\n    \n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "if not (1 <= number <= 1000):\n        raise ValueError(\"Number must be between 1 and 1000.\")\n    \n    roman_numerals = [\n        (\"M\", 1000),\n        (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n        (\"I\", 1)\n    ]\n    \n    result = []\n    for symbol, value in roman_numerals:\n        while number >= value:\n            result.append(symbol.lower())\n            number -= value\n    \n    return ''.join(result)"}
{"idx": 157, "completion": "# The sides of the triangle must satisfy the Pythagorean theorem for it to be a right-angled triangle.\n    # The Pythagorean theorem states that in a right-angled triangle, the square of the length of the hypotenuse \n    # (the side opposite the right angle) is equal to the sum of squares of the lengths of the other two sides.\n    \n    # First, we need to identify the hypotenuse, which is the longest side of the triangle.\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Remove the hypotenuse from the list of sides.\n    sides.remove(hypotenuse)\n    \n    # Now, we check if the square of the hypotenuse is equal to the sum of squares of the other two sides.\n    if hypotenuse**2 == sides[0]**2 + sides[1]**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "# Initialize variables to store the maximum number of unique characters and the corresponding word\n    max_unique = 0\n    max_word = \"\"\n\n    # Iterate through each word in the list\n    for word in words:\n        # Convert the word to a set to find unique characters and get the length of the set\n        unique_chars = len(set(word))\n\n        # If the current word has more unique characters, update max_unique and max_word\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        # If the current word has the same number of unique characters but comes first lexicographically, update max_word\n        elif unique_chars == max_unique and word < max_word:\n            max_word = word\n\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = f\"{operand[0]}\"\n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    result = []\n    current_group = ''\n    stack = []\n\n    for char in paren_string:\n        current_group += char\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                result.append(current_group)\n                current_group = ''\n\n    return result"}
{"idx": 2, "completion": "return number % 1"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(absolute_differences)"}
{"idx": 5, "completion": "result = []\n    for number in numbers[:-1]:\n        result.append(number)\n        result.append(delimeter)\n    if numbers:\n        result.append(numbers[-1])\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_of_numbers = sum(numbers)\n    product_of_numbers = 1\n    for number in numbers:\n        product_of_numbers *= number\n    return (sum_of_numbers, product_of_numbers)"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]"}
{"idx": 11, "completion": "result = []\n    for i in range(len(a)):\n        result.append(str(int(a[i]) ^ int(b[i])))\n    return ''.join(result)"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Create a dictionary to map the note representations to their corresponding beats\n    note_beats = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the music string into individual note representations\n    notes = music_string.split()\n    \n    # Convert each note representation to its corresponding number of beats\n    beats = [note_beats[note] for note in notes]\n    \n    return beats"}
{"idx": 18, "completion": "if not string or not substring:\n        return 0\n    return sum(string[i:i+len(substring)] == substring for i in range(len(string)))"}
{"idx": 19, "completion": "num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: num_dict[x])\n    return ' '.join(num_list)"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n\n    return result"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "# TODO: implement\n    pass"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i + 3] = sorted(l[i:i + 3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            n -= 1\n            if n == 0:\n                return next_fib"}
{"idx": 40, "completion": "# your code here\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    if x == 0:\n        return \"0\"\n    remainders = []\n    while x > 0:\n        remainders.append(str(x % base))\n        x //= base\n    return \"\".join(reversed(remainders))"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l.sort()\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "return ''.join([char for char in text if char.lower() not in 'aeiou'])"}
{"idx": 52, "completion": "return all(i < t for i in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"Negative arguments not implemented\")\n    return _fib(n)[0]"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"idx": 60, "completion": "sum = 0\n    for i in range(1, n + 1):\n        sum += i\n    return sum"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s[:-1]:\n        if char in vowels:\n            count += 1\n    if s and s[-1] == 'y':\n        count += 1\n    elif s and s[-1] in vowels:\n        count += 1\n    return count"}
{"idx": 65, "completion": "digits = str(x)\n    shift = shift % len(digits)\n    return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even_value = None\n    smallest_even_index = None\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even_value is None or value < smallest_even_value:\n                smallest_even_value = value\n                smallest_even_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even_value is not None:\n        return [smallest_even_value, smallest_even_index]\n    else:\n        return []"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        freq[num] = freq.get(num, 0) + 1\n    \n    candidates = [num for num, count in freq.items() if count >= num]\n    \n    return max(candidates) if candidates else -1"}
{"idx": 70, "completion": "if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left = 0\n    right = len(sorted_lst) - 1\n    while left <= right:\n        result.append(sorted_lst[left])\n        if left != right:\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "# Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the total number of characters and return the appropriate list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    if a == 0:\n        return True\n    x = 1\n    while x**3 < a:\n        x += 1\n    return x**3 == a"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the count of prime digits\n    count = 0\n    \n    # Iterate over each character in the hexadecimal number\n    for char in num:\n        # Check if the character is a prime digit\n        if char in prime_digits:\n            count += 1\n    \n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))"}
{"idx": 84, "completion": "# Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to a binary string\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort by columns in descending order within the same row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return array\n\n    first_index_value = array[0]\n    last_index_value = array[-1] if array else 0\n    total = first_index_value + last_index_value\n\n    if total % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted_str = \"\"\n    for char in s:\n        # Shift each character down by 2 * 2 = 4 places\n        encrypted_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted_str += encrypted_char\n    return encrypted_str"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"idx": 92, "completion": "if not all(isinstance(num, int) for num in [x, y, z]):\n        return False\n    return (x == y + z) or (y == x + z) or (z == x + y)"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                index = ord(char.lower()) - ord('a')\n                new_char = chr((index + 2) % 26 + ord('a'))\n                if char.isupper():\n                    encoded_message += new_char.upper()\n                else:\n                    encoded_message += new_char\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "stones = []\n    current_level = n\n    while current_level > 0:\n        stones.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n        current_level += 1\n    return stones"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "# If x is greater than y, swap them\n    if x > y:\n        x, y = y, x\n\n    # Iterate from y down to x\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "def has_even_digit(number):\n        while number > 0:\n            digit = number % 10\n            if digit % 2 == 0:\n                return True\n            number = number // 10\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"}
{"idx": 105, "completion": "# Filter the array to include only integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_to_name[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            factorial = 1\n            for j in range(1, i + 1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            sum_i = sum(range(1, i + 1))\n            result.append(sum_i)\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n\n    # Check if the array is sorted in non-decreasing order after the minimum element\n    for i in range(1, n):\n        if arr[(min_index + i) % n] < arr[(min_index + i - 1) % n]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Check if all elements in lst1 are already even\n    if all(x % 2 == 0 for x in lst1):\n        return \"YES\"\n    \n    # Check if there are any even numbers in lst2 that can replace odd numbers in lst1\n    for x in lst1:\n        if x % 2 != 0:\n            if any(y % 2 == 0 for y in lst2):\n                continue\n            else:\n                return \"NO\"\n    \n    return \"YES\""}
{"idx": 111, "completion": "# Split the input string into a list of words\n    words = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_count = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each letter in the word\n        for letter in word:\n            # If the letter is already in the dictionary, increment its count\n            if letter in letter_count:\n                letter_count[letter] += 1\n            # Otherwise, add the letter to the dictionary with a count of 1\n            else:\n                letter_count[letter] = 1\n    \n    # Find the maximum count of any letter\n    max_count = max(letter_count.values(), default=0)\n    \n    # Create a dictionary to store the letters with the maximum count\n    max_letters = {}\n    \n    # Iterate over the letter count dictionary\n    for letter, count in letter_count.items():\n        # If the count matches the maximum count, add it to the max_letters dictionary\n        if count == max_count:\n            max_letters[letter] = count\n    \n    return max_letters"}
{"idx": 112, "completion": "# Step 1: Remove characters from s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n    return min_sum"}
{"idx": 115, "completion": "# Initialize the number of times we need to lower the buckets\n    times = 0\n\n    # Iterate over each well in the grid\n    for well in grid:\n        # Count the number of units of water in the current well\n        water_units = sum(well)\n\n        # If there are water units in the well, calculate how many times we need to lower the bucket\n        if water_units > 0:\n            # The number of times we need to lower the bucket is the ceiling of the water units divided by the bucket capacity\n            times += math.ceil(water_units / capacity)\n\n    return times"}
{"idx": 116, "completion": "# First, filter out non-negative integers\n    non_negative_arr = [num for num in arr if num >= 0]\n    \n    # Then, sort the array based on the number of ones in their binary representation\n    # and if the number of ones is the same, sort based on decimal value\n    sorted_arr = sorted(non_negative_arr, key=lambda x: (bin(x).count('1'), x))\n    \n    return sorted_arr"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    result = []\n    for word in s.split():\n        consonant_count = sum(1 for char in word if char not in vowels)\n        if consonant_count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    \n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the vowel are consonants\n            if i > 0 and i < len(word)-1:\n                if word[i-1] in consonants and word[i+1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1, s2 = lst\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Select the last k elements which are the maximum k numbers\n    max_k = sorted_arr[-k:]\n    \n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100 and arr[i] > -100:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is not empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Check the number of days based on the month\n    if month in {1, 3, 5, 7, 8, 10, 12}:\n        if day < 1 or day > 31:\n            return False\n    elif month in {4, 6, 9, 11}:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # If the intersection is valid (i.e., start <= end)\n    if intersection_start <= intersection_end:\n        # Calculate the length of the intersection\n        intersection_length = intersection_end - intersection_start + 1\n        \n        # Check if the length is a prime number\n        if is_prime(intersection_length):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        # If the intervals do not intersect\n        return \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    \n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    \n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        \n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n    \n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "import heapq\n\n    N = len(grid)\n    heap = []\n\n    # Initialize the heap with all possible starting points\n    for i in range(N):\n        for j in range(N):\n            heapq.heappush(heap, (grid[i][j], i, j, [grid[i][j]]))\n\n    # Perform BFS with priority queue\n    while heap:\n        current_val, x, y, path = heapq.heappop(heap)\n        if len(path) == k:\n            return path\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:\n                new_path = path + [grid[nx][ny]]\n                heapq.heappush(heap, (new_path[0], nx, ny, new_path))\n\n    return []"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    tribonacci = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i])\n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    odd_found = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            odd_found = True\n        n //= 10\n    return product if odd_found else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n    if not stack:\n        return False\n    else:\n        return True"}
{"idx": 133, "completion": "return sum(math.ceil(x)**2 for x in lst)"}
{"idx": 134, "completion": "if len(txt) == 0:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        second_last_char = txt[-2]\n        if second_last_char == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    a = max(negative_integers) if negative_integers else None\n    b = min(positive_integers) if positive_integers else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since we need to sum exactly 4 positive even numbers, the smallest sum possible is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n    # If n is even, it can be expressed as the sum of 4 even numbers\n    # If n is odd, it cannot be expressed as the sum of 4 even numbers\n    return n % 2 == 0"}
{"idx": 139, "completion": "factorial = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        factorial *= i\n        special_fact *= factorial\n    return special_fact"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find all sequences of more than 2 underscores\n    import re\n    pattern = re.compile(r'_{2,}')\n    \n    # Replace each sequence with a single '-'\n    text = pattern.sub('-', text)\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, extension = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check if there are more than three digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "# Iterate over the list using enumerate to access both index and value\n    for index, value in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if index % 3 == 0:\n            lst[index] = value ** 2\n        # Check if the index is a multiple of 4 and not a multiple of 3\n        elif index % 4 == 0 and index % 3 != 0:\n            lst[index] = value ** 3\n    \n    # Return the sum of all entries in the modified list\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    # Calculate the product of the two fractions\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n\n    # Check if the product is a whole number\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        b = b[-1] + b[:-1]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"idx": 157, "completion": "# The sides of a right-angled triangle must satisfy the Pythagorean theorem\n    # a^2 + b^2 = c^2, where c is the longest side (hypotenuse)\n    \n    # First, identify the longest side\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Remove the hypotenuse from the list of sides\n    sides.remove(hypotenuse)\n    \n    # Now, check if the Pythagorean theorem holds\n    if sides[0]**2 + sides[1]**2 == hypotenuse**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = f\"{operand[0]}\"\n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Determine the range of numbers to consider\n    start = min(a, b)\n    end = max(a, b)\n\n    # Initialize an empty list to store the even digits\n    even_digits = []\n\n    # Iterate through the range and check each number\n    for num in range(start, end + 1):\n        # Convert the number to a string to check each digit\n        num_str = str(num)\n        # Check if all digits in the number are even\n        if all(int(digit) % 2 == 0 for digit in num_str):\n            even_digits.append(num)\n\n    return even_digits"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    depth = 0\n\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n            if depth == 0:\n                groups.append(''.join(current_group))\n                current_group = []\n\n    return groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.append(delimeter)\n        result.append(number)\n    return result"}
{"idx": 6, "completion": "# Split the input string into individual groups of parentheses\n    paren_groups = paren_string.split()\n\n    # Initialize a list to store the maximum nesting levels for each group\n    max_nesting_levels = []\n\n    # Iterate over each group of parentheses\n    for group in paren_groups:\n        max_depth = 0\n        current_depth = 0\n\n        # Iterate over each character in the group\n        for char in group:\n            if char == '(':\n                # Increase the current depth when an opening parenthesis is encountered\n                current_depth += 1\n                # Update the maximum depth if the current depth exceeds it\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                # Decrease the current depth when a closing parenthesis is encountered\n                current_depth -= 1\n\n        # Append the maximum depth of the current group to the list\n        max_nesting_levels.append(max_depth)\n\n    return max_nesting_levels"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    return string + string[-2::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    else:\n        return greatest_common_divisor(a, b - a)"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Create a dictionary to map each note to its corresponding duration\n    note_duration = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    \n    # Split the music_string into individual notes\n    notes = music_string.split()\n    \n    # Convert each note to its corresponding duration using the dictionary\n    durations = [note_duration[note] for note in notes]\n    \n    return durations"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+len(substring)] == substring:\n            count += 1\n            i += len(substring) - 1\n        i += 1\n    return count"}
{"idx": 19, "completion": "number_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "if len(numbers) < 2:\n        raise ValueError(\"The list must contain at least two numbers.\")\n\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n\n    for i in range(len(numbers_sorted) - 1):\n        diff = abs(numbers_sorted[i] - numbers_sorted[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return rescaled"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    for x in range(2, n):\n        if n % x == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0, \"xs must have even number of coefficients\"\n    assert xs[-1] != 0, \"xs must have largest non zero coefficient\"\n    # find the interval [a, b] such that f(a) * f(b) < 0\n    # then use binary search to find the zero point\n    a = -1\n    b = 1\n    while poly(xs, a) * poly(xs, b) > 0:\n        a *= 2\n        b *= 2\n    while b - a > 1e-8:\n        c = (a + b) / 2\n        if poly(xs, c) * poly(xs, a) > 0:\n            a = c\n        else:\n            b = c\n    return (a + b) / 2"}
{"idx": 33, "completion": "l_prime = l.copy()\n    for i in range(0, len(l), 3):\n        if i + 3 <= len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[len(group) - 1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib = [0, 1]\n    count = 0\n    while True:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            count += 1\n            if count == n:\n                return next_fib"}
{"idx": 40, "completion": "if len(l) < 3:\n        return False\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "if x < 0:\n        return \"-\" + change_base(-x, base)\n    if x < base:\n        return str(x)\n    return change_base(x // base, base) + str(x % base)"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "for x in l:\n        if x >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# Your code here\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n"}
{"idx": 60, "completion": "return sum(range(n + 1))"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set('aeiouAEIOU')\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y') or s.endswith('Y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "x_str = str(x)\n    shift = shift % len(x_str)\n    return x_str[-shift:] + x_str[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string by spaces to separate the numbers and words\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes by subtracting the number of apples and oranges from the total number of fruits\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                if index < smallest_index:\n                    smallest_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num in freq:\n        if freq[num] >= num and num > result:\n            result = num\n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    while left <= right:\n        result.append(sorted_lst[left])\n        if left != right:\n            result.append(sorted_lst[right])\n        left += 1\n        right -= 1\n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if is_prime(i):\n            primes.append(i)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the hexadecimal digits that are prime\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime digit\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "if n == 1:\n        return 2\n    else:\n        return 9 * (10 ** (n - 1))"}
{"idx": 84, "completion": "# Calculate the sum of the digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to a binary string\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return []\n    \n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array)\n    \n    if sum_first_last % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array"}
{"idx": 89, "completion": "encrypted_str = \"\"\n    for char in s:\n        # Calculate the new character by shifting it down by 2 * 2 = 4 places\n        new_char = chr(((ord(char) - ord('a') + 4) % 26) + ord('a'))\n        encrypted_str += new_char\n    return encrypted_str"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(lst)\n    smallest = lst[0]\n    for num in lst:\n        if num > smallest:\n            return num\n    return None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith(\"I\"):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the index of the vowel in the vowels list\n                vowel_index = vowels.index(char.lower())\n                # Find the next vowel in the list\n                next_vowel = vowels[(vowel_index + 2) % len(vowels)]\n                # Replace the vowel with the next vowel\n                if char.isupper():\n                    encoded_message += next_vowel.upper()\n                else:\n                    encoded_message += next_vowel\n            else:\n                # Swap the case of the letter\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            # If the character is not a letter, add it as is\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = -1\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == -1:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(max_prime))\n    return sum_of_digits"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if all(isinstance(key, str) and key.islower() for key in keys):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 1:\n        return []\n    \n    primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "# Extract the unit digits\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    return product"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "stones = []\n    current_level = n\n    while len(stones) < n:\n        stones.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return stones"}
{"idx": 101, "completion": "import re\n    return re.split(r'[ ,]+', s.strip())"}
{"idx": 102, "completion": "if x > y:\n        return -1\n    \n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg_val = int(round(avg))\n    return bin(rounded_avg_val)"}
{"idx": 104, "completion": "def has_even_digit(num):\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num = num // 10\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    return sorted(result)"}
{"idx": 105, "completion": "# Filter the array to only include integers between 1 and 9 inclusive\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each digit by its corresponding name\n    result = [number_names[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum of numbers from 1 to i\n            total = sum(range(1, i+1))\n            result.append(total)\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        sum_digits = 0\n        for digit in str(num):\n            if digit == '-':\n                continue\n            sum_digits += int(digit)\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n    \n    n = len(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    \n    # Check if the array can be sorted by rotating around the minimum element\n    for i in range(1, n):\n        if arr[(min_index + i) % n] < arr[(min_index + i - 1) % n]:\n            return False\n    \n    return True"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # If lst1 already has all even numbers, return \"YES\"\n    if odd_count_lst1 == 0:\n        return \"YES\"\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    \n    counts = {}\n    for letter in test.split():\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    \n    max_count = max(counts.values())\n    return {letter: count for letter, count in counts.items() if count == max_count}"}
{"idx": 112, "completion": "# Step 1: Remove all characters in s that are in c\n    result = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n    \n    # Step 3: Return the result string and the palindrome check\n    return (result, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_digits}n the str{odd_digits}ng {odd_digits} of the {odd_digits}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        if current_sum < min_sum:\n            min_sum = current_sum\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum"}
{"idx": 115, "completion": "# Initialize the number of times we need to lower the buckets\n    num_lowers = 0\n\n    # Iterate over each well in the grid\n    for well in grid:\n        # Count the number of units of water in the current well\n        water_units = sum(well)\n\n        # If there are water units in the well, calculate how many times we need to lower the bucket\n        if water_units > 0:\n            # The number of times we need to lower the bucket is the ceiling of the water units divided by the bucket capacity\n            num_lowers += math.ceil(water_units / capacity)\n\n    return num_lowers"}
{"idx": 116, "completion": "# Your code here\n    pass"}
{"idx": 117, "completion": "vowels = set(\"aeiouAEIOU\")\n    result = []\n    words = s.split()\n    \n    for word in words:\n        consonant_count = sum(1 for char in word if char not in vowels and char.isalpha())\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    word_length = len(word)\n    \n    for i in range(word_length - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the current vowel are consonants\n            if i > 0 and i < word_length - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for c in s:\n            if c == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1 = lst[0]\n    s2 = lst[1]\n\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    arr_sorted = sorted(arr)\n    \n    # Get the k maximum elements from the sorted array\n    max_k = arr_sorted[-k:]\n    \n    # Return the sorted list of the k maximum elements\n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for index, value in enumerate(lst):\n        if index % 2 == 0 and value % 2 != 0:\n            total += value\n    return total"}
{"idx": 122, "completion": "sum = 0\n    for i in range(min(k, len(arr))):\n        if arr[i] < 100 and arr[i] > -100:\n            sum += arr[i]\n    return sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the number of days in each month\n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if the day is within the valid range for the given month\n    if day < 1 or day > days_in_month.get(month, 0):\n        return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length ** 0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "def find_min_path(grid, k, start_row, start_col):\n        n = len(grid)\n        min_path = None\n        min_path_val = None\n\n        def dfs(row, col, path, path_val):\n            nonlocal min_path, min_path_val\n            if len(path) == k:\n                if min_path_val is None or path_val < min_path_val:\n                    min_path = path.copy()\n                    min_path_val = path_val\n                return\n\n            for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < n and 0 <= nc < n:\n                    new_path = path + [grid[nr][nc]]\n                    new_path_val = path_val + [grid[nr][nc]]\n                    dfs(nr, nc, new_path, new_path_val)\n\n        dfs(start_row, start_col, [grid[start_row][start_col]], [grid[start_row][start_col]])\n        return min_path\n\n    n = len(grid)\n    min_path = None\n    min_path_val = None\n\n    for i in range(n):\n        for j in range(n):\n            path = find_min_path(grid, k, i, j)\n            if min_path_val is None or path < min_path_val:\n                min_path = path\n                min_path_val = path\n\n    return min_path"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1, 3]\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n = n // 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False"}
{"idx": 133, "completion": "import math\n    return sum([math.ceil(x)**2 for x in lst])"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        second_last_char = txt[-2]\n        if second_last_char == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Filter negative and positive integers\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    # Find the largest negative and smallest positive\n    a = max(negatives) if negatives else None\n    b = min(positives) if positives else None\n    \n    return (a, b)"}
{"idx": 137, "completion": "# Replace comma with dot for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since we need exactly 4 positive even numbers, the smallest sum we can get is 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n    # If n is even, it can be expressed as the sum of 4 even numbers\n    # If n is odd, it cannot be expressed as the sum of 4 even numbers\n    return n % 2 == 0"}
{"idx": 139, "completion": "factorial = 1\n    special_factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n        special_factorial *= factorial\n    return special_factorial"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Find all sequences of more than one underscore\n    import re\n    sequences = re.findall(r'_{2,}', text)\n    \n    # Replace each sequence with a single '-'\n    for seq in sequences:\n        text = text.replace(seq, '-', 1)\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Count the number of digits in the name\n    digit_count = sum(c.isdigit() for c in name)\n    if digit_count > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            lst[i] = lst[i] ** 3\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    def parse_fraction(frac):\n        num, denom = frac.split('/')\n        return int(num), int(denom)\n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n\n    # Calculate the product of the two fractions\n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n\n    # Simplify the product fraction\n    common_divisor = gcd(product_num, product_denom)\n    simplified_num = product_num // common_divisor\n    simplified_denom = product_denom // common_divisor\n\n    # Check if the simplified denominator is 1\n    return simplified_denom == 1"}
{"idx": 145, "completion": "def digit_sum(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    \n    return lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:] + b[0]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"idx": 157, "completion": "# The sides of the triangle must satisfy the Pythagorean theorem\n    # a^2 + b^2 = c^2, where c is the longest side (hypotenuse)\n    sides = [a, b, c]\n    sides.sort()\n    \n    # Check if the square of the longest side equals the sum of squares of the other two sides\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operator and operand lists to build the expression\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i+1])\n    \n    # Evaluate the expression\n    result = eval(expression)\n    \n    return result"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "if a > b:\n        a, b = b, a\n    return [i for i in range(a, b+1) if i % 2 == 0]"}
{"idx": 0, "completion": "for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    current_group = []\n    balance = 0\n\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance == 0:\n                groups.append(''.join(current_group))\n                current_group = []\n\n    return groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                if depth > max_depth:\n                    max_depth = depth\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    sum_result = sum(numbers)\n    product_result = 1\n    for number in numbers:\n        product_result *= number\n    return (sum_result, product_result)"}
{"idx": 9, "completion": "max_list = []\n    current_max = None\n    for number in numbers:\n        if current_max is None or number > current_max:\n            current_max = number\n        max_list.append(current_max)\n    return max_list"}
{"idx": 10, "completion": "if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[i-1::-1]\n    return string + string[-2::-1]"}
{"idx": 11, "completion": "return ''.join('0' if x == y else '1' for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "note_lengths = {\n        'o': 4,\n        'o|': 2,\n        '.|': 1\n    }\n    notes = music_string.split()\n    return [note_lengths[note] for note in notes]"}
{"idx": 18, "completion": "if not substring:\n        return 0\n    count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count += 1\n        else:\n            return count"}
{"idx": 19, "completion": "number_order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_order.index(x))\n    return ' '.join(numbers_list)"}
{"idx": 20, "completion": "numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n    for i in range(1, len(numbers) - 1):\n        distance = abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return rescaled"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    divisor = 2\n    while n >= 2:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n    return factors"}
{"idx": 26, "completion": "# Create a set to store the unique elements\n    unique_elements = set()\n    # Create a list to store the result\n    result = []\n    # Iterate over the list of numbers\n    for number in numbers:\n        # If the number is not in the set, add it to the result\n        if number not in unique_elements:\n            result.append(number)\n            # Add the number to the set\n            unique_elements.add(number)\n    return result"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True"}
{"idx": 32, "completion": "# Check if the number of coefficients is even\n    if len(xs) % 2 == 0:\n        raise ValueError(\"The number of coefficients must be odd.\")\n\n    # Check if the largest coefficient is non-zero\n    if xs[-1] == 0:\n        raise ValueError(\"The largest coefficient must be non-zero.\")\n\n    # Define the polynomial function\n    def f(x):\n        return poly(xs, x)\n\n    # Use the bisection method to find a zero\n    a, b = -1e6, 1e6  # Initial interval [a, b]\n    tol = 1e-8  # Tolerance for convergence\n    max_iter = 1000  # Maximum number of iterations\n\n    for _ in range(max_iter):\n        c = (a + b) / 2\n        fc = f(c)\n\n        if abs(fc) < tol:\n            return c\n\n        if f(a) * fc < 0:\n            b = c\n        else:\n            a = c\n\n    raise RuntimeError(\"Failed to converge to a zero.\")"}
{"idx": 33, "completion": "l_prime = l[:]\n    for i in range(0, len(l), 3):\n        if i+2 < len(l):\n            l_prime[i:i+3] = sorted(l[i:i+3])\n    return l_prime"}
{"idx": 34, "completion": "return sorted(list(set(l)))"}
{"idx": 35, "completion": "max_el = l[0]\n    for el in l:\n        if el > max_el:\n            max_el = el\n    return max_el"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_indices = l[::2]\n    even_indices.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_indices[i // 2])\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group back. Unless group has fewer elements than 3.\n    groups = [(group[2] + group[:2]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            n -= 1\n            if n == 0:\n                return next_fib"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n    return \"\".join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n < 0:\n        raise ValueError(\"n must be non-negative\")\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1] for i in range(len(l)-1)))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# Start with the smallest prime factor\n    factor = 2\n    while n % factor == 0:\n        n //= factor\n    if n == 1:\n        return factor\n    # Now n is odd, so we can skip even numbers\n    factor = 3\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 2\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [xs[i] * i for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = set(\"aeiouAEIOU\")\n    count = 0\n    for char in s[:-1]:\n        if char in vowels:\n            count += 1\n    if s and s[-1] == 'y':\n        count += 1\n    elif s and s[-1] in vowels:\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    shift = shift % len(s)\n    return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string to extract the number of apples and oranges\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even = None\n    smallest_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0:  # Check if the value is even\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_index = index\n            elif value == smallest_even:\n                if index < smallest_index:\n                    smallest_index = index\n\n    # If a smallest even value was found, return it with its index\n    if smallest_even is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []"}
{"idx": 69, "completion": "frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    result = -1\n    for num in frequency:\n        if frequency[num] >= num and num > result:\n            result = num\n    return result"}
{"idx": 70, "completion": "if not lst:\n        return []\n    \n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    toggle = True\n    \n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    \n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[-(i + 1)]:\n            changes += 1\n    return changes"}
{"idx": 74, "completion": "def count_chars(lst):\n        return sum(len(s) for s in lst)\n    \n    count1 = count_chars(lst1)\n    count2 = count_chars(lst2)\n    \n    if count1 <= count2:\n        return lst1\n    else:\n        return lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    \n    primes = []\n    for num in range(2, a):\n        if is_prime(num):\n            primes.append(num)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"}
{"idx": 76, "completion": "if n == 1:\n        return x == 1\n    power = 1\n    while power <= x:\n        if power == x:\n            return True\n        power *= n\n    return False"}
{"idx": 77, "completion": "if a < 0:\n        a = -a\n    return round(a ** (1/3)) ** 3 == a"}
{"idx": 78, "completion": "# Define the hexadecimal digits that are prime\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize a counter for prime digits\n    prime_count = 0\n    \n    # Iterate through each character in the input string\n    for char in num:\n        # Check if the character is a prime digit\n        if char in prime_digits:\n            prime_count += 1\n    \n    return prime_count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s)-2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "length = len(string)\n    if length == 1:\n        return False\n    for i in range(2, length):\n        if length % i == 0:\n            return False\n    return True"}
{"idx": 83, "completion": "# The number of n-digit numbers that start with 1 is 9^(n-1)\n    # The number of n-digit numbers that end with 1 is 9^(n-1)\n    # However, the numbers that both start and end with 1 are counted twice\n    # The number of n-digit numbers that both start and end with 1 is 8^(n-2)\n    # Therefore, the total count is 9^(n-1) + 9^(n-1) - 8^(n-2)\n    if n == 1:\n        return 1  # Only the number 1\n    else:\n        return 2 * (9 ** (n - 1)) - (8 ** (n - 2))"}
{"idx": 84, "completion": "# Calculate the sum of digits of N\n    digit_sum = sum(int(digit) for digit in str(N))\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_representation = bin(digit_sum)[2:]\n    \n    return binary_representation"}
{"idx": 85, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 1 and lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"idx": 86, "completion": "words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "coordinates = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                coordinates.append((i, j))\n    # Sort by rows in ascending order\n    coordinates.sort(key=lambda coord: coord[0])\n    # Sort by columns in descending order for each row\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates"}
{"idx": 88, "completion": "if not array:\n        return array\n    \n    sum_first_last = array[0] + array[-1]\n    sorted_array = sorted(array)\n    \n    if sum_first_last % 2 == 0:\n        return sorted_array[::-1]\n    else:\n        return sorted_array"}
{"idx": 89, "completion": "encrypted = ''\n    for char in s:\n        # Get the ASCII value of the character\n        ascii_val = ord(char)\n        # Shift the ASCII value down by 2 * 2 = 4 places\n        new_ascii_val = ascii_val + 4\n        # If the new ASCII value exceeds 'z', wrap around to the beginning of the alphabet\n        if new_ascii_val > ord('z'):\n            new_ascii_val -= 26\n        # Convert the new ASCII value back to a character and add it to the encrypted string\n        encrypted += chr(new_ascii_val)\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    next_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            next_smallest = smallest\n            smallest = num\n        elif num < next_smallest and num != smallest:\n            next_smallest = num\n    \n    return next_smallest if next_smallest != float('inf') else None"}
{"idx": 91, "completion": "sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "# Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one of the numbers is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"idx": 93, "completion": "vowels = \"aeiou\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                # Find the index of the vowel in the vowels string\n                index = vowels.find(char.lower())\n                # Replace with the letter 2 places ahead in the alphabet\n                new_char = chr(((ord(char.lower()) - ord('a') + 2) % 26) + ord('a'))\n                # Swap the case\n                if char.isupper():\n                    encoded_message += new_char.upper()\n                else:\n                    encoded_message += new_char\n            else:\n                # Swap the case\n                if char.isupper():\n                    encoded_message += char.lower()\n                else:\n                    encoded_message += char.upper()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    if largest_prime == -1:\n        return 0\n\n    sum_of_digits = sum(int(digit) for digit in str(largest_prime))\n    return sum_of_digits"}
{"idx": 95, "completion": "if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if not all(isinstance(key, str) for key in keys):\n        return False\n    \n    if all(key.islower() for key in keys):\n        return True\n    elif all(key.isupper() for key in keys):\n        return True\n    else:\n        return False"}
{"idx": 96, "completion": "if n <= 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b"}
{"idx": 98, "completion": "count = 0\n    vowels = set(\"AEIOU\")\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "number = float(value)\n    if number % 1 == 0.5:\n        if number > 0:\n            return int(number) + 1\n        else:\n            return int(number) - 1\n    else:\n        return round(number)"}
{"idx": 100, "completion": "stones = []\n    current_level = n\n    while len(stones) < n:\n        stones.append(current_level)\n        if current_level % 2 == 0:\n            current_level += 1\n        else:\n            current_level += 2\n    return stones"}
{"idx": 101, "completion": "# Split the string by both commas and spaces\n    words = s.replace(',', ' ').split()\n    return words"}
{"idx": 102, "completion": "# Ensure x is less than or equal to y\n    if x > y:\n        x, y = y, x\n\n    # Iterate from y down to x to find the largest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)"}
{"idx": 104, "completion": "def has_even_digit(number):\n        while number > 0:\n            digit = number % 10\n            if digit % 2 == 0:\n                return True\n            number = number // 10\n        return False\n\n    result = [num for num in x if not has_even_digit(num)]\n    result.sort()\n    return result"}
{"idx": 105, "completion": "# Filter out numbers that are not between 1 and 9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered numbers\n    sorted_arr = sorted(filtered_arr)\n    \n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n    \n    # Map each number to its corresponding name\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Replace each number with its name\n    result = [number_names[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            # Calculate factorial of i\n            factorial = 1\n            for j in range(1, i+1):\n                factorial *= j\n            result.append(factorial)\n        else:\n            # Calculate sum of numbers from 1 to i\n            total = sum(range(1, i+1))\n            result.append(total)\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "count = 0\n    for num in arr:\n        if num < 0:\n            num = -num\n        sum_digits = sum(int(digit) for digit in str(num))\n        if sum_digits > 0:\n            count += 1\n    return count"}
{"idx": 109, "completion": "if not arr:\n        return True\n\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    arr_indices = {num: idx for idx, num in enumerate(arr)}\n\n    for i in range(n):\n        if sorted_arr[i] not in arr_indices:\n            return False\n        original_index = arr_indices[sorted_arr[i]]\n        if (original_index - i) % n != 0:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Count the number of odd numbers in lst1\n    odd_count_lst1 = sum(1 for x in lst1 if x % 2 != 0)\n    \n    # If lst1 already contains only even numbers, return \"YES\"\n    if odd_count_lst1 == 0:\n        return \"YES\"\n    \n    # Count the number of even numbers in lst2\n    even_count_lst2 = sum(1 for x in lst2 if x % 2 == 0)\n    \n    # If there are enough even numbers in lst2 to replace all odd numbers in lst1, return \"YES\"\n    if even_count_lst2 >= odd_count_lst1:\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 111, "completion": "# Split the string into a list of words\n    words = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Iterate over each letter in the word\n        for letter in word:\n            # If the letter is already in the dictionary, increment its count\n            if letter in letter_counts:\n                letter_counts[letter] += 1\n            # Otherwise, add the letter to the dictionary with a count of 1\n            else:\n                letter_counts[letter] = 1\n    \n    # If the dictionary is empty, return it\n    if not letter_counts:\n        return letter_counts\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    max_letters = {}\n    \n    # Iterate over each letter in the dictionary\n    for letter in letter_counts:\n        # If the letter has the maximum count, add it to the new dictionary\n        if letter_counts[letter] == max_count:\n            max_letters[letter] = max_count\n    \n    return max_letters"}
{"idx": 112, "completion": "# Step 1: Remove characters in s that are in c\n    result_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the result string is a palindrome\n    is_palindrome = result_string == result_string[::-1]\n    \n    return (result_string, is_palindrome)"}
{"idx": 113, "completion": "result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n\n    return min_sum"}
{"idx": 115, "completion": "total_buckets = 0\n    for row in grid:\n        water_units = row.count(1)\n        if water_units > 0:\n            total_buckets += math.ceil(water_units / capacity)\n    return total_buckets"}
{"idx": 116, "completion": "# Your code here\n    pass"}
{"idx": 117, "completion": "# Define a list of vowels for easy checking\n    vowels = set(\"aeiouAEIOU\")\n    \n    # Split the string into words\n    words = s.split()\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Iterate over each word in the list\n    for word in words:\n        # Count the number of consonants in the current word\n        consonant_count = sum(1 for char in word if char not in vowels and char.isalpha())\n        \n        # If the consonant count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n    \n    return result"}
{"idx": 118, "completion": "vowels = set(\"aeiouAEIOU\")\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n    word_length = len(word)\n    \n    for i in range(word_length - 1, 0, -1):\n        if word[i] in vowels:\n            # Check if the character before and after the current vowel are consonants\n            if i > 0 and i < word_length - 1:\n                if word[i - 1] in consonants and word[i + 1] in consonants:\n                    return word[i]\n    return \"\""}
{"idx": 119, "completion": "def is_good(s):\n        balance = 0\n        for char in s:\n            if char == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                return False\n        return balance == 0\n\n    s1, s2 = lst\n    if is_good(s1 + s2) or is_good(s2 + s1):\n        return 'Yes'\n    return 'No'"}
{"idx": 120, "completion": "# Sort the array in ascending order\n    sorted_arr = sorted(arr)\n    \n    # Take the last k elements which are the largest\n    max_k = sorted_arr[-k:]\n    \n    return max_k"}
{"idx": 121, "completion": "total = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 != 0:\n            total += lst[i]\n    return total"}
{"idx": 122, "completion": "# Initialize sum to 0\n    total_sum = 0\n\n    # Iterate over the first k elements of the array\n    for i in range(min(k, len(arr))):\n        # Check if the current element has at most two digits\n        if arr[i] < 100 and arr[i] > -100:\n            # Add the element to the sum\n            total_sum += arr[i]\n\n    return total_sum"}
{"idx": 123, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    \n    collatz_sequence = []\n    while n != 1:\n        collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1)\n    \n    odd_numbers = sorted([x for x in collatz_sequence if x % 2 != 0])\n    return odd_numbers"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n    \n    # Check if the date format is mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    \n    # Split the date into month, day, and year\n    try:\n        month = int(date[:2])\n        day = int(date[3:5])\n        year = int(date[6:])\n    except ValueError:\n        return False\n    \n    # Check if the month is between 1 and 12\n    if month < 1 or month > 12:\n        return False\n    \n    # Define the number of days in each month\n    days_in_month = {\n        1: 31, 2: 29, 3: 31, 4: 30, 5: 31, 6: 30,\n        7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31\n    }\n    \n    # Check if the day is within the valid range for the given month\n    if day < 1 or day > days_in_month[month]:\n        return False\n    \n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower():\n                if ord(char) % 2 != 0:\n                    odd_count += 1\n        return odd_count"}
{"idx": 126, "completion": "if len(lst) == 1:\n        return True\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# Extract the start and end points of both intervals\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Find the intersection of the two intervals\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    # Check if the intervals intersect\n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n    \n    # Check if the length is a prime number\n    if intersection_length < 2:\n        return \"NO\"\n    for i in range(2, int(intersection_length**0.5) + 1):\n        if intersection_length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        product_of_signs *= sign\n        sum_of_magnitudes += abs(num)\n\n    return product_of_signs * sum_of_magnitudes"}
{"idx": 129, "completion": "def find_min_path(grid, k, start_row, start_col):\n        n = len(grid)\n        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        min_path = None\n\n        def dfs(row, col, path, steps):\n            nonlocal min_path\n            if steps == k:\n                if min_path is None or path < min_path:\n                    min_path = path.copy()\n                return\n            for dr, dc in directions:\n                nr, nc = row + dr, col + dc\n                if 0 <= nr < n and 0 <= nc < n:\n                    path.append(grid[nr][nc])\n                    dfs(nr, nc, path, steps + 1)\n                    path.pop()\n\n        dfs(start_row, start_col, [grid[start_row][start_col]], 1)\n        return min_path\n\n    n = len(grid)\n    min_path = None\n\n    for i in range(n):\n        for j in range(n):\n            current_path = find_min_path(grid, k, i, j)\n            if min_path is None or (current_path is not None and current_path < min_path):\n                min_path = current_path\n\n    return min_path"}
{"idx": 130, "completion": "if n < 0:\n        return []\n    \n    tribonacci = [1]\n    if n == 0:\n        return tribonacci\n    \n    tribonacci.append(3)\n    if n == 1:\n        return tribonacci\n    \n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i + 1])\n    \n    return tribonacci"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for bracket in string:\n        if bracket == '[':\n            stack.append(bracket)\n        elif bracket == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return False"}
{"idx": 133, "completion": "# Round each element to the upper int (Ceiling)\n    rounded_lst = [math.ceil(x) for x in lst]\n    \n    # Calculate the sum of squared numbers\n    sum_of_squares = sum(x**2 for x in rounded_lst)\n    \n    return sum_of_squares"}
{"idx": 134, "completion": "if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha():\n        if len(txt) == 1:\n            return True\n        second_last_char = txt[-2]\n        if second_last_char == ' ':\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Initialize variables to store the largest negative and smallest positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through the list to find the largest negative and smallest positive integers\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Replace commas with dots for string representations of numbers\n    if isinstance(a, str):\n        a = a.replace(',', '.')\n    if isinstance(b, str):\n        b = b.replace(',', '.')\n    \n    # Convert to float for comparison\n    try:\n        a_val = float(a)\n        b_val = float(b)\n    except ValueError:\n        return None\n    \n    # Compare the values\n    if a_val > b_val:\n        return a\n    elif b_val > a_val:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "if n < 8:\n        return False\n    if n % 2 == 0:\n        return True\n    return False"}
{"idx": 139, "completion": "factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    special_factorial = 1\n    for i in range(1, n+1):\n        special_factorial *= factorial\n        factorial //= i\n    return special_factorial"}
{"idx": 140, "completion": "# Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Find all sequences of more than 2 underscores\n    import re\n    pattern = re.compile(r\"_{3,}\")\n    \n    # Replace each sequence with a single '-'\n    def replace_multiple_underscores(match):\n        return \"-\"\n    \n    text = pattern.sub(replace_multiple_underscores, text)\n    \n    return text"}
{"idx": 141, "completion": "# Split the file name into the name and extension\n    name, ext = file_name.split('.')\n    \n    # Check if the name starts with a letter from the latin alphabet\n    if not name[0].isalpha():\n        return 'No'\n    \n    # Check if there are not more than three digits in the name\n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    # Check if the extension is one of the allowed ones\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'"}
{"idx": 142, "completion": "# Iterate over the list using enumerate to access both index and value\n    for index, value in enumerate(lst):\n        # Check if the index is a multiple of 3\n        if index % 3 == 0:\n            lst[index] = value ** 2\n        # Check if the index is a multiple of 4 but not a multiple of 3\n        elif index % 4 == 0 and index % 3 != 0:\n            lst[index] = value ** 3\n    \n    # Return the sum of all entries in the modified list\n    return sum(lst)"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Split the input strings into numerator and denominator\n    x_num, x_den = x.split('/')\n    n_num, n_den = n.split('/')\n    \n    # Convert the numerator and denominator to integers\n    x_num = int(x_num)\n    x_den = int(x_den)\n    n_num = int(n_num)\n    n_den = int(n_den)\n    \n    # Calculate the numerator and denominator of the product\n    product_num = x_num * n_num\n    product_den = x_den * n_den\n    \n    # Check if the product is a whole number\n    return product_num % product_den == 0"}
{"idx": 145, "completion": "def digit_sum(n):\n        return sum(int(d) for d in str(abs(n)))\n\n    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            if int(num_str[0]) % 2 != 0 and int(num_str[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start+1:end])"}
{"idx": 149, "completion": "# Delete strings with odd lengths\n    lst = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length ascending, then alphabetically\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "max_strength = None\n    strongest_extension = None\n    \n    for extension in extensions:\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n        \n        if (max_strength is None) or (strength > max_strength):\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[-1] + b[:-1]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    num = abs(num)\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num = num // 10\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the Roman numeral symbols and their corresponding values\n    roman_numerals = [\n        (\"M\", 1000),\n        (\"CM\", 900),\n        (\"D\", 500),\n        (\"CD\", 400),\n        (\"C\", 100),\n        (\"XC\", 90),\n        (\"L\", 50),\n        (\"XL\", 40),\n        (\"X\", 10),\n        (\"IX\", 9),\n        (\"V\", 5),\n        (\"IV\", 4),\n        (\"I\", 1),\n    ]\n\n    # Initialize an empty string to build the Roman numeral\n    roman_numeral = \"\"\n\n    # Iterate through the Roman numeral symbols and their values\n    for symbol, value in roman_numerals:\n        # While the number is greater than or equal to the current value\n        while number >= value:\n            # Append the corresponding symbol to the Roman numeral string\n            roman_numeral += symbol\n            # Subtract the value from the number\n            number -= value\n\n    # Convert the Roman numeral string to lowercase\n    return roman_numeral.lower()"}
{"idx": 157, "completion": "# The sides of a right-angled triangle satisfy the Pythagorean theorem:\n    # a^2 + b^2 = c^2, where c is the length of the hypotenuse (the longest side).\n    \n    # First, identify the longest side (hypotenuse).\n    sides = [a, b, c]\n    hypotenuse = max(sides)\n    \n    # Remove the hypotenuse from the list of sides.\n    sides.remove(hypotenuse)\n    \n    # Now, check if the Pythagorean theorem holds.\n    if sides[0]**2 + sides[1]**2 == hypotenuse**2:\n        return True\n    else:\n        return False"}
{"idx": 158, "completion": "max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique:\n            max_unique = unique_chars\n            max_word = word\n        elif unique_chars == max_unique:\n            if word < max_word:\n                max_word = word\n    return max_word"}
{"idx": 159, "completion": "# Write your code below this line\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(remaining - need, 0)\n    return [total_eaten, carrots_left]"}
{"idx": 160, "completion": "expression = f\"{operand[0]}\"\n    for i in range(1, len(operand)):\n        expression += f\" {operator[i-1]} {operand[i]}\"\n    return eval(expression)"}
{"idx": 161, "completion": "if not any(c.isalpha() for c in s):\n        return s[::-1]\n    result = \"\"\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"idx": 162, "completion": "if text == \"\":\n        return None\n    import hashlib\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Determine the range of numbers to consider\n    start = min(a, b)\n    end = max(a, b)\n    \n    # Initialize an empty list to store the even digits\n    even_digits = []\n    \n    # Iterate through the range and check each digit\n    for number in range(start, end + 1):\n        # Convert the number to a string to easily access each digit\n        digits = str(number)\n        # Check if all digits in the number are even\n        if all(int(digit) % 2 == 0 for digit in digits):\n            even_digits.append(number)\n    \n    return even_digits"}
