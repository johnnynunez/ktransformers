{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "pass"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_list.append(paren)\n        elif paren == ')':\n            paren_list.pop()\n        paren_list.append(paren)\n        if len(paren_list) > 1:\n            paren_list.pop()\n        if len(paren_list) == 1:\n            paren_list.pop()\n            paren_list.append(1)\n        elif len(paren_list) > 1:\n            paren_list.pop()\n            paren_list.pop()\n            paren_list.append(len(paren_list))\n    return paren_list"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return (sum, product)"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n\n    return string + string[i-1::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"idx": 13, "completion": "while b:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)"}
{"idx": 19, "completion": "# Convert the string to a list of numbers\n    number_list = numbers.split()\n    # Sort the list of numbers\n    number_list.sort()\n    # Join the sorted list of numbers back into a string\n    sorted_numbers = ' '.join(number_list)\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest[0] - closest[1]):\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i = i + 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0, \"find_zero only takes list xs having even number of coefficients\"\n    assert max(xs) > 0, \"find_zero only takes list xs having largest non zero coefficient\"\n    # find a zero point of polynomial using bisection method\n    # first, find a range where there is a zero point\n    left, right = -100, 100\n    while poly(xs, left) * poly(xs, right) > 0:\n        left *= 2\n        right *= 2\n    # then, find a zero point using bisection method\n    while right - left > 1e-10:\n        mid = (left + right) / 2\n        if poly(xs, mid) == 0:\n            return mid\n        elif poly(xs, mid) * poly(xs, left) < 0:\n            right = mid\n        else:\n            left = mid\n    return (left + right) / 2"}
{"idx": 33, "completion": "return [sorted(l[2::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    fib_index = 0\n    while True:\n        fib_index += 1\n        a, b = b, a + b\n        if is_prime(b):\n            n -= 1\n            if n == 0:\n                return b"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "assert 2 <= base <= 10\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Start from the largest possible factor and work downwards\n    for factor in range(int(n**0.5), 1, -1):\n        if n % factor == 0 and is_prime(factor):\n            return factor"}
{"idx": 60, "completion": "return sum(range(1, n + 1))"}
{"idx": 61, "completion": "counter = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            counter += 1\n        elif bracket == \")\":\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n\n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]  # Reverse the string\n\n    # Perform the circular shift\n    shift %= num_digits  # In case shift is larger than the number of digits\n    shifted_digits = digits[-shift:] + digits[:-shift]\n    return shifted_digits"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into words and filter out the numbers and the word \"apples\"\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mango fruits\n    mango_fruits = n - sum(numbers)\n    return mango_fruits"}
{"idx": 68, "completion": "# Your code goes here\n    smallest_even = None\n    smallest_index = None\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n            if smallest_even is None or num < smallest_even:\n                smallest_even = num\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]"}
{"idx": 69, "completion": "# Your code here\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            result = max(result, num)\n    return result"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    lst.sort()\n\n    # Initialize an empty list to store the strange sorted list\n    strange_sorted_list = []\n\n    # Initialize a variable to keep track of whether to take minimum or maximum\n    take_min = True\n\n    # Iterate through the list\n    while lst:\n        # If taking minimum, append the minimum value to the strange sorted list\n        if take_min:\n            strange_sorted_list.append(lst.pop(0))\n        # If taking maximum, append the maximum value to the strange sorted list\n        else:\n            strange_sorted_list.append(lst.pop())\n        # Toggle the value of take_min\n        take_min = not take_min\n\n    return strange_sorted_list"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    if n == 0:\n        return False\n    if n == 1:\n        return False\n    if n == -1:\n        return x == -1\n    if n < 0:\n        n = -n\n        x = -x\n    if x < 0:\n        return False\n    if x == 0:\n        return n == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"idx": 77, "completion": "return a**(1./3.) == round(a**(1./3.))"}
{"idx": 78, "completion": "# Your code here\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is in the set of prime digits, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "return [letter_grade(gpa) for gpa in grades]"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the formula\n    return 2 * (10 ** (n - 1)) - 10**(n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and then to string\n    binary_str = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each character in the binary string\n    for digit in binary_str:\n        # Convert the character back to integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum to binary and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if e % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "return ' '.join([''.join(sorted(word)) for word in s.split(' ')])"}
{"idx": 87, "completion": "return sorted(\n        [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x],\n        key=lambda x: (x[0], -x[1]),\n    )"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    sum_ = first + last\n    if sum_ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst_sorted = sorted(set(lst))\n    if len(lst_sorted) < 2:\n        return None\n    return lst_sorted[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n\n    for sentence in sentences:\n        # Trim leading and trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count"}
{"idx": 92, "completion": "#your code here\n    return (x + y == z or x + z == y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int)"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return math.ceil(value - 0.5)\n    else:\n        return math.floor(value + 0.5)"}
{"idx": 100, "completion": "stones = [n]\n    for i in range(1, n):\n        if stones[i-1] % 2 == 0:\n            stones.append(stones[i-1] + 2)\n        else:\n            stones.append(stones[i-1] + 2)\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "# Mapping of numbers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map to names\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [num_to_name[num] for num in filtered_sorted_reversed]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for num in arr if sum(int(digit) for digit in str(abs(num))) > 0)"}
{"idx": 109, "completion": "# check if the array is empty\n    if len(arr) == 0:\n        return True\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    # check if the array can be sorted by one right shift\n    if arr == sorted(arr[1:] + arr[:1]):\n        return True\n    # check if the array can be sorted by two right shifts\n    if arr == sorted(arr[2:] + arr[:2]):\n        return True\n    # if none of the above conditions are met, return False\n    return False"}
{"idx": 110, "completion": "# Your implementation goes here\n    pass"}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    # Iterate over the items in the original dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the result dictionary\n        if count == max_count:\n            result[letter] = count\n    # Return the result dictionary\n    return result"}
{"idx": 112, "completion": "for i in c:\n        s=s.replace(i,'')\n    return (s, s == s[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s,s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "wells = 0\n    for well in grid:\n        wells += math.ceil(sum(well) / capacity)\n    return wells"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Your code goes here\n    pass"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    found = ''\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            found = word[i]\n            break\n    return found"}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n        if open_parens == close_parens:\n            return 'Yes'\n        open_parens = 0\n        close_parens = 0\n    return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 10 <= x <= 99)"}
{"idx": 123, "completion": "if n == 1:\n        return [1]\n    sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(set(sequence))"}
{"idx": 124, "completion": "#your code here\n    pass"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)"}
{"idx": 126, "completion": "return sorted(set(lst)) == sorted(lst) and len(set(lst)) == len(lst)"}
{"idx": 127, "completion": "if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        length = min(interval1[1], interval2[1]) - max(interval1[0], interval2[0]) + 1\n        return \"YES\" if is_prime(length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        elif num < 0:\n            product_of_signs *= -1\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product_of_signs"}
{"idx": 129, "completion": "N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = set()\n    min_path = [float('inf')] * k\n\n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if path < min_path:\n                min_path = path.copy()\n            return\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                dfs(nx, ny, path + [grid[nx][ny]])\n                visited.remove((nx, ny))\n\n    for i in range(N):\n        for j in range(N):\n            visited.add((i, j))\n            dfs(i, j, [grid[i][j]])\n            visited.remove((i, j))\n\n    return min_path"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd_digit = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd_digit = True\n            product *= digit\n        n //= 10\n    return product if has_odd_digit else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        elif char == ']' and not stack:\n            return False\n    # If the stack is not empty, it means there is at least one nested bracket\n    return bool(stack)"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return largest_negative, smallest_positive"}
{"idx": 137, "completion": "# Convert strings to float for comparison\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the numbers\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If the number is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10 and isOddFirstLastDigit(num):\n            count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return planets[planet1_index+1:planet2_index]"}
{"idx": 149, "completion": "# Your implementation goes here\n    pass"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "result = []\n    for i in range(len(game)):\n        result.append(abs(game[i] - guess[i]))\n    return result"}
{"idx": 153, "completion": "strongest_extension = ''\n    max_strength = -float('inf')\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(1,len(b)):\n            b = b[1:]+b[0]\n            if b in a:\n                return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to Roman numerals\n    roman_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_num = \"\"\n    for value, symbol in roman_map:\n        while number >= value:\n            roman_num += symbol\n            number -= value\n    return roman_num"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the sum of squares of two smaller sides equals the square of the largest side\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"idx": 158, "completion": "return max(words, key=lambda x: len(set(x)))"}
{"idx": 159, "completion": "# Your code here\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    return result"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the loop\n    if a > b:\n        a, b = b, a\n\n    # Collect even digits\n    even_digits = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n\n    # Remove duplicates and sort\n    even_digits = sorted(set(even_digits))\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n            current_group += char\n        elif char == ')':\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                paren_groups.append(current_group)\n                current_group = ''\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError(\"Input list is empty\")\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for index, number in enumerate(numbers):\n        result.append(number)\n        if index < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "return [max(map(len, paren.split(')('))) for paren in paren_string.split()]  # type: ignore"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if not string:\n        return ''\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i-1::-1]\n    return string + string[::-1]  # Fallback"}
{"idx": 11, "completion": "# Convert the input strings to integers, perform XOR, and convert back to string\n    xor_result = str(int(a, 2) ^ int(b, 2))\n    return xor_result"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]"}
{"idx": 18, "completion": "count = 0\n    index = 0\n    while index != -1:\n        index = string.find(substring, index)\n        if index != -1:\n            count += 1\n            index += 1\n    return count"}
{"idx": 19, "completion": "# Convert the string to a list of numbers\n    number_list = numbers.split()\n    # Convert the numbers to integers\n    number_list = [int(number) for number in number_list]\n    # Sort the list\n    number_list.sort()\n    # Convert the list back to a string\n    number_list = [str(number) for number in number_list]\n    # Join the list into a string\n    number_list = ' '.join(number_list)\n    return number_list"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    result = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i + 1])\n    return result"}
{"idx": 21, "completion": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "if n <= 1:\n        return []\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    output = []\n    for number in numbers:\n        if number not in seen:\n            output.append(number)\n            seen.add(number)\n    return output"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have largest non zero coefficient as its last element\")\n    a = 1\n    b = 1\n    c = xs[-1]\n    while True:\n        d = b * b - 4 * a * c\n        if d >= 0:\n            sqrt_d = math.sqrt(d)\n            if d == 0:\n                return -b / (2 * a)\n            elif b > 0:\n                return (-b + sqrt_d) / (2 * a)\n            else:\n                return (-b - sqrt_d) / (2 * a)\n        else:\n            raise ValueError(\"xs must have largest non zero coefficient as its last element\")"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even.sort()\n    l_prime = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even[even_index])\n            even_index += 1\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fibs = [2, 3]\n    i = 3\n    while len(fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            yield next_fib"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 1:\n        return sorted_list[n // 2]\n    else:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# Start from the smallest prime factor\n    factor = 2\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n    # When the loop ends, n is the largest prime factor\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "# Your code goes here (try to solve it without using regular expressions)\n    vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    l = len(s)\n    if shift >= l:\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts using ' and ' as the delimiter\n    parts = s.split(' and ')\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the parts to extract the number of apples and oranges\n    for part in parts:\n        # Check if the part contains 'apples'\n        if 'apples' in part:\n            # Extract the number of apples\n            apples = int(part.split(' apples')[0])\n        # Check if the part contains 'oranges'\n        if 'oranges' in part:\n            # Extract the number of oranges\n            oranges = int(part.split(' oranges')[0])\n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    # Return the number of mango fruits\n    return mango"}
{"idx": 68, "completion": "# your code here\n    smallest_even = float('inf')\n    smallest_index = -1\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n    if smallest_index == -1:\n        return []\n    return [smallest_even, smallest_index]"}
{"idx": 69, "completion": "# Your code here\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # Find the greatest number that satisfies the condition\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    # Return -1 if no such number exists\n    return -1"}
{"idx": 70, "completion": "sorted_list = sorted(lst)\n    result = []\n    while sorted_list:\n        result.append(sorted_list.pop(0))  # append minimum\n        if sorted_list:\n            result.append(sorted_list.pop(-1))  # append maximum\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1/3) == round(a**(1/3))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for the prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime hex digit, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime hex digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2"}
{"idx": 81, "completion": "return [letter_grade(gpa) for gpa in grades]"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the reasoning process\n    return 2 * 10**(n - 1) - 10**(n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and then sum the digits\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    # Convert the sum back to binary and return\n    return bin(binary_sum)[2:]"}
{"idx": 85, "completion": "return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "# Split the string into words\n    words = s.split()\n    # Sort the characters in each word\n    sorted_words = [''.join(sorted(word)) for word in words]\n    # Join the sorted words back into a string\n    return ' '.join(sorted_words)"}
{"idx": 87, "completion": "# Your code here\n    pass"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) + 4) % 26\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst_sorted = sorted(set(lst))\n    if len(lst_sorted) < 2:\n        return None\n    return lst_sorted[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n\n    for sentence in sentences:\n        # Remove leading and trailing whitespace\n        sentence = sentence.strip()\n\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count"}
{"idx": 92, "completion": "return (x + y == z or x + z == y or y + z == x) and (type(x) == int and type(y) == int and type(z) == int)"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n        encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return math.ceil(value - 0.5)\n    else:\n        return math.floor(value + 0.5)"}
{"idx": 100, "completion": "stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any([int(digit) % 2 == 0 for digit in str(i)])])"}
{"idx": 105, "completion": "# Dictionary to map digits to their corresponding names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map the array\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Map the filtered, sorted, reversed array to their names\n    result = [digit_names[x] for x in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return len([x for x in arr if sum(int(d) for d in str(abs(x))) > 0])"}
{"idx": 109, "completion": "# Your code here\n    if len(arr) == 0:\n        return True\n    for i in range(len(arr)):\n        arr = arr[-1:] + arr[:-1]\n        if arr == sorted(arr):\n            return True\n    return False"}
{"idx": 110, "completion": "# Your implementation here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) or any(x % 2 == 0 for x in lst2) else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    test = test.split()\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over the list of characters\n    for char in test:\n        # If the character is already in the dictionary, increment its count\n        if char in letter_counts:\n            letter_counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            letter_counts[char] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    # Iterate over the items in the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the result dictionary\n        if count == max_count:\n            result[letter] = count\n    # Return the result dictionary\n    return result"}
{"idx": 112, "completion": "for i in c:\n        s=s.replace(i,'')\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'), s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'), s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'), s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code goes here\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Your code here\n    pass"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    found = ''\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            found = word[i]\n            break\n    return found"}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 10 <= x <= 99)"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1, which is odd.\n    return sorted(set(sequence))  # Remove duplicates and sort"}
{"idx": 124, "completion": "# Regex to check valid date format\n    regex = r\"^(0[1-9]|1[012])-([0-2][0-9]|3[01])-([0-9]{4})$\"\n    # Compile the ReGex\n    p = re.compile(regex)\n    # If the string is empty\n    if date == \"\":\n        return False\n    # If the string matches the ReGex\n    if re.search(p, date):\n        # Split the date string\n        date = date.split('-')\n        # Check the number of days\n        if int(date[1]) in [1,3,5,7,8,10,12]:\n            if int(date[0]) > 0 and int(date[0]) < 32:\n                return True\n        elif int(date[1]) in [4,6,9,11]:\n            if int(date[0]) > 0 and int(date[0]) < 31:\n                return True\n        elif int(date[1]) == 2:\n            if int(date[0]) > 0 and int(date[0]) < 30:\n                return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 125, "completion": "# your code here\n    if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split(' ')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"idx": 126, "completion": "return sorted(list(set(lst))) == sorted(lst)"}
{"idx": 127, "completion": "# your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start\n        return \"YES\" if is_prime(length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    # Calculate the product of signs\n    sign_product = 1\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        elif num < 0:\n            sign_product *= -1\n\n    # Calculate the sum of magnitudes\n    magnitude_sum = sum(abs(num) for num in arr)\n\n    # Return the product of sign_product and magnitude_sum\n    return sign_product * magnitude_sum"}
{"idx": 129, "completion": "N = len(grid)\n    # Initialize the priority queue with the first cell\n    pq = [(grid[0][0], 0, 0)]\n    # Initialize the visited set with the first cell\n    visited = set([(0, 0)])\n    # Initialize the result list with the first cell\n    result = [grid[0][0]]\n    # Initialize the depth counter\n    depth = 1\n    # Initialize the directions list\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    # Initialize the target depth\n    target_depth = k\n    # Initialize the target cell\n    target_cell = None\n    # Initialize the target value\n    target_value = None\n    # Initialize the target index\n    target_index = None\n    # Initialize the target result\n    target_result = None\n    # Initialize the target visited\n    target_visited = None\n    # Initialize the target pq\n    target_pq = None\n    # Initialize the target directions\n    target_directions = None\n    # Initialize the target depth counter\n    target_depth_counter = None\n    # Initialize the target target depth\n    target_target_depth = None\n    # Initialize the target target cell\n    target_target_cell = None\n    # Initialize the target target value\n    target_target_value = None\n    # Initialize the target target index\n    target_target_index = None\n    # Initialize the target target result\n    target_target_result = None\n    # Initialize the target target visited\n    target_target_visited = None\n    # Initialize the target target pq\n    target_target_pq = None\n    # Initialize the target target directions\n    target_target_directions = None\n    # Initialize the target target depth counter\n    target_target_depth_counter = None\n    # Initialize the target target target depth\n    target_target_target_depth = None\n    # Initialize the target target target cell\n    target_target_target_cell = None\n    # Initialize the target target target value\n    target_target_target_value = None\n    # Initialize the target target target index\n    target_target_target_index = None\n    # Initialize the target target target result\n    target_target_target_result = None\n    # Initialize the target target target visited\n    target_target_target_visited = None\n    # Initialize the target target target pq\n    target_target_target_pq = None\n    # Initialize the target target target directions"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd = True\n            product *= int(digit)\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # If there's any brackets left in the stack, it means there's a nested bracket\n    return bool(stack)"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the numbers\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is even and greater than or equal to the smallest possible sum of 4 even numbers (2+2+2+2=8)\n    return n % 2 == 0 and n >= 8"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "# Replace more than 2 consecutive spaces with -\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with underscores\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "return len([num for num in nums if num > 10 and isOdd(num)])"}
{"idx": 147, "completion": "# Initialize the count of valid triples to 0\n    count = 0\n    # Create an array a of length n\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    # Iterate over all possible triples (a[i], a[j], a[k]) where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    # If it is, increment the count\n                    count += 1\n    # Return the count of valid triples\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return tuple(planets[planet1_index + 1:planet2_index])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(i-j) for i,j in zip(game,guess)]\n    #return [abs(i-j) for i,j in zip(game,guess)]"}
{"idx": 153, "completion": "# your code here\n    return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if c.isupper()) - sum(1 for c in x if c.islower()))"}
{"idx": 154, "completion": "# your code here\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:]+b[0]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    result = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the square of the largest side is equal to the sum of squares of \n    # the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    start, end = sorted((a, b))\n    # Generate the list of even numbers in the range\n    even_digits = [i for i in range(start, end + 1) if i % 2 == 0]\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n            current_group += char\n        elif char == ')':\n            open_count -= 1\n            current_group += char\n            if open_count == 0:\n                paren_groups.append(current_group)\n                current_group = ''\n\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError('The list of numbers is empty')\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for index, number in enumerate(numbers):\n        result.append(number)\n        if index != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_list = paren_string.split()\n    result = []\n    for paren in paren_list:\n        max_depth = 0\n        current_depth = 0\n        for char in paren:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    else:\n        sum_ = 0\n        product = 1\n        for number in numbers:\n            sum_ += number\n            product *= number\n        return (sum_, product)"}
{"idx": 9, "completion": "result = []\n    max_so_far = numbers[0]\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n\n    return string + string[::-1]"}
{"idx": 11, "completion": "# Convert the strings to integers, perform XOR, and convert back to a string\n    return format(int(a, 2) ^ int(b, 2), 'b').zfill(len(a))"}
{"idx": 12, "completion": "if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if char == 'o' else 2 if char == 'o|' else 1 for char in music_string.split()]"}
{"idx": 18, "completion": "count = start = 0\n    while True:\n        start = string.find(substring, start) + 1\n        if start > 0:\n            count+=1\n        else:\n            return count"}
{"idx": 19, "completion": "return ' '.join(sorted(numbers.split(), key=lambda x: 'zero one two three four five six seven eight nine'.split().index(x)))"}
{"idx": 20, "completion": "numbers.sort()\n    closest = None\n    for i in range(len(numbers) - 1):\n        if closest is None or abs(numbers[i] - numbers[i + 1]) < closest[1] - closest[0]:\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "if n <= 1:\n        return []\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    a = 1\n    b = 1\n    c = xs[-1]\n    while True:\n        x = 0.5 * (-b + math.sqrt(b * b - 4 * a * c)) / a\n        if abs(poly(xs, x)) < 1e-6:\n            return x\n        a = 2 * a\n        b = 3 * b + a * x\n        c = x * x + b * x + c"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_list.sort()\n    l_prime = l[:]\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime[i] = even_list.pop(0)\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        fibs[0], fibs[1] = fibs[1], fibs[0] + fibs[1]\n        if is_prime(fibs[1]):\n            prime_fibs.append(fibs[1])\n    return prime_fibs[-1]"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set()\n    zeros = 0\n    for x in l:\n        if x == 0:\n            zeros += 1\n        if x != 0:\n            if -x in s:\n                return True\n            s.add(x)\n    if zeros > 1:\n        return True\n    return False"}
{"idx": 44, "completion": "assert 0 < base < 10\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(digit) for digit in digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# First, get the number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        # while i divides n, print i and divide n\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    # This condition is to handle the case when n is a prime number\n    # greater than 2\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s.lower().endswith('y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into words\n    words = s.split()\n    \n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Iterate over the words\n    for i in range(len(words)):\n        # Check if the word is \"apples\" or \"oranges\"\n        if words[i] == \"apples\":\n            # Convert the next word to an integer and add it to the count of apples\n            apples = int(words[i+1])\n        elif words[i] == \"oranges\":\n            # Convert the next word to an integer and add it to the count of oranges\n            oranges = int(words[i+1])\n    \n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    \n    # Return the result\n    return mango"}
{"idx": 68, "completion": "# Your code here\n    pass"}
{"idx": 69, "completion": "# Your code here\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in c.items():\n        if k > 0 and v >= k:\n            return k\n    return -1"}
{"idx": 70, "completion": "result = []\n    sorted_list = sorted(lst)\n    while sorted_list:\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    if n <= 0 or x <= 0:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"idx": 77, "completion": "return a**(1./3.) == int(a**(1./3.))"}
{"idx": 78, "completion": "# Your code here\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate through each character in the input string\n    for char in num:\n        # If the character is in the set of prime hex digits, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Define the grading scale\n    grading_scale = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (-1.0, 'E')\n    ]\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate through the list of GPAs\n    for gpa in grades:\n        # Find the corresponding letter grade for the GPA\n        for grade in grading_scale:\n            if gpa >= grade[0]:\n                letter_grades.append(grade[1])\n                break\n\n    return letter_grades"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the reasoning process\n    return 2 * 10**(n - 1) - 10**(n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and then sum the digits\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    # Convert the sum back to binary and return\n    return bin(binary_sum)[2:]"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            is_upper = char.isupper()\n            char = char.lower()\n            index = alphabet.find(char)\n            new_index = (index + (2 * 2)) % 26\n            new_char = alphabet[new_index]\n            if is_upper:\n                new_char = new_char.upper()\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst_sorted = sorted(set(lst))\n    if len(lst_sorted) < 2:\n        return None\n    return lst_sorted[1]"}
{"idx": 91, "completion": "return len(re.findall(r\"(?<=^I)\\w+\", S, re.MULTILINE))"}
{"idx": 92, "completion": "#your code here\n    if x + y == z and type(x) == int and type(y) == int and type(z) == int:\n        return True\n    elif x + z == y and type(x) == int and type(y) == int and type(z) == int:\n        return True\n    elif y + z == x and type(x) == int and type(y) == int and type(z) == int:\n        return True\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n        encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "# Initialize the list with the number of stones in the first level\n    pile = [n]\n    # Calculate the number of stones for each subsequent level\n    for i in range(1, n):\n        # Determine the next number based on the parity of the current level\n        next_stones = pile[i-1] + 2 * (pile[i-1] % 2)\n        pile.append(next_stones)\n    return pile"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[digit - 1] for digit in filtered_sorted]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for x in arr if sum(int(d) for d in str(abs(x))) > 0)"}
{"idx": 109, "completion": "# check if the array is empty\n    if len(arr) == 0:\n        return True\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    # check if the array can be sorted by performing right shift operation\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) or any(x % 2 == 0 for x in lst2) else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    \n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    max_count_letters = {}\n    \n    # Iterate over the dictionary of letter counts\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the new dictionary\n        if count == max_count:\n            max_count_letters[letter] = count\n    \n    # Return the new dictionary\n    return max_count_letters"}
{"idx": 112, "completion": "for i in c:\n        s=s.replace(i,'')\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')\n    ) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Write your code here.\n    # grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n    # capacity = 1\n    # grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n    # capacity = 2\n    # grid = [[0,0,0], [0,0,0]]\n    # capacity = 5\n    # grid = [[0,1,0,1,1,0,1], [1,1,0,1,1,0,0], [1,1,0,0,1,1,1], [1,1,1,1,0,0,0], [1,1,1,1,1,1,1]]\n    # capacity = 3\n    # grid = [[0,0,0,0,0,0,0], [0,0,0,0,0,0,0]]\n    # capacity = 1\n    # grid = [[0,0,1,1,0,0,1], [0,0,1,1,0,0,0], [0,0,0,0,1,1,1], [0,0,0,0,1,1,1], [0,0,1,0,0,0,0], [0,0,0,1,1,1,1]]\n    # capacity = 3\n    # grid = [[0,0,0,0,0,1,1,0,1,0], [0,1,1,0,0,0,0,1,1,0], [0,0,1,0,0,1,1,1,0,1], [0,0,0,0,0,1,0,0,1,1], [0,0,0,0,0,1,1,1,0,1]]\n    # capacity = 3\n    # grid = [[0,0,0,0,0,0,0,0,0,0], [0,0,0,0,0,0,0,0,0,0], [0,0,"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Your code here\n    pass"}
{"idx": 118, "completion": "vowels = \"aeiouAEIOU\"\n    found = \"\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            found = word[i]\n            break\n    return found"}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n        if open_parens == close_parens:\n            return 'Yes'\n        open_parens = 0\n        close_parens = 0\n    return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum([x for i,x in enumerate(lst) if i%2==0 and x%2!=0])"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 10 <= x < 100)"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:  # Check if n is odd\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1  # Apply the Collatz function\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(set(sequence))  # Remove duplicates and sort"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)"}
{"idx": 126, "completion": "return sorted(set(lst)) == sorted(lst) and len(set(lst)) == len(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    start = max(start1, start2)\n    end = min(end1, end2)\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    magnitudes = [abs(num) for num in arr]\n    signs = [1 if num > 0 else -1 if num < 0 else 0 for num in arr]\n    return sum(magnitudes) * reduce(lambda x, y: x * y, signs)"}
{"idx": 129, "completion": "# Your code here\n    # Please add your code here.\n    pass"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for i in string:\n        if i == '[':\n            stack.append(i)\n        elif i == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # If there's any brackets left in the stack, it means there's a nested bracket\n    return len(stack) > 0"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == '':\n        return False\n    if txt[-1].isalpha() and txt[-1] != ' ':\n        return True\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n\n    return largest_negative, smallest_positive"}
{"idx": 137, "completion": "# Convert strings to floats for comparison\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the numbers\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is even and greater than or equal to the smallest sum of 4 even numbers (2+2+2+2=8)\n    return n >= 8 and n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Define a function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split(\"/\"))\n    n_numerator, n_denominator = map(int, n.split(\"/\"))\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    return result_numerator % result_denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index == -1 or planet2_index == -1:\n        return tuple()\n    else:\n        if planet1_index < planet2_index:\n            return tuple(planets[planet1_index+1:planet2_index])\n        else:\n            return tuple(planets[planet2_index+1:planet1_index])"}
{"idx": 149, "completion": "# Your implementation here"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    max_strength = -float('inf')\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# your code here\n    if len(b) > len(a):\n        return False\n    for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:] + b[0]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Mapping of integers to their roman numeral counterparts\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the sum of squares of two smaller sides equals the square of the largest side\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code goes here\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"idx": 160, "completion": "# Convert the operator list into a string of operators\n    operators = ''.join([op for op in operator])\n    # Convert the operand list into a string of operands\n    operands = [str(num) for num in operand]\n    # Combine the operators and operands into a single string\n    expression = operators.join(operands)\n    # Evaluate the expression and return the result\n    return eval(expression)"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return \"\".join(c.swapcase() if c.isalpha() else c for c in s)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the range function\n    start, end = sorted([a, b])\n    # Generate the range of numbers, filter for even numbers, and convert to a list\n    return [int(i) for i in str(range(start, end + 1)) if int(i) % 2 == 0]"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    depth = 0\n\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n            current_group += char\n        elif char == \")\":\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                paren_groups.append(current_group)\n                current_group = \"\"\n\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for index, number in enumerate(numbers):\n        result.append(number)\n        if index < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_string = paren_string.replace(' ', '')\n    max_depth = 0\n    max_depths = []\n    for char in paren_string:\n        if char == '(':\n            max_depth += 1\n        elif char == ')':\n            max_depth -= 1\n        max_depths.append(max_depth)\n    return max_depths"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Your code goes here\n    pass"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "# Convert the string of numbers into a list of integers\n    number_list = [int(num) for num in numbers.split()]\n\n    # Sort the list of integers\n    number_list.sort()\n\n    # Convert the list of integers back into a string\n    sorted_numbers = ' '.join(str(num) for num in number_list)\n\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest[0] - closest[1]):\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(n - min_num) / (max_num - min_num) for n in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"idx": 25, "completion": "if n == 1:\n        return []\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"Number of coefficients must be even.\")\n    if xs[-1] == 0:\n        raise ValueError(\"Largest coefficient must be non zero.\")\n\n    # find a zero point using bisection method\n    # we know that the polynomial has a zero point between -1 and 1\n    # because the largest coefficient is non zero and all other coefficients\n    # are smaller in absolute value\n    a = -1\n    b = 1\n    while abs(b - a) > 1e-10:\n        c = (a + b) / 2\n        if poly(xs, a) * poly(xs, c) < 0:\n            b = c\n        else:\n            a = c\n\n    return c"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = [2, 3]\n    i = 3\n    while len(fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            return next_fib\n    return None"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for n in l:\n        if -n in seen:\n            return True\n        seen.add(n)\n    return False"}
{"idx": 44, "completion": "return str(bin(x))[2:]"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n // 2 - 1] + l[n // 2]) / 2\n    else:\n        return l[n // 2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "counter = 0\n    for bracket in brackets:\n        if bracket == '<':\n            counter += 1\n        elif bracket == '>':\n            counter -= 1\n            if counter < 0:\n                return False\n    return counter == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "# First, get the number of 2s that divide n\n    while n % 2 == 0:\n        max_prime = 2\n        n >>= 1  # equivalent to n /= 2\n\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # while i divides n, print i and divide n\n        while n % i == 0:\n            max_prime = i\n            n = n / i\n\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return int(max_prime)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into words\n    words = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the words\n    for i in range(len(words)):\n        # If the word is 'apples', add the next word to the count of apples\n        if words[i] == 'apples':\n            apples = int(words[i+1])\n        # If the word is 'oranges', add the next word to the count of oranges\n        elif words[i] == 'oranges':\n            oranges = int(words[i+1])\n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    # Return the result\n    return mango"}
{"idx": 68, "completion": "return next(((e, i) for i, e in enumerate(arr) if e % 2 == 0), [])"}
{"idx": 69, "completion": "# Your code here\n    # Create a dictionary to store the frequency of each number\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    # Find the greatest number that meets the condition\n    for num in sorted(freq.keys(), reverse=True):\n        if num <= freq[num]:\n            return num\n    return -1"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_list = sorted(lst)\n    result = []\n\n    # Loop until the sorted list is empty\n    while sorted_list:\n        # Append the minimum value\n        result.append(sorted_list.pop(0))\n        if sorted_list:\n            # Append the maximum value\n            result.append(sorted_list.pop())\n\n    return result"}
{"idx": 71, "completion": "# Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    # Calculate the total number of characters in each list\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    total_chars_lst2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters in both lists\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    elif n == 1:\n        return False\n    elif n == 0:\n        return False\n    elif x < n:\n        return False\n    else:\n        while x > 1:\n            if x % n == 0:\n                x = x / n\n            else:\n                return False\n        return True"}
{"idx": 77, "completion": "return a**(1/3) == int(a**(1/3))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Your code goes here\n    pass"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the formula\n    return 2 * (10 ** (n - 1)) - 10**(n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and then to a string\n    binary_str = format(N, 'b')\n    # Split the string into a list of characters, convert each to an integer, sum them up, and convert back to binary\n    return format(sum(int(digit) for digit in binary_str), 'b')"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if e % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    sum_ = first + last\n    if sum_ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code goes here\n    return ''.join([chr(ord(c) + 4) if c.isalpha() else c for c in s])"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n\n    for sentence in sentences:\n        # Trim leading and trailing whitespace\n        sentence = sentence.strip()\n\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count"}
{"idx": 92, "completion": "if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n        encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return floor(value - 0.5)\n    else:\n        return ceil(value + 0.5)"}
{"idx": 100, "completion": "def next_odd(n):\n        return n + 2 if n % 2 == 1 else n + 1\n\n    def next_even(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    stones = [n]\n    for _ in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(next_even(stones[-1]))\n        else:\n            stones.append(next_odd(stones[-1]))\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if all(int(d) % 2 for d in str(i))])"}
{"idx": 105, "completion": "digit_names = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[num] for num in filtered_sorted_reversed]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            n = -n\n        return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"idx": 109, "completion": "# Sort the array and check if it is equal to the original array after\n    # performing a right shift operation\n    sorted_arr = sorted(arr)\n    if sorted_arr == arr[-1:] + arr[:-1]:\n        return True\n    else:\n        return False"}
{"idx": 110, "completion": "# Your code here\n    # You can use the following test cases to test your function\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]) => \"NO\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9]) => \"NO\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) => \"NO\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) => \"YES\"\n    # exchange([1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) => \"NO\"\n    # exchange([1,"}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    chars = list(test.split())\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over the characters in the list\n    for char in chars:\n        # If the character is already in the dictionary, increment its count\n        if char in letter_counts:\n            letter_counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            letter_counts[char] = 1\n    # Return the dictionary of letter counts\n    return letter_counts"}
{"idx": 112, "completion": "for i in c:\n        s=s.replace(i,'')\n    if s==s[::-1]:\n        return (s,True)\n    return (s,False)"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')\n    ) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code goes here\n    return sum([math.ceil(sum(row)/capacity) for row in grid])"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Your code here\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    result = []\n    word = \"\"\n    for char in s:\n        if char.isalpha():\n            if char in consonants:\n                word += char\n            elif char in vowels and word:\n                if len(word) == n:\n                    result.append(word)\n                word = \"\"\n        else:\n            if word and len(word) == n:\n                result.append(word)\n            word = \"\"\n    return result"}
{"idx": 118, "completion": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            open_parens += 1\n        else:\n            close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "# your code here\n    return sum(x for i, x in enumerate(lst) if x%2!=0 and i%2==0)"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if 10 <= x < 100])"}
{"idx": 123, "completion": "# Your code goes here\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    odd_numbers.append(1)  # The sequence always ends with 1, which is odd\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "date = date.split('-')\n    if len(date) != 3:\n        return False\n    try:\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n    except ValueError:\n        return False\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True"}
{"idx": 125, "completion": "# your code here\n    if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum([1 for i in txt if (ord(i) - 97) % 2 == 1])"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        elif lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if is_prime(length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    signs = 1\n    magnitude = 0\n    for num in arr:\n        if num == 0:\n            signs = 0\n            break\n        elif num > 0:\n            signs *= 1\n        else:\n            signs *= -1\n        magnitude += abs(num)\n    return magnitude * signs"}
{"idx": 129, "completion": "N = len(grid)\n    # Initialize the priority queue with all possible starting points\n    pq = [(grid[0][0], 0, 0)]\n    visited = set([(0, 0)])\n    # Initialize the result list with the starting point\n    result = [grid[0][0]]\n    # Initialize the count of visited cells\n    count = 1\n    # Initialize the current position\n    x, y = 0, 0\n    # Initialize the current path length\n    path_length = 1\n    # Initialize the current path\n    path = [grid[0][0]]\n    # Initialize the current path value\n    path_value = grid[0][0]\n    # Initialize the current path index\n    path_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index\n    path_value_index = 0\n    # Initialize the current path value index"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # If there's any brackets left in the stack, it means there's a nested bracket\n    return bool(stack)"}
{"idx": 133, "completion": "return round(sum([math.ceil(x)**2 for x in lst]))"}
{"idx": 134, "completion": "# your code here\n    if txt == \"\":\n        return False\n    elif txt[-1].isalpha() and txt[-1] != \" \":\n        return True\n    else:\n        return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return n % 2 == 0"}
{"idx": 139, "completion": "# Your code goes here\n    if n == 1:\n        return 1\n    else:\n        return n * special_factorial(n-1)"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10 and isOdd(num):\n            count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_strings = [string for string in lst if len(string) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n <= 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(i-j) for i,j in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    max_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[1:]+b[0]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to their roman numeral counterparts.\n    roman_map = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_numeral = \"\"\n    for value, symbol in roman_map:\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n    return roman_numeral"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    # return [total number of eaten carrots after your meals, the number of carrots left after your meals]\n    pass"}
{"idx": 160, "completion": "result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the loop\n    if a > b:\n        a, b = b, a\n\n    # Collect even digits\n    even_digits = []\n    for num in range(a, b + 1):\n        if num % 2 == 0:\n            even_digits.append(num)\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    open_count = 0\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n        current_group += char\n        if open_count == 0:\n            paren_groups.append(current_group)\n            current_group = ''\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_string = paren_string.replace(' ', '')\n    max_depth = 0\n    current_depth = 0\n    result = []\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif char == ')':\n            current_depth -= 1\n        if char == ')' and current_depth == 0:\n            result.append(max_depth)\n            max_depth = 0\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"idx": 9, "completion": "return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)  # type: ignore"}
{"idx": 13, "completion": "while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_difference = float(\"inf\")\n    closest_elements = None\n    for i in range(len(numbers) - 1):\n        difference = numbers[i + 1] - numbers[i]\n        if difference < smallest_difference:\n            smallest_difference = difference\n            closest_elements = (numbers[i], numbers[i + 1])\n    return closest_elements"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "if n < 2:\n        return []\n    factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    seen_twice = set()\n    result = []\n    for n in numbers:\n        if n not in seen:\n            seen.add(n)\n            result.append(n)\n        elif n not in seen_twice:\n            seen_twice.add(n)\n            result.append(None)\n    return [n for n in result if n is not None]  # type: ignore"}
{"idx": 27, "completion": "return ''.join(c.upper() if c.islower() else c.lower() for c in string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"xs should have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs should have a non zero last coefficient\")\n\n    # find a zero point\n    x = 1\n    while poly(xs, x) * poly(xs, x + 1) > 0:\n        x += 1\n    x0 = x\n    while abs(x - x0) > 1e-6:\n        x0 = x\n        x = x - poly(xs, x) / poly([coeff * i for i, coeff in enumerate(xs)], x)\n    return x"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib = [0, 1]\n    while len(fib) < n + 1:\n        fib.append(fib[-1] + fib[-2])\n    for i in range(2, len(fib)):\n        if is_prime(fib[i]):\n            n -= 1\n            if n == 0:\n                return fib[i]"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set()\n    zeros = 0\n    for x in l:\n        if x == 0:\n            zeros += 1\n        if x != 0:\n            if -x in s:\n                return True\n            s.add(x)\n    if zeros > 1:\n        return True\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return modp(n-1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "for i in l:\n        if i >= t:\n            return False\n    return True"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "largest = 1\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            largest = i\n            n = n // i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        largest = n\n    return largest"}
{"idx": 60, "completion": "return sum(range(1, n+1))"}
{"idx": 61, "completion": "counter = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            counter += 1\n        elif bracket == \")\":\n            counter -= 1\n        if counter < 0:\n            return False\n    return counter == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "vowels = \"aeiou\"\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # In case shift is larger than the number of digits\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into words and filter out the numbers\n    numbers = [int(num) for num in re.findall(r'\\d+', s)]\n    # Calculate the number of mango fruits\n    mango_fruits = n - sum(numbers)\n    return mango_fruits"}
{"idx": 68, "completion": "# filter out the even numbers\n    even_numbers = [num for num in arr if num % 2 == 0]\n    if not even_numbers:\n        return []\n    # find the smallest even number\n    smallest_even = min(even_numbers)\n    # find the index of the smallest even number\n    index = arr.index(smallest_even)\n    return [smallest_even, index]"}
{"idx": 69, "completion": "# Your code here\n    # First, we need to count the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # Next, we need to find the greatest integer that meets the criteria\n    max_int = -1\n    for num, count in freq.items():\n        if num > max_int and count >= num:\n            max_int = num\n    return max_int"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    lst.sort()\n    result = []\n    # While there are elements in the list\n    while lst:\n        # Append the minimum value to the result list\n        result.append(lst.pop(0))\n        # If there are still elements in the list\n        if lst:\n            # Append the maximum value to the result list\n            result.append(lst.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    #"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    for i in range(1, 100):\n        if n**i == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1/3) == int(a**(1/3))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = set(['2', '3', '5', '7', 'B', 'D'])\n    # Initialize the count of prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime hexadecimal digit, increment the count\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Your code here\n    pass"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the formula\n    return 2 * (10 ** (n - 1)) - 10**(n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    # Split the binary string into individual digits, sum them, and convert back to binary\n    total_sum = sum(int(digit) for digit in binary_str)\n    return bin(total_sum)[2:]"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if e % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "return sorted(\n        [(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x],\n        key=lambda x: (x[0], -x[1])\n    ) if lst else []"}
{"idx": 88, "completion": "if not array:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        sum_of_first_and_last = array[0] + array[-1]\n        if sum_of_first_and_last % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"idx": 89, "completion": "alphabet = string.ascii_lowercase\n    shifted_alphabet = alphabet[2:] + alphabet[:2]\n    table = str.maketrans(alphabet, shifted_alphabet)\n    return s.translate(table)"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# split the string into sentences\n    sentences = re.split(r'[.!?]', S)\n    # count the number of sentences that start with \"I\"\n    boredom_count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n    return boredom_count"}
{"idx": 92, "completion": "return (x + y == z or x + z == y or y + z == x) and all([isinstance(i, int) for i in [x, y, z]])"}
{"idx": 93, "completion": "vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = vowels[encoded_char]\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "# Initialize the list to store the number of stones at each level\n    stones = [n]\n    # Calculate the number of stones for each level\n    for _ in range(n - 1):\n        # Determine the next number based on the parity of the current level's stones\n        next_stones = stones[-1] + 2 if stones[-1] % 2 == 0 else stones[-1] + 2\n        stones.append(next_stones)\n    return stones"}
{"idx": 101, "completion": "# Split the string by commas and spaces and return the list of words\n    return [word for word in re.split(',| ', s) if word]"}
{"idx": 102, "completion": "for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [str(x) for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr, reverse=True)\n    result = [digit_names[int(num) - 1] for num in sorted_arr]\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            n = -n\n        return sum(int(digit) for digit in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"idx": 109, "completion": "# If the array is empty, return True\n    if not arr:\n        return True\n\n    # Find the index where the array breaks the non-decreasing order\n    break_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            if break_index != -1:\n                # If there's already a break point, it's not possible to sort\n                return False\n            break_index = i\n\n    # If the array is already sorted, return True\n    if break_index == -1:\n        return True\n\n    # Check if the array can be sorted by performing right shift operations\n    # by checking if the array after the break point is in non-decreasing order\n    for i in range(break_index + 1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation here\n    return \"YES\" if len(set(lst1) & set(lst2)) > 0 else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of letters\n    letters = test.split()\n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    # Iterate over the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    # Iterate over the items in the original dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the result dictionary\n        if count == max_count:\n            result[letter] = count\n    # Return the result dictionary\n    return result"}
{"idx": 112, "completion": "result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count(\"1\")+s.count(\"3\")+s.count(\"5\")+s.count(\"7\")+s.count(\"9\"),s.count(\"1\")+s.count(\"3\")+s.count(\"5\")+s.count(\"7\")+s.count(\"9\"),s,s.count(\"1\")+s.count(\"3\")+s.count(\"5\")+s.count(\"7\")+s.count(\"9\")) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Write your code here.\n    total = 0\n    for row in grid:\n        total += math.ceil(sum(row) / capacity)\n    return total"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "if not s:\n        return []\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "# Your code goes here\n    vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "# your code goes here\n    open_parens = 0\n    close_parens = 0\n    for i in lst:\n        for j in i:\n            if j == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum(n for i, n in enumerate(lst) if i % 2 == 0 and n % 2 != 0)"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if x >= -99 and x <= 99])"}
{"idx": 123, "completion": "# Initialize the list to store odd numbers\n    odd_numbers = []\n    # Start with the given number\n    while n != 1:\n        # If n is odd, append it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        # Apply the Collatz function\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    # Append 1 to the list as it's always the last number in the sequence and is odd\n    odd_numbers.append(1)\n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month > 12 or month < 1:\n            return False\n        if day > 31 or day < 1:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 31:\n                return False\n        if month in [4, 6, 9, 11]:\n            if day > 30:\n                return False\n        if month == 2:\n            if day > 29:\n                return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)"}
{"idx": 126, "completion": "return sorted(lst) == lst and len(set(lst)) == len(lst)"}
{"idx": 127, "completion": "# Your code here\n    def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    intersection_length = intersection_end - intersection_start\n    if isPrime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    sign_product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        sign_product *= (1 if num > 0 else -1)\n        magnitude_sum += abs(num)\n    return sign_product * magnitude_sum"}
{"idx": 129, "completion": "n = len(grid)\n    # Initialize the priority queue with the first cell and its path length\n    pq = [(grid[0][0], 0, [grid[0][0]])]\n    visited = set([(0, 0)])\n\n    # Define the directions to move in the grid\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # Iterate until we find the minimum path of length k\n    while pq:\n        value, steps, path = heapq.heappop(pq)\n        if steps == k:\n            return path\n        for dx, dy in directions:\n            x, y = dx + path[-1] // n, dy + path[-1] % n\n            if 0 <= x < n and 0 <= y < n and (x, y) not in visited:\n                visited.add((x, y))\n                heapq.heappush(pq, (grid[x][y], steps + 1, path + [grid[x][y]]))\n\n    # If no path of length k is found, return an empty list\n    return []"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n    return product if has_odd else 0"}
{"idx": 132, "completion": "# Initialize a counter for the depth of nesting\n    depth = 0\n    # Initialize a flag to check if there is at least one nested bracket\n    has_nested = False\n\n    for char in string:\n        if char == '[':\n            depth += 1\n            if depth > 1:\n                has_nested = True\n        elif char == ']':\n            if depth > 0:\n                depth -= 1\n            else:\n                # This means there's a closing bracket without a matching opening bracket\n                return False\n\n    # The string is valid if depth is 0 and has_nested is True\n    return depth == 0 and has_nested"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    txt = txt.split(\" \")\n    return txt[-1].isalpha() and len(txt[-1]) == 1"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            lst[i] = lst[i] ** 2\n        elif i % 4 == 0:\n            lst[i] = lst[i] ** 3\n        sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "# Your code goes here\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(abs(num))\n            first_digit = int(num_str[0])\n            last_digit = int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return tuple(planets[planet1_index + 1:planet2_index])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = ''\n    max_strength = -float('inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Convert the first word into a set of cyclic permutations\n    cyclic_perms = set()\n    for i in range(len(a)):\n        cyclic_perms.add(a[i:] + a[:i])\n    \n    # Check if the second word or any of its rotations is a substring of the first word\n    for perm in cyclic_perms:\n        if b in perm:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            number -= value\n            roman += roman_numerals[value]\n    return roman"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the square of the largest side is equal to the sum of squares of \n    # the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    eaten = number + min(need, remaining)\n    left = max(0, remaining - need)\n    return [eaten, left]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Append the operator and the next operand to the expression\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    # Evaluate the expression and return the result\n    return eval(expression)"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Function to check if a number is even\n    is_even = lambda x: x % 2 == 0\n\n    # Generate the list of even numbers in the range\n    even_digits = [digit for digit in range(a, b + 1) if is_even(digit)]\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n            else:\n                # Unbalanced parentheses, ignore this group\n                current_group = \"\"\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "return [max(len(x) - x.count('('), 0) for x in paren_string.split()]  # type: ignore"}
{"idx": 7, "completion": "return [string for string in strings if substring in string]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "result = []\n    max_so_far = float('-inf')\n    for number in numbers:\n        max_so_far = max(max_so_far, number)\n        result.append(max_so_far)\n    return result"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n\n    return string + string[::-1]"}
{"idx": 11, "completion": "result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result"}
{"idx": 12, "completion": "if not strings:\n        return None\n\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9,\n    }\n    sorted_numbers = sorted(numbers.split(), key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < closest[1] - closest[0]:\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    # find the smallest x such that poly(x) > 0 and poly(x + 1) < 0\n    # then use bisection method to find the zero point\n    x = 0\n    while poly(xs, x) > 0:\n        x += 1\n    while poly(xs, x + 1) > 0:\n        x += 1\n    while abs(x - (x + 1)) > 1e-6:\n        x = (x + x + 1) / 2\n        if poly(xs, x) > 0:\n            x = (x + 1) / 2\n        else:\n            x = (x + x + 1) / 2\n    return x"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = [2, 3]  # Starting Fibonacci numbers\n    idx = 2  # Starting index\n    while True:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        idx += 1\n        if is_prime(next_fib):\n            if idx == n:\n                return next_fib\n            n -= 1"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n * n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for n in l:\n        if -n in seen:\n            return True\n        seen.add(n)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join([str(digit) for digit in digits[::-1]])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return modp(n-1, p)*2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "# Start from the smallest prime number\n    factor = 2\n    while factor * factor <= n:\n        while n % factor == 0:\n            n //= factor\n        factor += 1\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "# Define the vowels\n    vowels = 'aeiou'\n    # Initialize the count of vowels\n    count = 0\n    # Iterate over each character in the string\n    for char in s:\n        # If the character is a vowel, increment the count\n        if char.lower() in vowels:\n            count += 1\n    # Check if the last character is 'y' and increment the count if so\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    if shift >= len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into parts\n    parts = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the parts\n    for i in range(len(parts)):\n        # If the part is \"apples\" or \"oranges\", add the next part to the count\n        if parts[i] == \"apples\":\n            apples = int(parts[i + 1])\n        elif parts[i] == \"oranges\":\n            oranges = int(parts[i + 1])\n    # Return the total number of fruits minus the number of apples and oranges\n    return n - apples - oranges"}
{"idx": 68, "completion": "# your code here\n    return [min([x for x in arr if x % 2 == 0]), arr.index(min([x for x in arr if x % 2 == 0]))] if [x for x in arr if x % 2 == 0] else []"}
{"idx": 69, "completion": "# Your code here\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in c.items():\n        if k > 0 and v >= k:\n            return k\n    return -1"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    lst.sort()\n    result = []\n    while lst:\n        # Append the minimum value\n        result.append(lst.pop(0))\n        if lst:\n            # Append the maximum value from the remaining list\n            result.append(lst.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1/3) == round(a**(1/3))"}
{"idx": 78, "completion": "# Your code here\n    prime_hex_digits = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Your code goes here\n    pass"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the formula\n    return 2 * (10 ** (n - 1)) - 10 ** (n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and remove the '0b' prefix\n    binary_str = bin(N)[2:]\n    # Split the binary string into individual digits, sum them, and convert back to binary\n    sum_of_digits = sum(int(digit) for digit in binary_str)\n    binary_sum = bin(sum_of_digits)[2:]\n    return binary_sum"}
{"idx": 85, "completion": "return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split(' ')\n    return ' '.join([''.join(sorted(word)) for word in words])"}
{"idx": 87, "completion": "# Your code here\n    return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    sum_ = first + last\n    if sum_ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            is_upper = char.isupper()\n            char = char.lower()\n            index = (alphabet.index(char) + (2 * 2)) % 26\n            new_char = alphabet[index]\n            if is_upper:\n                new_char = new_char.upper()\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = sorted(set(lst))\n    if len(lst) < 2:\n        return None\n    return lst[1]"}
{"idx": 91, "completion": "# split the string into sentences\n    sentences = re.split(r'[.!?]', S)\n    # count the number of sentences that start with \"I\"\n    count = sum(1 for sentence in sentences if sentence.strip().startswith(\"I\"))\n    return count"}
{"idx": 92, "completion": "#your code here\n    if x + y == z or x + z == y or y + z == x:\n        if type(x) == int and type(y) == int and type(z) == int:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            elif char.isupper():\n                encoded_message += char.lower()\n            if char.lower() in vowels:\n                encoded_message += vowels[char.lower()]\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "# Convert the string to a float\n    value = float(value)\n    # If the value is positive, round away from zero\n    if value > 0:\n        return int(value + 0.5)\n    # If the value is negative, round away from zero\n    elif value < 0:\n        return int(value - 0.5)\n    # If the value is zero, return zero\n    else:\n        return 0"}
{"idx": 100, "completion": "stones = [n]\n    for _ in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"idx": 101, "completion": "# Split the string by commas and spaces and return the result\n    return re.split(', | ', s)"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Check if x is even\n    if x % 2 == 0:\n        return x\n    # Check if y is even\n    elif y % 2 == 0:\n        return y\n    # Check if the difference between x and y is even\n    elif (y - x) % 2 == 0:\n        return y - 2\n    # If none of the above conditions are met, return -1\n    else:\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    return [digit_names[number - 1] for number in filtered_sorted_reversed]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"idx": 108, "completion": "return len([x for x in arr if sum(int(d) for d in str(abs(x))) > 0])"}
{"idx": 109, "completion": "# check if the array is empty\n    if len(arr) == 0:\n        return True\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    # check if the array can be sorted by performing right shift operation\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) or any(x % 2 == 0 for x in lst2) else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    \n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    \n    # Iterate over the items in the original dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the result dictionary\n        if count == max_count:\n            result[letter] = count\n    \n    return result"}
{"idx": 112, "completion": "result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(c in '13579' for c in s), i, i, i) for i, s in enumerate(lst)]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code here\n    wells = len(grid)\n    units = 0\n    for i in range(wells):\n        units += sum(grid[i])\n    return math.ceil(units/capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Your code goes here\n    vowels = 'aeiouAEIOU'\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = []\n    current_word = ''\n    for char in s:\n        if char.isalpha():\n            current_word += char\n        else:\n            if len(current_word) >= n and all(char in consonants for char in current_word):\n                result.append(current_word)\n            current_word = ''\n    if len(current_word) >= n and all(char in consonants for char in current_word):\n        result.append(current_word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    found = ''\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            found = word[i]\n            break\n    return found"}
{"idx": 119, "completion": "# Your code here\n    if lst[0].count('(') == lst[1].count(')'):\n        return 'Yes'\n    elif lst[0].count(')') == lst[1].count('('):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if 10 <= x <= 99])"}
{"idx": 123, "completion": "# Your code goes here\n    odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        if n % 2 == 0:\n            n = n / 2\n        else:\n            n = 3 * n + 1\n    odd_numbers.append(1)\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "# check if date is empty\n    if not date:\n        return False\n\n    # check if date is in the correct format\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    # check if the number of days is valid\n    month, day, year = map(int, date.split('-'))\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            return False\n        elif lst[i] > lst[i + 1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start2 > end1 or start1 > end2:\n        return \"NO\"\n    else:\n        intersection_start = max(start1, start2)\n        intersection_end = min(end1, end2)\n        length = intersection_end - intersection_start\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, int(length**0.5)+1):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"idx": 128, "completion": "if len(arr) == 0:\n        return None\n\n    prod = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        prod *= 1 if num > 0 else -1\n        sum_of_magnitudes += abs(num)\n\n    return prod * sum_of_magnitudes"}
{"idx": 129, "completion": "N = len(grid)\n    # Initialize the priority queue with the starting cell\n    pq = [(grid[0][0], 0, 0)]\n    # Initialize the visited set to keep track of visited cells\n    visited = set([(0, 0)])\n    # Initialize the result list to store the minimum path\n    result = []\n    # Initialize the path length to 0\n    path_length = 0\n    # Initialize the minimum value to a large number\n    min_value = float('inf')\n    # Initialize the minimum path to an empty list\n    min_path = []\n    # Initialize the current cell to the starting cell\n    current_cell = (0, 0)\n    # Initialize the current value to the value of the starting cell\n    current_value = grid[0][0]\n    # Initialize the current path to a list containing the starting cell\n    current_path = [current_cell]\n    # Initialize the current path length to 1\n    current_path_length = 1\n\n    # Iterate until the path length is equal to k\n    while current_path_length < k:\n        # Pop the cell with the minimum value from the priority queue\n        value, row, col = heapq.heappop(pq)\n        # Update the current cell, value, path length, and path\n        current_cell = (row, col)\n        current_value = value\n        current_path_length = len(current_path)\n        current_path.append(current_cell)\n        # Update the minimum value and path if the current path is shorter\n        if current_path_length < len(min_path) or (current_path_length == len(min_path) and current_value < min_value):\n            min_value = current_value\n            min_path = current_path.copy()\n        # Iterate over the neighbors of the current cell\n        for dr, dc in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            # Calculate the row and column of the neighbor\n            r, c = row + dr, col + dc\n            # Check if the neighbor is within the grid and has not been visited\n            if 0 <= r < N and 0 <= c < N and (r, c) not in visited:\n                # Add the neighbor to the visited set and the priority queue\n                visited.add((r, c))\n                heapq.heappush(pq, (grid[r][c], r, c))\n        # Update"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        elif char == ']' and not stack:\n            return False\n    return any(True for i in range(len(stack)-1) if stack[i] == '[' and stack[i+1] == ']')"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Filter out the negative and positive integers\n    negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    # Find the largest negative and smallest positive integers\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats for comparison, keeping track of the original type\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the numbers\n    if a > b:\n        return a if not isinstance(a, float) else str(a).replace('.', ',')\n    elif b > a:\n        return b if not isinstance(b, float) else str(b).replace('.', ',')\n    else:\n        return None"}
{"idx": 138, "completion": "return n % 2 == 0 and n >= 8"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime lengths\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(abs(num))\n            if int(str_num[0]) % 2 != 0 and int(str_num[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return planets[index1+1:index2]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [string for string in lst if len(string) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(i-j) for i,j in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = ''\n    max_strength = -float('inf')\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to their Roman numeral counterparts.\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman"}
{"idx": 157, "completion": "# Sort the sides to ensure the longest side is last\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Apply the operator on the current result and the next operand\n        result = eval(f\"{result}{operator[i]}{operand[i+1]}\")\n    # Return the final result\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the range function\n    start, end = sorted([a, b])\n    # Generate the range and filter out the even numbers\n    return [i for i in range(start, end + 1) if i % 2 == 0]"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    stack = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            stack.pop()\n            current_group += char\n            if not stack:\n                paren_groups.append(current_group)\n                current_group = \"\"\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i, n in enumerate(numbers):\n        result.append(n)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split(' '):\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        sum_ = 0\n        product = 1\n        for number in numbers:\n            sum_ += number\n            product *= number\n        return sum_, product"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        current_max = max(current_max, number)\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if not string:\n        return ''\n    if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len) if strings else None"}
{"idx": 13, "completion": "while b:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i+len(substring)] == substring)"}
{"idx": 19, "completion": "# Convert the input string into a list of numbers\n    number_list = numbers.split()\n    # Sort the list of numbers\n    number_list.sort()\n    # Join the sorted list back into a string\n    sorted_numbers = ' '.join(number_list)\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert xs[-1] != 0\n\n    def find_zero_helper(a: float, b: float, fa: float, fb: float):\n        if abs(fa) < 1e-10:\n            return a\n        if abs(fb) < 1e-10:\n            return b\n        c = (a * fb - b * fa) / (fb - fa)\n        fc = poly(xs, c)\n        if fc == 0:\n            return c\n        if fc * fa < 0:\n            return find_zero_helper(a, c, fa, fc)\n        else:\n            return find_zero_helper(c, b, fc, fb)\n\n    return find_zero_helper(-100, 100, poly(xs, -100), poly(xs, 100))"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == j]) if i % 3 == 0 else l[i] for j in range(3)]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        \"\"\"is_prime returns True if x is a prime number, False otherwise.\"\"\"\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    a, b = 0, 1\n    num = 0\n    while num < n:\n        a, b = b, a + b\n        if is_prime(b):\n            num += 1\n    return b"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set()\n    zeros = 0\n    for x in l:\n        if x == 0:\n            zeros += 1\n        if x != 0:\n            if -x in s:\n                return True\n            s.add(x)\n    return False if zeros < 2 else True"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(digit) for digit in digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "largest = 1\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        largest = 2\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        # While i divides n, print i and divide n\n        while n % i == 0:\n            largest = i\n            n = n // i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        largest = n\n    return largest"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into parts and remove the words \"apples\" and \"oranges\"\n    parts = s.replace(\"apples\", \"\").replace(\"oranges\", \"\").split()\n    # Convert the remaining parts to integers and sum them\n    total_fruits = sum(int(part) for part in parts)\n    # Calculate the number of mango fruits\n    mango_fruits = n - total_fruits\n    return mango_fruits"}
{"idx": 68, "completion": "# Initialize variables to store the smallest even value and its index\n    smallest_even_value = float('inf')\n    smallest_even_index = -1\n\n    # Iterate through the array to find the smallest even value and its index\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = index\n\n    # Check if a smallest even value was found\n    if smallest_even_value == float('inf'):\n        return []\n    else:\n        return [smallest_even_value, smallest_even_index]"}
{"idx": 69, "completion": "# Your code here\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in c.items():\n        if k > 0 and v >= k:\n            return k\n    return -1"}
{"idx": 70, "completion": "sorted_list = []\n    while lst:\n        # Add the minimum value\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n\n        # If there are still elements left, add the maximum value\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n\n    return sorted_list"}
{"idx": 71, "completion": "if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)"}
{"idx": 72, "completion": "if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(x) for x in lst1) < sum(len(x) for x in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            count += 1\n            a //= i\n            if count > 3:\n                return False\n    return count == 3 and is_prime(a)"}
{"idx": 76, "completion": "return x == n ** round(log(x, n))"}
{"idx": 77, "completion": "return a**(1./3.) == int(a**(1./3.))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize the count of prime digits\n    count = 0\n    # Iterate over each digit in the input string\n    for digit in num:\n        # If the digit is a prime hex digit, increment the count\n        if digit in prime_hex_digits:\n            count += 1\n    # Return the count of prime digits\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2"}
{"idx": 81, "completion": "return [letter_grade(gpa) for gpa in grades]"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate the count\n    # There are 10^(n-1) numbers of n digits\n    # 9 * 10^(n-2) numbers that do not start with 1, and similarly for not ending with 1\n    # We subtract the overlap (numbers that both start and end with 1) which is 10^(n-2)\n    return 2 * (10 ** (n - 1)) - 10 ** (n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary and then to a list of its digits\n    binary_digits = list(bin(N)[2:])\n    # Sum the digits\n    total_sum = sum(int(digit) for digit in binary_digits)\n    # Convert the sum to binary and return it\n    return bin(total_sum)[2:]"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if e % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "return sorted([(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            is_upper = char.isupper()\n            char = char.lower()\n            index = (alphabet.index(char) + 4) % 26\n            char = alphabet[index]\n            if is_upper:\n                char = char.upper()\n            encrypted += char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Trim leading and trailing whitespace\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n            boredom_count += 1\n    return boredom_count"}
{"idx": 92, "completion": "#your code here\n    if x == int(x) and y == int(y) and z == int(z):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n        encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "stones = [n]\n    for i in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([n for n in x if not any(int(d) % 2 == 0 for d in str(n))])"}
{"idx": 105, "completion": "# Mapping of numbers to their corresponding names\n    num_to_name = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map the array\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    result = [num_to_name[num] for num in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for n in arr if sum(int(d) for d in str(abs(n))) > 0)"}
{"idx": 109, "completion": "# check if the array is empty\n    if len(arr) == 0:\n        return True\n\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n\n    # check if the array can be sorted by performing right shift operation\n    for i in range(len(arr)):\n        if arr[i] > arr[(i+1) % len(arr)]:\n            if arr[i] > arr[(i+2) % len(arr)]:\n                return False\n            else:\n                return True\n    return False"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0 else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    \n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    max_count_letters = {}\n    \n    # Iterate over the items in the letter_counts dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the max_count_letters dictionary\n        if count == max_count:\n            max_count_letters[letter] = count\n    \n    return max_count_letters"}
{"idx": 112, "completion": "# your code here\n    for i in c:\n        s = s.replace(i,'')\n    return (s, s == s[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s,s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]\n    # lst2 = []\n    # for s in lst:\n    #     odd = 0\n    #     for c in s:\n    #         if int(c) % 2 != 0:\n    #             odd += 1\n    #     lst2.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd,odd, s, odd))\n    # return lst2"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Write your code here.\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "return [word for word in s.split() if sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\") == n]"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    found = ''\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            found = word[i]\n            break\n    return found"}
{"idx": 119, "completion": "# Your code here\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    elif lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum(x for i, x in enumerate(lst) if x % 2 != 0 and i % 2 == 0)"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if x >= 10 and x <= 99])"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1, which is odd.\n    return sorted(set(sequence))  # Remove duplicates and sort"}
{"idx": 124, "completion": "date = date.split('-')\n    if len(date) != 3:\n        return False\n    month, day, year = date\n    if not month.isdigit() or not day.isdigit() or not year.isdigit():\n        return False\n    month, day, year = int(month), int(day), int(year)\n    if month < 1 or month > 12:\n        return False\n    if day < 1 or day > 31:\n        return False\n    if month in [4, 6, 9, 11] and day > 30:\n        return False\n    if month == 2 and day > 29:\n        return False\n    return True"}
{"idx": 125, "completion": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([char for char in txt if (ord(char) - ord('a')) % 2 == 1])"}
{"idx": 126, "completion": "return list(sorted(set(lst))) == list(sorted(lst))"}
{"idx": 127, "completion": "if interval1[0] > interval2[0]:\n        interval1, interval2 = interval2, interval1\n    if interval1[1] < interval2[0]:\n        return \"NO\"\n    if interval1[1] >= interval2[1]:\n        return \"NO\"\n    if interval1[1] - interval2[0] + 1 == 1:\n        return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    prod = 1\n    sum_ = 0\n    for n in arr:\n        if n == 0:\n            prod = 0\n            break\n        prod *= 1 if n > 0 else -1\n        sum_ += abs(n)\n    return prod * sum_"}
{"idx": 129, "completion": "N = len(grid)\n    # Initialize the priority queue with the starting cell and its path length\n    pq = [(grid[0][0], 0, 0, [grid[0][0]])]\n    visited = set([(0, 0)])\n    # Initialize the answer with the starting cell\n    ans = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length = 1\n    # Initialize the minimum path with the starting cell\n    min_path = [grid[0][0]]\n    # Initialize the minimum path length with the starting cell\n    min_path_length ="}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # If the stack is not empty, it means there is at least one nested bracket\n    return bool(stack)"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return bool(txt) and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats for comparison, keeping the original for return\n    if isinstance(a, str):\n        try:\n            a = float(a.replace(',', '.'))\n        except ValueError:\n            return None\n    if isinstance(b, str):\n        try:\n            b = float(b.replace(',', '.'))\n        except ValueError:\n            return None\n\n    # Compare the numbers and return the original value of the larger one\n    if a > b:\n        return a if not isinstance(a, float) else str(a).replace('.', ',')\n    elif b > a:\n        return b if not isinstance(b, float) else str(b).replace('.', ',')\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum += lst[i]**3\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    simplified_numerator = x_numerator * n_numerator\n    simplified_denominator = x_denominator * n_denominator\n    return simplified_numerator % simplified_denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [string for string in lst if len(string) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "# Check if the list is empty\n    if not lst:\n        return 0\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate through the list\n    for num in lst:\n        # Check if the number is odd and positive\n        if num > 0 and num % 2 != 0:\n            # Add the square of the number to the total sum\n            total_sum += num ** 2\n    \n    return total_sum"}
{"idx": 152, "completion": "#your code here\n    return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if len(b) > len(a):\n        return False\n    else:\n        for i in range(len(b)):\n            b = b[-1] + b[:-1]\n            if b in a:\n                return True\n        return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to their Roman numeral counterparts.\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman"}
{"idx": 157, "completion": "# Check if the sides form a right-angled triangle using the Pythagorean theorem\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code goes here\n    total = number + min(need, remaining)\n    remaining = max(remaining - need, 0)\n    return [total, remaining]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the loop\n    if a > b:\n        a, b = b, a\n\n    # Collect even digits\n    even_digits = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n\n    # Remove duplicates and sort\n    even_digits = sorted(set(even_digits))\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n            current_group += char\n        elif char == \")\":\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                paren_groups.append(current_group)\n                current_group = \"\"\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"idx": 9, "completion": "return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string"}
{"idx": 11, "completion": "# Convert the strings to integers, perform XOR, and then convert back to a string\n    result = ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))\n    return result"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"idx": 13, "completion": "while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "return ' '.join(sorted(numbers.split(), key=lambda x: 'zero one two three four five six seven eight nine'.split().index(x)))"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < closest[1] - closest[0]:\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [x for x in values if isinstance(x, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "if n <= 1:\n        return []\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join(c.swapcase() for c in string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"largest non zero coefficient must be the last element of xs\")\n\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    def newton(x):\n        return x - f(x) / df(x)\n\n    x = 0\n    while True:\n        x = newton(x)\n        if abs(f(x)) < 1e-10:\n            return x"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_list.sort()\n    l_prime = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_list[even_index])\n            even_index += 1\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    i = 2\n    while True:\n        fibs.append(fibs[i - 1] + fibs[i - 2])\n        if is_prime(fibs[i]):\n            n -= 1\n            if n == 0:\n                return fibs[i]\n        i += 1"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(digit) for digit in digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n//2]\n    else:\n        return (l[n//2 - 1] + l[n//2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "assert isinstance(n, int) and isinstance(p, int) and p > 0\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    # Return the maximum of the factors\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "# Your code goes here (try to solve it without using count function)"}
{"idx": 65, "completion": "s = str(x)\n    l = len(s)\n    if shift >= l:\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into words\n    words = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the words and count the number of apples and oranges\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    return mangoes"}
{"idx": 68, "completion": "# your code here\n    return [min([x for x in arr if x % 2 == 0]), arr.index(min([x for x in arr if x % 2 == 0]))] if [x for x in arr if x % 2 == 0] else []"}
{"idx": 69, "completion": "# Your code here\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in c.items():\n        if k > 0 and v >= k:\n            return k\n    return -1"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    lst.sort()\n    result = []\n    while lst:\n        # Append the minimum value\n        result.append(lst.pop(0))\n        if lst:\n            # Append the maximum value of the remaining list\n            result.append(lst.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'Hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hi', 'hi', 'admin', 'project']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['4']\n    # lst2 = ['1', '2', '3', '4', '5']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'Hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hi', 'hi', 'admin', 'project']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['4']\n    # lst2 = ['1', '2', '3', '4', '5']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'Hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hi', 'hi', 'admin', 'project']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['4']\n    # lst2 = ['1', '2', '3', '4', '5']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'Hi']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hi', 'hi', 'admin', 'project']\n    # lst1 = ['hi', 'admin']\n    # lst2 = ['hI', 'hi', 'hi']\n    # lst1 = ['4']\n    # lst2 = ['1', '2', '3', '4', '5']\n    # lst1 = ['hi',"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a)"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x /= n\n    return True"}
{"idx": 77, "completion": "return a**(1/3) == round(a**(1/3))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize the count of prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime hexadecimal digit, increment the count\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Your code goes here\n    pass"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    else:\n        # For n > 1, calculate the count\n        # There are 9 * 10^(n-2) numbers that start or end with 1\n        # This is because the first digit can't be 0 or 1, and the last digit can be anything but 1\n        # We multiply by 2 to account for numbers that start OR end with 1, but subtract 1 to avoid double-counting\n        return 2 * (9 * 10**(n-2)) - 10**(n-2)"}
{"idx": 84, "completion": "# Convert the number to binary and remove the '0b' prefix\n    binary_representation = bin(N)[2:]\n    # Split the binary number into individual digits, sum them, and convert to binary\n    sum_of_digits = sum(int(digit) for digit in binary_representation)\n    return bin(sum_of_digits)[2:]"}
{"idx": 85, "completion": "return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "return sorted([(i, j) for i, row in enumerate(lst) for j, x_ in enumerate(row) if x_ == x], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    elif len(array) == 1:\n        return [array[0]]\n    else:\n        first_last_sum = array[0] + array[-1]\n        if first_last_sum % 2 == 0:\n            return sorted(array, reverse=True)\n        else:\n            return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) + 4) % 26\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Trim leading and trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"idx": 92, "completion": "#your code here\n    return (x + y == z or x + z == y or y + z == x) and (x.is_integer() and y.is_integer() and z.is_integer())"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                char = char.upper()\n            else:\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n        encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "# Initialize the list with the number of stones in the first level\n    pile = [n]\n    # Calculate the number of stones for each subsequent level\n    for i in range(1, n):\n        # Determine the number of stones in the next level\n        if pile[i-1] % 2 == 0:\n            pile.append(pile[i-1] + 2)  # Next even number\n        else:\n            pile.append(pile[i-1] + 2)  # Next odd number\n    return pile"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Loop from y to x to find the biggest even number\n    for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        average = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(average)"}
{"idx": 104, "completion": "return sorted([num for num in x if not any(int(digit) % 2 == 0 for digit in str(num))])"}
{"idx": 105, "completion": "number_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    \n    # Filter and sort the array\n    filtered_sorted_arr = sorted([x for x in arr if 1 <= x <= 9])\n    \n    # Reverse the sorted array\n    reversed_arr = filtered_sorted_arr[::-1]\n    \n    # Convert numbers to words\n    result = [number_to_word[num] for num in reversed_arr]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(sum(int(digit) for digit in str(abs(num))) > 0 for num in arr)"}
{"idx": 109, "completion": "# check if the array is empty\n    if len(arr) == 0:\n        return True\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n    # check if the array can be sorted by performing right shift operation\n    for i in range(len(arr)):\n        if arr[i:] + arr[:i] == sorted(arr):\n            return True\n    return False"}
{"idx": 110, "completion": "# Your implementation goes here\n    pass"}
{"idx": 111, "completion": "# Convert the string into a list of letters\n    letters = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    \n    # Count the occurrences of each letter\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Filter the dictionary to only include letters with the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')\n    ) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "return [word for word in s.split() if sum(1 for c in word if c.lower() in \"bcdfghjklmnpqrstvwxyz\") == n]"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in range(len(lst)):\n        if lst[i] == '(':\n            open_parens += 1\n        else:\n            close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum([x for i, x in enumerate(lst) if x % 2 != 0 and i % 2 == 0])"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 0 <= x < 100)"}
{"idx": 123, "completion": "# Initialize an empty list to store the odd numbers in the Collatz sequence\n    odd_numbers = []\n    # Start with the given positive integer n\n    current_number = n\n    \n    # Generate the Collatz sequence until it reaches 1\n    while current_number != 1:\n        # If the current number is odd, add it to the list\n        if current_number % 2 != 0:\n            odd_numbers.append(current_number)\n        # Apply the Collatz rules to get the next number in the sequence\n        current_number = current_number / 2 if current_number % 2 == 0 else 3 * current_number + 1\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 == 1)"}
{"idx": 126, "completion": "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst[i] == lst[i+1]:\n            return False\n    return True"}
{"idx": 127, "completion": "# your code here\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start + 1\n        if length <= 1:\n            return \"NO\"\n        for i in range(2, length):\n            if length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    product_signs = 1\n    sum_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            product_signs = 0\n            break\n        elif num > 0:\n            product_signs *= 1\n        else:\n            product_signs *= -1\n\n        sum_magnitudes += abs(num)\n\n    return sum_magnitudes * product_signs"}
{"idx": 129, "completion": "def dfs(grid, i, j, k, path, res):\n        if k == 0:\n            res.append(path[:])\n            return\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < len(grid) and 0 <= y < len(grid[0]):\n                dfs(grid, x, y, k-1, path + [grid[x][y]], res)\n    res = []\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            dfs(grid, i, j, k-1, [grid[i][j]], res)\n    return min(res)"}
{"idx": 130, "completion": "if n == 0:\n        return [1]\n    elif n == 1:\n        return [1, 3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        elif char == ']' and not stack:\n            return False\n    return any(True for _ in range(2) if '[' in string and '[]' in string)"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "if txt == '':\n        return False\n    else:\n        txt = txt.split(' ')\n        if txt[-1].isalpha() and len(txt[-1]) == 1:\n            return True\n        else:\n            return False"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the numbers\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split(\"/\"))\n    n_numerator, n_denominator = map(int, n.split(\"/\"))\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    return result_numerator % result_denominator == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "return len([x for x in nums if x > 10 and isOdd(x)])"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1 + 1:index2])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(even_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(i-j) for i,j in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = ''\n    max_strength = -float('inf')\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(len(b)):\n            b = b[1:]+b[0]\n            if b in a:\n                return True\n        return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix',\n        10: 'x', 40: 'xl', 50: 'l', 90: 'xc',\n        100: 'c', 400: 'cd', 500: 'd', 900: 'cm',\n        1000: 'm'\n    }\n    result = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result"}
{"idx": 157, "completion": "# Sort the sides to make sure c is the longest side\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of squares of \n    # the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: len(set(x)))"}
{"idx": 159, "completion": "# Your code goes here\n    eaten = number + min(need, remaining)\n    left = max(remaining - need, 0)\n    return [eaten, left]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    # Return the final result\n    return result"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the loop\n    if a > b:\n        a, b = b, a\n\n    # Collect even digits\n    even_digits = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n\n    # Remove duplicates and sort\n    even_digits = sorted(set(even_digits))\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n            current_group += char\n        elif char == \")\":\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                paren_groups.append(current_group)\n                current_group = \"\"\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if len(numbers) == 0:\n        raise ValueError(\"The list of numbers is empty.\")\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for index, element in enumerate(numbers):\n        result.append(element)\n        if index != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "# TODO: Write your code here\n    pass"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string), -1, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if len(strings) == 0:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Your code here\n    pass"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string) - len(substring) + 1) if string[i:i + len(substring)] == substring)"}
{"idx": 19, "completion": "return ' '.join(sorted(numbers.split(), key=lambda x: 'zero one two three four five six seven eight nine'.split().index(x)))"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(n - min_number) / (max_number - min_number) for n in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "pass"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    k = 2\n    while k < n:\n        if n % k == 0:\n            return False\n        k += 1\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0, \"len(xs) should be even\"\n    assert xs[-1] != 0, \"largest non zero coefficient should be the last element\"\n    a = 1\n    b = 1\n    c = xs[-1]\n    d = xs[-2]\n    while True:\n        if a > b:\n            return b\n        m = (a + b) / 2\n        if poly(xs, m) == 0:\n            return m\n        elif poly(xs, m) * poly(xs, a) < 0:\n            b = m\n        else:\n            a = m"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fibs = [0, 1]\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        fibs[0], fibs[1] = fibs[1], fibs[0] + fibs[1]\n        if is_prime(fibs[1]):\n            prime_fibs.append(fibs[1])\n    return prime_fibs[-1]"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join([str(digit) for digit in digits[::-1]])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n > 2:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "assert n > 1 and not is_prime(n), \"Input must be a non-prime number greater than 1.\"\n    factors = prime_factors(n)\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s.lower() if char in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # In case shift is larger than the number of digits\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into words and filter out the numbers\n    numbers = [int(num) for num in s.split() if num.isdigit()]\n    # Calculate the number of mango fruits\n    mango_fruits = n - sum(numbers)\n    return mango_fruits"}
{"idx": 68, "completion": "# Your code here\n    pass"}
{"idx": 69, "completion": "# Your code here\n    pass"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        # Append the minimum value\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            # Append the maximum value of the remaining list\n            result.append(sorted_lst.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round((s * (s - a) * (s - b) * (s - c)) ** 0.5, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1./3.) == int(a**(1./3.))"}
{"idx": 78, "completion": "# Your code here\n    # Create a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is in the set of prime digits, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2"}
{"idx": 81, "completion": "# Your code here\n    grades_list = []\n    for grade in grades:\n        if grade == 4.0:\n            grades_list.append('A+')\n        elif grade > 3.7:\n            grades_list.append('A')\n        elif grade > 3.3:\n            grades_list.append('A-')\n        elif grade > 3.0:\n            grades_list.append('B+')\n        elif grade > 2.7:\n            grades_list.append('B')\n        elif grade > 2.3:\n            grades_list.append('B-')\n        elif grade > 2.0:\n            grades_list.append('C+')\n        elif grade > 1.7:\n            grades_list.append('C')\n        elif grade > 1.3:\n            grades_list.append('C-')\n        elif grade > 1.0:\n            grades_list.append('D+')\n        elif grade > 0.7:\n            grades_list.append('D')\n        elif grade > 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate using the formula\n    return 2 * (10 ** (n - 1)) - 10**(n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each character in the binary string\n    for digit in binary:\n        # Convert the character back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if i % 2 == 1 and e % 2 == 0)"}
{"idx": 86, "completion": "words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "# Your code goes here\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda x: x[0])\n    result.sort(key=lambda x: x[1], reverse=True)\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    sum = first + last\n    if sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) + 4) % 26\n            encrypted += alphabet[index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n\n    for sentence in sentences:\n        # Trim leading and trailing whitespace\n        sentence = sentence.strip()\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count"}
{"idx": 92, "completion": "return x + y == z or x + z == y or y + z == x and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message += vowels[(index + 2) % len(vowels)]\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for number in range(2, n):\n        if is_prime(number):\n            primes.append(number)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)"}
{"idx": 100, "completion": "stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n\n    # Iterate from y to x, in reverse order\n    for i in range(y, x - 1, -1):\n        # Check if i is even\n        if i % 2 == 0:\n            return i\n\n    # If no even number is found\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "# Dictionary to map digits to their corresponding names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map the array\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Map the filtered, sorted, reversed array to their names\n    result = [digit_names[x] for x in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for n in arr if sum(int(d) for d in str(abs(n))) > 0)"}
{"idx": 109, "completion": "# check if the array is empty\n    if len(arr) == 0:\n        return True\n\n    # find the index of the smallest element\n    min_index = arr.index(min(arr))\n\n    # check if the array is already sorted\n    if arr == sorted(arr):\n        return True\n\n    # check if the array can be sorted by performing right shift operation\n    for i in range(min_index, len(arr) + min_index):\n        if arr[i % len(arr)] > arr[(i + 1) % len(arr)]:\n            return False\n    return True"}
{"idx": 110, "completion": "# Your implementation here\n    return \"YES\" if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0 else \"NO\""}
{"idx": 111, "completion": "# Convert the string into a list of characters\n    letters = test.split()\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    # Iterate over the items in the original dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the result dictionary\n        if count == max_count:\n            result[letter] = count\n    # Return the result dictionary\n    return result"}
{"idx": 112, "completion": "for i in c:\n        s=s.replace(i,'')\n    return (s, s == s[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        sum(c in '13579' for c in s), i, i, i) for i, s in enumerate(lst)]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code here\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "return [i for i in s.split() if sum(1 for j in i if j.lower() in \"bcdfghjklmnpqrstvwxyz\") == n]"}
{"idx": 118, "completion": "# Your code goes here\n    vowels = 'aeiouAEIOU'\n    closest_vowel = ''\n    found_vowel = False\n\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            closest_vowel = word[i]\n            found_vowel = True\n            break\n\n    return closest_vowel if found_vowel else ''"}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for parens in lst:\n        for p in parens:\n            if p == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum(n for i, n in enumerate(lst) if i % 2 == 0 and n % 2 != 0)"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 10 <= x <= 99)"}
{"idx": 123, "completion": "# Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    # Loop indefinitely until we reach 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        # Apply the Collatz function\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    # Add 1 to the list as it is always the last element in the sequence\n    odd_numbers.append(1)\n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            if i > 0 and lst[i] == lst[i - 1]:\n                return False\n    return True"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    # Calculate the product of the signs\n    sign_product = 1\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n            break\n    # Calculate the sum of the magnitudes\n    magnitude_sum = sum(abs(num) for num in arr)\n    # Return the product of the signs and the sum of the magnitudes\n    return sign_product * magnitude_sum"}
{"idx": 129, "completion": "N = len(grid)\n    if N == 1:\n        return [grid[0][0]] * k\n    if k == 1:\n        return [grid[i][j] for i in range(N) for j in range(N) if grid[i][j] == 1][0]\n\n    # Get the minimum value in the grid\n    min_val = min(map(min, grid))\n    # Get the minimum value's coordinates\n    min_coords = [(i, j) for i in range(N) for j in range(N) if grid[i][j] == min_val]\n    # Initialize the result list with the minimum value\n    result = [min_val] * k\n\n    # Iterate over the minimum value's coordinates\n    for i, j in min_coords:\n        # Initialize the current path with the minimum value\n        path = [grid[i][j]] * k\n        # Initialize the current path's length\n        path_len = 1\n        # Initialize the current path's index\n        path_idx = 1\n        # Initialize the current path's value\n        path_val = grid[i][j]\n        # Initialize the current path's neighbors\n        neighbors = [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]\n        # Iterate over the current path's neighbors\n        for ni, nj in neighbors:\n            # If the neighbor is in the grid\n            if 0 <= ni < N and 0 <= nj < N:\n                # Get the neighbor's value\n                n_val = grid[ni][nj]\n                # If the neighbor's value is less than the current path's value\n                if n_val < path_val:\n                    # Update the current path's value\n                    path_val = n_val\n                    # Update the current path's index\n                    path_idx = 1\n                    # Update the current path's length\n                    path_len = 1\n                    # Update the current path\n                    path = [path_val] * k\n                    # Update the current path's neighbors\n                    neighbors = [(ni-1, nj), (ni+1, nj), (ni, nj-1), (ni, nj+1)]\n                # If the neighbor's value is equal to the current path's value\n                elif n_val == path_val:\n                    # Update the current path's index\n                    path_idx += 1\n                    # Update the"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n    if not has_odd:\n        return 0\n    return product"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # If the stack is not empty, it means there is at least one nested bracket\n    return bool(stack)"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] not in \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to numbers if necessary\n    if isinstance(a, str):\n        a = convert_to_number(a)\n    if isinstance(b, str):\n        b = convert_to_number(b)\n    \n    # Compare the numbers\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_numerator, x_denominator = map(int, x.split('/'))\n    n_numerator, n_denominator = map(int, n.split('/'))\n    return (x_numerator * n_numerator) % (x_denominator * n_denominator) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: sum(int(digit) for digit in str(abs(x))))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10 and isOddFirstLastDigit(num):\n            count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    else:\n        return planets[planet1_index+1:planet2_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(even_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]\n    pass"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of numbers to their roman numeral counterparts\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n\n    roman_string = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_string += symbol\n            number -= value\n\n    return roman_string"}
{"idx": 157, "completion": "sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code goes here\n    total_eaten = number + min(need, remaining)\n    remaining -= min(need, remaining)\n    return [total_eaten, remaining]"}
{"idx": 160, "completion": "# Convert the operator list to a list of functions\n    ops = {\n        '+': operator.add,\n        '-': operator.sub,\n        '*': operator.mul,\n        '//': operator.floordiv,\n        '**': operator.pow\n    }\n    # Initialize the result with the first operand\n    result = operand[0]\n    # Iterate over the operators and operands\n    for i in range(len(operator)):\n        result = ops[operator[i]](result, operand[i+1])\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the loop\n    if a > b:\n        a, b = b, a\n\n    # Collect even digits\n    even_digits = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n\n    # Remove duplicates and sort\n    even_digits = sorted(set(even_digits))\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n            current_group += char\n        elif char == \")\":\n            depth -= 1\n            current_group += char\n            if depth == 0:\n                paren_groups.append(current_group)\n                current_group = \"\"\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    for paren_group in paren_string.split(')('):\n        max_depth = 0\n        current_depth = 0\n        for paren in paren_group:\n            if paren == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif paren == ')':\n                current_depth -= 1\n        paren_list.append(max_depth)\n    return paren_list"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        current_max = max(current_max, number)\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            break\n\n    return string + string[i:][::-1]"}
{"idx": 11, "completion": "return ''.join([str(int(a[i]) ^ int(b[i])) for i in range(len(a))])"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)  # type: ignore"}
{"idx": 13, "completion": "while a != 0 and b != 0:\n        if a > b:\n            a = a % b\n        else:\n            b = b % a\n    return a + b"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "return ' '.join(sorted(numbers.split(), key=lambda x: 'zero one two three four five six seven eight nine'.index(x)))"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_diff = float('inf')\n    closest_pair = (None, None)\n\n    for i in range(len(numbers) - 1):\n        current_diff = numbers[i + 1] - numbers[i]\n        if current_diff < smallest_diff:\n            smallest_diff = current_diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    seen_twice = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n        elif number not in seen_twice:\n            seen_twice.add(number)\n            result.append(None)\n    return [x for x in result if x is not None]  # type: ignore"}
{"idx": 27, "completion": "return string.swapcase()"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [x for x in l if x > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have a non zero last coefficient\")\n    if xs[-1] > 0:\n        return find_zero_helper(xs, -1000, 0)\n    else:\n        return find_zero_helper(xs, 0, 1000)"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_list.append(l[i])\n    even_list.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_list[j]\n            j += 1\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    a, b = 0, 1\n    fib_num = 0\n    count = 0\n    while True:\n        fib_num = a + b\n        a, b = b, fib_num\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "return bin(x)[2:] if base == 2 else oct(x)[2:]"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "return sorted(l)[len(l) // 2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return modp(n-1, p)*2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Start from the largest possible factor and work downwards\n    for factor in range(int(n**0.5), 1, -1):\n        if n % factor == 0 and is_prime(factor):\n            return factor"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "count = 0\n    vowels = \"aeiou\"\n    s = s.lower()\n    for char in s:\n        if char in vowels:\n            count += 1\n    if s.endswith('y'):\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    l = len(s)\n    if shift >= l:\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the words and count the number of apples and oranges\n    for i in range(len(words)):\n        if words[i] == 'apples':\n            apples = int(words[i-1])\n        elif words[i] == 'oranges':\n            oranges = int(words[i-1])\n    # Calculate the number of mango fruits\n    mangoes = n - apples - oranges\n    return mangoes"}
{"idx": 68, "completion": "smallest_even = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_index]"}
{"idx": 69, "completion": "# Your code here\n    # Create a dictionary to store the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n\n    # Iterate through the dictionary to find the greatest integer that meets the condition\n    for num in sorted(freq.keys(), reverse=True):\n        if num <= freq[num]:\n            return num\n    return -1"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_list = sorted(lst)\n    result = []\n    # While the sorted list is not empty\n    while sorted_list:\n        # Append the minimum value to the result list\n        result.append(sorted_list.pop(0))\n        # If the sorted list is not empty, append the maximum value to the result list\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result"}
{"idx": 71, "completion": "# Sort the sides to make it easier to check the triangle inequality theorem\n    a, b, c = sorted([a, b, c])\n    # Check if the sides form a valid triangle\n    if a + b > c:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"}
{"idx": 74, "completion": "# Your code here\n    # Use the sum() function to count the total number of characters in each list\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    # Compare the total number of characters in the two lists\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True"}
{"idx": 77, "completion": "return int(round(a ** (1. / 3))) ** 3 == a"}
{"idx": 78, "completion": "# Your code here\n    # Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize the count of prime digits\n    prime_count = 0\n    # Iterate over each digit in the hexadecimal number\n    for digit in num:\n        # If the digit is a prime digit, increment the count\n        if digit in prime_hex_digits:\n            prime_count += 1\n    # Return the count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2"}
{"idx": 81, "completion": "grades_list = []\n    for gpa in grades:\n        if gpa == 4.0:\n            grades_list.append('A+')\n        elif gpa > 3.7:\n            grades_list.append('A')\n        elif gpa > 3.3:\n            grades_list.append('A-')\n        elif gpa > 3.0:\n            grades_list.append('B+')\n        elif gpa > 2.7:\n            grades_list.append('B')\n        elif gpa > 2.3:\n            grades_list.append('B-')\n        elif gpa > 2.0:\n            grades_list.append('C+')\n        elif gpa > 1.7:\n            grades_list.append('C')\n        elif gpa > 1.3:\n            grades_list.append('C-')\n        elif gpa > 1.0:\n            grades_list.append('D+')\n        elif gpa > 0.7:\n            grades_list.append('D')\n        elif gpa > 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate the count\n    # There are 9 * 10^(n-2) ways to fill the middle with any digits 0-9\n    # There are 2 * 10^(n-1) ways to start or end with 1, but we've double counted\n    # the numbers that start and end with 1, so we subtract the count for n-2\n    return 2 * 10**(n-1) - 10**(n-2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Split the binary string into a list of digits\n    digits = list(binary)\n    # Sum the digits\n    total = sum(int(digit) for digit in digits)\n    # Convert the total to binary and return it\n    return format(total, 'b')"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "return ' '.join(''.join(sorted(word)) for word in s.split())"}
{"idx": 87, "completion": "# Your code here\n    return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first = array[0]\n    last = array[-1]\n    sum_ = first + last\n    if sum_ % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    result = ''\n    for char in s:\n        if char in alphabet:\n            index = (alphabet.index(char) + 4) % 26\n            result += alphabet[index]\n        else:\n            result += char\n    return result"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"idx": 92, "completion": "if (x + y == z) and (type(x) == int and type(y) == int and type(z) == int):\n        return True\n    elif (x + z == y) and (type(x) == int and type(y) == int and type(z) == int):\n        return True\n    elif (y + z == x) and (type(x) == int and type(y) == int and type(z) == int):\n        return True\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(largest_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a%10) * (b%10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return math.ceil(value - 0.5)\n    else:\n        return math.floor(value + 0.5)"}
{"idx": 100, "completion": "stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Check if y is even and in the range [x, y]\n    if y >= x and y % 2 == 0:\n        return y\n    # Check if x is even and in the range [x, y]\n    if x % 2 == 0:\n        return x\n    # If none of the above conditions are met, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any([int(digit) % 2 == 0 for digit in str(i)])])"}
{"idx": 105, "completion": "number_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_sorted_reversed = sorted([i for i in arr if 1 <= i <= 9], reverse=True)\n    return [number_names[i-1] for i in filtered_sorted_reversed]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for x in arr if sum_of_digits(x) > 0)"}
{"idx": 109, "completion": "# Sort the array\n    arr.sort()\n    # Check if the sorted array is equal to the original array after performing\n    # a right shift operation\n    return arr == arr[-1:] + arr[:-1]"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) or any(x % 2 == 0 for x in lst2) else \"NO\""}
{"idx": 111, "completion": "# Convert the string into a list of characters\n    chars = test.split()\n    # Create a dictionary to store the count of each character\n    char_count = {}\n    # Iterate over the list of characters\n    for char in chars:\n        # If the character is already in the dictionary, increment its count\n        if char in char_count:\n            char_count[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            char_count[char] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(char_count.values())\n    # Create a new dictionary to store the characters with the maximum count\n    result = {}\n    # Iterate over the items in the original dictionary\n    for char, count in char_count.items():\n        # If the count is equal to the maximum count, add the character and count to the result dictionary\n        if count == max_count:\n            result[char] = count\n    # Return the result dictionary\n    return result"}
{"idx": 112, "completion": "result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s,s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code here\n    wells = len(grid)\n    buckets = 0\n    for well in grid:\n        buckets += math.ceil(sum(well) / capacity)\n    return buckets"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''"}
{"idx": 119, "completion": "# Your code here\n    # You can use the following code to check if a string is balanced or not\n    def is_balanced(s):\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return len(stack) == 0\n\n    # Check if the first string is balanced\n    if is_balanced(lst[0]):\n        return 'Yes'\n    # Check if the second string is balanced\n    elif is_balanced(lst[1]):\n        return 'Yes'\n    # Check if the concatenation of the two strings is balanced\n    elif is_balanced(lst[0] + lst[1]) or is_balanced(lst[1] + lst[0]):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])"}
{"idx": 122, "completion": "# Your code here\n    pass"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1, which is odd.\n    return sorted(set(sequence))  # Remove duplicates and sort the list."}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"idx": 126, "completion": "return sorted(set(lst)) == sorted(lst) and len(set(lst)) == len(lst)"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start\n        return \"YES\" if is_prime(length) else \"NO\""}
{"idx": 128, "completion": "if len(arr) == 0:\n        return None\n\n    product = 1\n    sum_of_magnitudes = 0\n\n    for num in arr:\n        if num == 0:\n            return 0\n        product *= 1 if num > 0 else -1\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product"}
{"idx": 129, "completion": "N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set()\n    heap = []\n    heapq.heappush(heap, (grid[0][0], 0, 0))\n    while heap:\n        val, x, y = heapq.heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if len(visited) == k:\n            return [grid[x][y] for x, y in visited]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n    return []"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n    if not has_odd:\n        return 0\n    return product"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        else:\n            return False\n    # If the stack is not empty, it means there is at least one nested bracket\n    return bool(stack)"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] != \" \":\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Filter the list to get only negative and positive integers\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    # Find the largest negative and smallest positive integers\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to float or int if necessary\n    if isinstance(a, str):\n        try:\n            a = float(a.replace(',', '.'))\n        except ValueError:\n            return None\n    if isinstance(b, str):\n        try:\n            b = float(b.replace(',', '.'))\n        except ValueError:\n            return None\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is even and greater than or equal to the smallest possible sum of 4 even numbers (2+2+2+2=8)\n    return n % 2 == 0 and n >= 8"}
{"idx": 139, "completion": "if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1) if planet1 in planets else -1\n    planet2_index = planets.index(planet2) if planet2 in planets else -1\n    if planet1_index == -1 or planet2_index == -1:\n        return tuple()\n    else:\n        return tuple(planets[planet1_index + 1:planet2_index]) if planet1_index < planet2_index else tuple()"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [string for string in lst if len(string) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(1,len(b)):\n            b = b[1:]+b[0]\n            if b in a:\n                return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to their Roman numeral counterparts.\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "# Sort the list in lexicographical order\n    words.sort()\n    # Initialize the maximum number of unique characters to 0\n    max_unique = 0\n    # Initialize the word with maximum number of unique characters to None\n    max_word = None\n    # Iterate over the words in the list\n    for word in words:\n        # Count the number of unique characters in the word\n        unique = len(set(word))\n        # If the number of unique characters is greater than the current maximum,\n        # update the maximum and the word with maximum number of unique characters\n        if unique > max_unique:\n            max_unique = unique\n            max_word = word\n    # Return the word with maximum number of unique characters\n    return max_word"}
{"idx": 159, "completion": "# Your code here\n    eaten = number + min(need, remaining)\n    remaining -= need\n    return [eaten, max(remaining, 0)]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    # Iterate through the operators\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    # Return the final result\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the loop\n    if a > b:\n        a, b = b, a\n\n    # Collect even digits\n    even_digits = []\n    for num in range(a, b + 1):\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                even_digits.append(int(digit))\n\n    # Return the sorted list of even digits\n    return sorted(even_digits)"}
