{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "pass"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i, number in enumerate(numbers):\n        result.append(number)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_groups = paren_string.split()\n    depths = []\n    for group in paren_groups:\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        depths.append(max_depth)\n    return depths"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    else:\n        sum_ = 0\n        product = 1\n        for number in numbers:\n            sum_ += number\n            product *= number\n        return (sum_, product)"}
{"idx": 9, "completion": "return [max(numbers[:i]) for i in range(1, len(numbers) + 1)]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if c == 'o' else 2 if c == 'o|' else 1 for c in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "numbers = numbers.split()\n    numbers = [str(i) for i in range(10) if str(i) in numbers]\n    numbers.sort()\n    return ' '.join(numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_diff = float(\"inf\")\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "pass"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "return ''.join(c.swapcase() for c in string)"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"find_zero only takes list xs having even number of coefficients\")\n    if not xs[-1]:\n        raise ValueError(\"find_zero only takes list xs having largest non zero coefficient\")\n    return find_zero_helper(xs, 0, len(xs) - 1)"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_list.append(l[i])\n    even_list.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_list[j]\n            j += 1\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fibonacci(n):\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + b\n        return a\n\n    num = 0\n    fib_num = 0\n    while num < n:\n        fib_num = fibonacci(num)\n        if is_prime(fib_num):\n            num += 1\n        if num == n:\n            return fib_num"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        target = -num\n        if target in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "return bin(x)[2:] if base == 2 else oct(x)[2:]"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])  # type: ignore"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "# Start from the smallest prime number\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate its digits\n    digits = str(x)\n    num_digits = len(digits)\n\n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # In case shift is larger than the number of digits\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # If the word is \"apples\", add 1 to the count of apples\n        if words[i] == \"apples\":\n            apples += int(words[i-1])\n        # If the word is \"oranges\", add 1 to the count of oranges\n        elif words[i] == \"oranges\":\n            oranges += int(words[i-1])\n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    # Return the number of mango fruits\n    return mango"}
{"idx": 68, "completion": "# YOUR CODE HERE\n    return [0, 0] if arr == [] else [min([i for i in arr if i % 2 == 0]), arr.index(min([i for i in arr if i % 2 == 0]))]"}
{"idx": 69, "completion": "# Your code here\n    # create a dictionary to store the frequency of each number\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # find the greatest number that has a frequency greater than or equal to its value\n    for num in sorted(freq.keys(), reverse=True):\n        if freq[num] >= num:\n            return num\n    # if no such number exists, return -1\n    return -1"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    result = []\n    # While the sorted list is not empty\n    while sorted_lst:\n        # Append the minimum value to the result list\n        result.append(sorted_lst.pop(0))\n        # If the sorted list is not empty\n        if sorted_lst:\n            # Append the maximum value to the result list\n            result.append(sorted_lst.pop())\n    # Return the result list\n    return result"}
{"idx": 71, "completion": "# Sort the sides\n    a, b, c = sorted([a, b, c])\n    # Check if the sides form a valid triangle\n    if a + b > c:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    if n == 0:\n        return False\n    if n == -1:\n        return x == -1\n    if n < 0:\n        n = -n\n    if x < 0:\n        x = -x\n    if x == 0:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"idx": 77, "completion": "return a**(1./3.) == round(a**(1./3.))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime hex digit, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return \"db\" + bin(decimal)[2:] + \"db\""}
{"idx": 80, "completion": "return len(s) >= 3 and all(s[i] != s[i+1] and s[i] != s[i+2] and s[i+1] != s[i+2] for i in range(len(s)-2))"}
{"idx": 81, "completion": "return [letter_grade(gpa) for gpa in grades]"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate the count\n    # There are 9 * 10^(n-2) numbers that start with 1 (10^(n-1) total starting with 1)\n    # and 10^(n-1) numbers that end with 1 (10^(n-1) total ending with 1).\n    # However, we must subtract the count of numbers that both start and end with 1 to avoid double-counting.\n    count_starting = 10 ** (n - 1)\n    count_ending = 10 ** (n - 1)\n    count_both = 10 ** (n - 2)\n    return count_starting + count_ending - count_both"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary_str = format(N, 'b')\n    # Compute the sum of digits in binary\n    sum_digits = sum(int(digit) for digit in binary_str)\n    # Convert the sum to binary and return\n    return format(sum_digits, 'b')"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if e % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "return ' '.join(''.join(sorted(word)) for word in s.split(' '))"}
{"idx": 87, "completion": "return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + (2 * 2)) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "# Your code here\n    pass"}
{"idx": 91, "completion": "return len(re.findall(r\"^[Ii].\", S, re.MULTILINE))"}
{"idx": 92, "completion": "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return x + y == z or x + z == y or y + z == x\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                encoded_message += vowels[(index + 2) % 5]\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == 0:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case_keys = 0\n    upper_case_keys = 0\n\n    for key in dict:\n        if isinstance(key, str):\n            if key.islower():\n                lower_case_keys += 1\n            elif key.isupper():\n                upper_case_keys += 1\n\n    return lower_case_keys == len(dict) or upper_case_keys == len(dict)"}
{"idx": 96, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "stones = [n]\n    for _ in range(1, n):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 2)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"idx": 101, "completion": "return re.findall(r'\\b\\w+\\b', s.replace(',', ' '))"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Iterate from y to x to find the biggest even number\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if all([int(d) % 2 for d in str(i)])])"}
{"idx": 105, "completion": "digit_names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    filtered_arr = [str(x) for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr, reverse=True)\n    result = [digit_names[int(num) - 1] for num in sorted_arr]\n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            return -sum(int(d) for d in str(n)[1:])\n        else:\n            return sum(int(d) for d in str(n))\n    return sum(1 for n in arr if sum_of_digits(n) > 0)"}
{"idx": 109, "completion": "# Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the index where the array breaks the non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            # Perform a right shift operation\n            arr = arr[i + 1:] + arr[:i + 1]\n            # Check if the array is now non-decreasing\n            for j in range(len(arr) - 1):\n                if arr[j] > arr[j + 1]:\n                    return False\n            return True\n\n    # If the array is already non-decreasing, return True\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if len(lst1) == len([x for x in lst1 if x % 2 == 0]) else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    \n    # Iterate through the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    \n    # Create a new dictionary to store the letters with the maximum count\n    result = {}\n    \n    # Iterate through the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the result dictionary\n        if count == max_count:\n            result[letter] = count\n    \n    return result"}
{"idx": 112, "completion": "result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')\n    ) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "return sum([math.ceil(sum(well)/capacity) for well in grid])"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "# Your code here\n    open_parens = 0\n    close_parens = 0\n    for i in lst:\n        for j in i:\n            if j == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if 10 <= x < 100 or 0 <= x < 10])"}
{"idx": 123, "completion": "odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:  # Check if n is odd\n            odd_numbers.append(n)\n        if n % 2 == 0:  # Check if n is even\n            n = n // 2\n        else:  # If n is odd\n            n = 3 * n + 1\n    odd_numbers.append(1)  # The sequence always ends with 1, which is odd.\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "try:\n        datetime.datetime.strptime(date, '%m-%d-%Y')\n        month, day, year = map(int, date.split('-'))\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except ValueError:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            if i > 0 and lst[i - 1] == lst[i]:\n                return False\n    return True"}
{"idx": 127, "completion": "# your code here\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start + 1\n    return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        prod *= 1 if num > 0 else -1\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * prod"}
{"idx": 129, "completion": "N = len(grid)\n    # Initialize the priority queue with all possible starting points\n    pq = [(grid[i][j], i, j) for i in range(N) for j in range(N)]\n    heapq.heapify(pq)\n    # Initialize the visited set to keep track of visited cells\n    visited = set()\n    # Initialize the result list to store the minimum path\n    result = []\n    # Initialize the current path length to 0\n    current_path_length = 0\n    # Initialize the current path to an empty list\n    current_path = []\n    # Initialize the current cell to None\n    current_cell = None\n    # Initialize the current row and column to None\n    current_row = None\n    current_col = None\n    # Initialize the current value to None\n    current_value = None\n    # Initialize the current index to None\n    current_index = None\n    # Initialize the current path length to None\n    current_path_length = None\n    # Initialize the current path to None\n    current_path = None\n    # Initialize the current cell to None\n    current_cell = None\n    # Initialize the current row and column to None\n    current_row = None\n    current_col = None\n    # Initialize the current value to None\n    current_value = None\n    # Initialize the current index to None\n    current_index = None\n    # Initialize the current path length to None\n    current_path_length = None\n    # Initialize the current path to None\n    current_path = None\n    # Initialize the current cell to None\n    current_cell = None\n    # Initialize the current row and column to None\n    current_row = None\n    current_col = None\n    # Initialize the current value to None\n    current_value = None\n    # Initialize the current index to None\n    current_index = None\n    # Initialize the current path length to None\n    current_path_length = None\n    # Initialize the current path to None\n    current_path = None\n    # Initialize the current cell to None\n    current_cell = None\n    # Initialize the current row and column to None\n    current_row = None\n    current_col = None\n    # Initialize the current value to None\n    current_value = None\n    # Initialize the current index to None\n    current_index = None\n    # Initialize the current path length to None\n    current_path_length = None\n    # Initialize the current path to None"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n == 3:\n        return [1, 3, 2, 8]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n    if not has_odd:\n        return 0\n    return product"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n        elif char == ']' and not stack:\n            return False\n    return any(isinstance(x, list) for x in stack)"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare and return the larger value in its original type\n    if a > b:\n        return a if not isinstance(a, float) else str(a)\n    elif b > a:\n        return b if not isinstance(b, float) else str(b)\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "def isOdd(num):\n        return num % 2 != 0\n\n    def firstAndLastDigitOdd(num):\n        strNum = str(abs(num))\n        firstDigit = int(strNum[0])\n        lastDigit = int(strNum[-1])\n        return isOdd(firstDigit) and isOdd(lastDigit)\n\n    return sum(1 for num in nums if num > 10 and firstAndLastDigitOdd(num))"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    planet1_index = planets.index(planet1) if planet1 in planets else -1\n    planet2_index = planets.index(planet2) if planet2 in planets else -1\n    \n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    \n    start_index = min(planet1_index, planet2_index) + 1\n    end_index = max(planet1_index, planet2_index)\n    \n    return tuple(planets[start_index:end_index])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(game[i]-guess[i]) for i in range(len(game))]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_string = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman_string += roman_numerals[value]\n            number -= value\n    return roman_string"}
{"idx": 157, "completion": "# Sort the sides to ensure the longest side is last\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares\n    # of the other two sides\n    return a**2 + b**2 == c**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Implement your solution here\n    # pass\n    total_eaten = number + min(need, remaining)\n    remaining -= min(need, remaining)\n    return [total_eaten, remaining]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Append the operator and the next operand to the expression\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    # Evaluate the expression\n    result = eval(expression)\n    \n    return result"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers\n    numbers = range(a, b + 1)\n\n    # Filter for even digits\n    even_digits = [int(i) for i in numbers if all(int(digit) % 2 == 0 for digit in str(i))]\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current_group += char\n        if depth == 0:\n            paren_groups.append(current_group)\n            current_group = ''\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError('The list of numbers is empty')\n\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    for paren_group in paren_string.split(')('):\n        paren_list.append(max([len(sub) for sub in paren_group.split(')(')]))\n    return paren_list"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n\n    return longest_str"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "# Convert the string of number words into a list of integers\n    numbers_list = [int(number) for number in numbers.split()]\n    # Sort the list of integers\n    numbers_list.sort()\n    # Convert the sorted list of integers back into a string\n    sorted_numbers = ' '.join(str(number) for number in numbers_list)\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    min_diff = float('inf')\n    closest_pair = None\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [string for string in strings if string.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have even number of coefficients\")\n    if not any(xs):\n        raise ValueError(\"xs must have a non zero coefficient\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    else:\n        return find_zero_helper(xs, -100, 100)"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_list.sort()\n    l_prime = l.copy()\n    for i in range(len(l_prime)):\n        if i % 2 == 0:\n            l_prime[i] = even_list.pop(0)\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 1, 1\n    found = 0\n    while True:\n        if is_prime(fib2):\n            found += 1\n            if found == n:\n                return fib2\n        fib1, fib2 = fib2, fib1 + fib2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set()\n    for e in l:\n        if -e in s:\n            return True\n        s.add(e)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        return (l_sorted[n // 2 - 1] + l_sorted[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n//2, p)**2 % p\n    else:\n        return modp(n-1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            open_brackets += 1\n        elif bracket == \")\":\n            open_brackets -= 1\n            if open_brackets < 0:\n                return False\n    return open_brackets == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "# Your code goes here (try to solve it without using count function)"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # In case shift is larger than the number of digits\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    \n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Iterate through the words and count the number of apples and oranges\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    \n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    \n    return mango"}
{"idx": 68, "completion": "# your code here\n    pass"}
{"idx": 69, "completion": "# Your code here\n    pass"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_list = sorted(lst)\n    result = []\n    # Loop until the sorted list is empty\n    while sorted_list:\n        # Append the minimum value\n        result.append(sorted_list.pop(0))\n        # If the list is not empty, append the maximum value\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if a % i == 0:\n            primes.append(i)\n    return len(primes) == 3 and all(map(lambda x: all(x % i for i in range(2, int(x**0.5) + 1)), primes))"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x /= n\n    return True"}
{"idx": 77, "completion": "return a**(1./3.) == round(a**(1./3.))"}
{"idx": 78, "completion": "# Your code here\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate through each character in the input string\n    for char in num:\n        # If the character is in the set of prime hexadecimal digits, increment the counter\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return \"db\" + bin(decimal)[2:] + \"db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    # For n > 1, calculate the count\n    total_numbers = 9 * (10 ** (n - 1))  # Total n-digit numbers\n    numbers_start_or_end_with_1 = 2 * (10 ** (n - 1)) - 10 ** (n - 2)  # Subtract the overlap (numbers that start AND end with 1)\n    return numbers_start_or_end_with_1"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary_str = bin(N)[2:]\n    # Calculate the sum of digits\n    sum_of_digits = sum(int(digit) for digit in binary_str)\n    # Convert the sum to binary\n    sum_binary = bin(sum_of_digits)[2:]\n    return sum_binary"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, col in enumerate(row):\n            if col == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char.lower())\n            new_index = (index + 4) % 26\n            new_char = alphabet[new_index]\n            if char.isupper():\n                new_char = new_char.upper()\n            encrypted += new_char\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = set(lst)\n    lst.remove(min(lst))\n    if not lst:\n        return None\n    return min(lst)"}
{"idx": 91, "completion": "return sum(1 for sentence in S.split('.').split('?').split('!') if sentence.strip().startswith('I'))"}
{"idx": 92, "completion": "if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            elif char.isupper():\n                encoded_message += char.lower()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 2) % len(vowels)]\n                if char.islower():\n                    encoded_message += new_char.lower()\n                else:\n                    encoded_message += new_char.upper()\n            else:\n                encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    if max_prime == 0:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n    return lower_case or upper_case"}
{"idx": 96, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "# Initialize the list with the number of stones in the first level\n    pile = [n]\n    # Calculate the number of stones for each subsequent level\n    for i in range(1, n):\n        # Determine the next number based on the parity of the current level's stones\n        next_stones = pile[i-1] + 2 if pile[i-1] % 2 == 0 else pile[i-1] + 2\n        pile.append(next_stones)\n    return pile"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Loop through the range [x, y] in reverse\n    for i in range(y, x - 1, -1):\n        # Check if the number is even\n        if i % 2 == 0:\n            return i\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    filtered_and_sorted = sorted([x for x in arr if 1 <= x <= 9])\n    reversed_and_filtered = filtered_and_sorted[::-1]\n    return [num_to_word[num] for num in reversed_and_filtered]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def is_even(x):\n        return x % 2 == 0\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if is_even(i):\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for x in arr if sum(int(d) for d in str(abs(x))) > 0)"}
{"idx": 109, "completion": "# check if the array is empty\n    if not arr:\n        return True\n    \n    # get the length of the array\n    n = len(arr)\n    \n    # iterate through the array to find the point where the array is no longer\n    # sorted in non-decreasing order\n    for i in range(n-1):\n        if arr[i] > arr[i+1]:\n            # perform a right shift operation\n            arr = arr[i+1:] + arr[:i+1]\n            # check if the array is sorted in non-decreasing order after the\n            # right shift operation\n            for j in range(n-1):\n                if arr[j] > arr[j+1]:\n                    return False\n            return True\n    return True"}
{"idx": 110, "completion": "lst1 = sorted(lst1)\n    lst2 = sorted(lst2)\n    for i in range(len(lst1)):\n        if lst1[i] % 2 != 0:\n            for j in range(len(lst2)):\n                if lst2[j] % 2 == 0:\n                    lst1[i], lst2[j] = lst2[j], lst1[i]\n                    break\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"idx": 111, "completion": "# Convert the string into a list of letters\n    letters = test.split()\n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    # Iterate over the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    max_count_letters = {}\n    # Iterate over the items in the original dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the new dictionary\n        if count == max_count:\n            max_count_letters[letter] = count\n    # Return the new dictionary\n    return max_count_letters"}
{"idx": 112, "completion": "result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code goes here\n    # Please delete the 'pass' and write your code\n    pass"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "# Your code here\n    open_parens = 0\n    close_parens = 0\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])"}
{"idx": 122, "completion": "result = 0\n    for i in range(k):\n        if arr[i] >= 0 and arr[i] < 100:\n            result += arr[i]\n    return result"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(set(sequence))"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        if len(date) != 3:\n            return False\n        month, day, year = date\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return sum([1 for letter in txt if letter.islower() and (ord(letter) - ord(\"a\")) % 2 == 1])"}
{"idx": 126, "completion": "return lst == sorted(set(lst))"}
{"idx": 127, "completion": "# your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    else:\n        intersection_start = max(start1, start2)\n        intersection_end = min(end1, end2)\n        intersection_length = intersection_end - intersection_start\n        if intersection_length <= 1:\n            return \"NO\"\n        for i in range(2, intersection_length):\n            if intersection_length % i == 0:\n                return \"NO\"\n        return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        prod *= 1 if num > 0 else -1\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * prod"}
{"idx": 129, "completion": "N = len(grid)\n    if N == 1:\n        return [grid[0][0]] * k\n    if N == 2:\n        if k == 1:\n            return [grid[0][0]]\n        if k == 2:\n            return [grid[0][0], grid[1][1]]\n        if k == 3:\n            return [grid[0][0], grid[0][1], grid[1][1]]\n        if k == 4:\n            return [grid[0][0], grid[1][0], grid[1][1], grid[0][1]]\n    if N == 3:\n        if k == 1:\n            return [grid[0][0]]\n        if k == 2:\n            return [grid[0][0], grid[1][1]]\n        if k == 3:\n            return [grid[0][0], grid[1][0], grid[2][0]]\n        if k == 4:\n            return [grid[0][0], grid[1][0], grid[2][0], grid[2][1]]\n        if k == 5:\n            return [grid[0][0], grid[1][0], grid[2][0], grid[2][1], grid[2][2]]\n        if k == 6:\n            return [grid[0][0], grid[1][0], grid[2][0], grid[2][1], grid[1][1], grid[0][1]]\n        if k == 7:\n            return [grid[0][0], grid[1][0], grid[2][0], grid[2][1], grid[1][1], grid[0][1], grid[0][2]]\n        if k == 8:\n            return [grid[0][0], grid[1][0], grid[2][0], grid[2][1], grid[1][1], grid[0][1], grid[0][2], grid[1][2]]\n        if k == 9:\n            return [grid[0][0], grid[1][0], grid[2][0], grid[2][1], grid[1][1], grid[0][1], grid[0][2], grid[1][2], grid[2][2]]\n    if N == 4:\n        if k == 1"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n > 2:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n    if not has_odd:\n        return 0\n    return product"}
{"idx": 132, "completion": "# Your code here\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack:\n                return False\n            stack.pop()\n            if stack and stack[-1] == '[':\n                return True\n    return False"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return txt and txt[-1].isalpha() and not txt[-1] in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats for comparison, keeping track of the original type\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a == b:\n        return None\n    elif a > b:\n        return a if not isinstance(a, float) else str(a).replace('.', ',')\n    else:\n        return b if not isinstance(b, float) else str(b).replace('.', ',')"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return True"}
{"idx": 139, "completion": "# Your code here\n    if n == 1:\n        return 1\n    else:\n        return math.factorial(n) * special_factorial(n-1)"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    return result_num % result_den == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "# Your code here\n    count = 0\n    for num in nums:\n        if num > 10:\n            str_num = str(num)\n            first_digit = int(str_num[0])\n            last_digit = int(str_num[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return planets[planet1_index + 1: planet2_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "# your code here\n    return [abs(a-b) for a,b in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl',\n        50: 'l', 90: 'xc', 100: 'c', 400: 'cd', 500: 'd',\n        900: 'cm', 1000: 'm'\n    }\n    result = ''\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            result += roman_numerals[value]\n            number -= value\n    return result"}
{"idx": 157, "completion": "# Sort the sides to make comparison easier\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares\n    # of the other two sides\n    return a**2 + b**2 == c**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    eaten = number + min(need, remaining)\n    remaining = max(remaining - need, 0)\n    return [eaten, remaining]"}
{"idx": 160, "completion": "# Convert the operator list to a string representation\n    operator_str = ''.join([op for op in operator])\n    \n    # Convert the operand list to a string representation\n    operand_str = ''.join([str(num) for num in operand])\n    \n    # Evaluate the expression\n    result = eval(operator_str.join(operand_str))\n    \n    return result"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the range function\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers, filter even digits, and sort them\n    even_digits = sorted([digit for digit in range(a, b + 1) if digit % 2 == 0])\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "pass"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError('The list of numbers is empty')\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        depth = 0\n        max_depth = 0\n        for c in group:\n            if c == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif c == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), reduce(lambda x, y: x * y, numbers))"}
{"idx": 9, "completion": "return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if not string:\n        return ''\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return ''"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if char == 'o' else 2 if char == 'o|' else 1 for char in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            closest_pair = (numbers[i], numbers[i + 1])\n            min_diff = diff\n    return closest_pair"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError('List must have at least two elements')\n    min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "factors = []\n    d = 2\n    while d * d <= n:\n        while (n % d) == 0:\n            factors.append(d)\n            n //= d\n        d += 1\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "# TODO: implement this function\n    pass"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 1, 1\n    found = 0\n    while True:\n        if is_prime(fib2):\n            found += 1\n            if found == n:\n                return fib2\n        fib1, fib2 = fib2, fib1 + fib2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set()\n    for e in l:\n        if -e in s:\n            return True\n        s.add(e)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for i in range(4, n + 1):\n        a, b, c, d = b, c, d, a + b + c + d\n    return d"}
{"idx": 47, "completion": "# sort the list\n    l.sort()\n    # get the length of the list\n    n = len(l)\n    # check if n is odd\n    if n % 2 == 1:\n        # if odd, return the middle element\n        return l[n // 2]\n    else:\n        # if even, return the average of the two middle elements\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    \n    # Perform the circular shift\n    shift %= num_digits  # In case shift is larger than the number of digits\n    shifted_digits = digits[-shift:] + digits[:-shift]\n    \n    return shifted_digits"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    \n    # Initialize counters for apples and oranges\n    apples = 0\n    oranges = 0\n    \n    # Iterate over the words and update the counters\n    for i in range(len(words)):\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    \n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    return mango"}
{"idx": 68, "completion": "smallest_even = float('inf')\n    smallest_index = -1\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n    if smallest_index == -1:\n        return []\n    return [smallest_even, smallest_index]"}
{"idx": 69, "completion": "# Your code here\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    max_val = -1\n    for num, count in freq.items():\n        if num > 0 and num <= count:\n            max_val = max(max_val, num)\n    return max_val"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_list = sorted(lst)\n    result = []\n    # While there are elements in the sorted list\n    while sorted_list:\n        # Append the minimum value to the result list\n        result.append(sorted_list.pop(0))\n        # If there are elements left in the sorted list\n        if sorted_list:\n            # Append the maximum value to the result list\n            result.append(sorted_list.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "if a < 2:\n        return False\n    primes = []\n    for i in range(2, a):\n        if a % i == 0:\n            primes.append(i)\n    return len(primes) == 3 and all(map(lambda x: is_prime(x), primes))"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"}
{"idx": 77, "completion": "return a**(1/3) == int(a**(1/3))"}
{"idx": 78, "completion": "# Your code here\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex:\n            count += 1\n    return count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2"}
{"idx": 81, "completion": "letter_grades = []\n    for grade in grades:\n        if grade == 4.0:\n            letter_grades.append('A+')\n        elif grade > 3.7:\n            letter_grades.append('A')\n        elif grade > 3.3:\n            letter_grades.append('A-')\n        elif grade > 3.0:\n            letter_grades.append('B+')\n        elif grade > 2.7:\n            letter_grades.append('B')\n        elif grade > 2.3:\n            letter_grades.append('B-')\n        elif grade > 2.0:\n            letter_grades.append('C+')\n        elif grade > 1.7:\n            letter_grades.append('C')\n        elif grade > 1.3:\n            letter_grades.append('C-')\n        elif grade > 1.0:\n            letter_grades.append('D+')\n        elif grade > 0.7:\n            letter_grades.append('D')\n        elif grade > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    else:\n        # For n > 1, calculate the count\n        # There are 9 * 10^(n-2) numbers that start with 1 (10^(n-1) total starting with 1)\n        # and another 9 * 10^(n-2) numbers that end with 1 (10^(n-1) total ending with 1)\n        # However, we must subtract the count of numbers that both start and end with 1 to avoid double-counting\n        # There are 10^(n-2) numbers that both start and end with 1\n        return 2 * (10 ** (n - 1)) - 10 ** (n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, \"b\")\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary representation\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, \"b\")"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, element in enumerate(row):\n            if element == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = list(set(lst))\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]"}
{"idx": 91, "completion": "return len(re.findall(r\"(?<=^|\\.)\\s*(I)\\b\", S))"}
{"idx": 92, "completion": "if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n            encoded_message += char.upper() if char.isupper() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max([num for num in lst if is_prime(num)])\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "stones = []\n    current_stones = n\n    for _ in range(n):\n        stones.append(current_stones)\n        # Determine the next number in the sequence based on the current number's parity\n        if current_stones % 2 == 0:\n            current_stones += 2\n        else:\n            current_stones += 2\n    return stones"}
{"idx": 101, "completion": "# Split the string by commas and spaces, and filter out any empty strings\n    words = [word for word in re.split(',\\s*|\\s+', s) if word]\n    return words"}
{"idx": 102, "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([n for n in x if all(digit in '13579' for digit in str(n))])"}
{"idx": 105, "completion": "# Dictionary to map digits to their corresponding names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map to names\n    filtered_sorted_reversed = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[num] for num in filtered_sorted_reversed]"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for n in arr if sum(int(d) for d in str(abs(n))) > 0)"}
{"idx": 109, "completion": "# Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the index where the array breaks the non-decreasing order\n    break_index = -1\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break_index = i\n            break\n\n    # If the array is already non-decreasing or has only one element, return True\n    if break_index == -1:\n        return True\n\n    # Check if the array can be made non-decreasing by performing right shift\n    for i in range(break_index + 1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    # Check if the array can be made non-decreasing by performing right shift\n    # from the break index\n    for i in range(break_index + 1):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if len(lst1) == len([x for x in lst1 if x % 2 == 0]) else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    \n    # Create a dictionary to store the count of each letter\n    letter_counts = {}\n    \n    # Count the occurrences of each letter\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count\n    max_count = max(letter_counts.values())\n    \n    # Filter the dictionary to only include letters with the maximum count\n    result = {letter: count for letter, count in letter_counts.items() if count == max_count}\n    \n    return result"}
{"idx": 112, "completion": "result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code here\n    # 1. Iterate over each row and count the number of 1s\n    # 2. Divide the number of 1s by the bucket capacity and round up\n    # 3. Return the sum of the number of buckets needed for each row\n    total_buckets = 0\n    for row in grid:\n        row_buckets = math.ceil(sum(row) / capacity)\n        total_buckets += row_buckets\n    return total_buckets"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in lst:\n        for j in i:\n            if j == '(':\n                open_parens += 1\n            elif j == ')':\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum(n for i, n in enumerate(lst) if i % 2 == 0 and n % 2 != 0)"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 10 <= x < 100)"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(set(sequence))"}
{"idx": 124, "completion": "if not date:\n        return False\n    try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ',' in txt:\n        return txt.split(',')\n    elif ' ' in txt:\n        return txt.split(' ')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            if i > 0 and lst[i - 1] == lst[i]:\n                return False\n    return True"}
{"idx": 127, "completion": "# your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    if length <= 1:\n        return \"NO\"\n    for i in range(2, int(length**0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    return sum(abs(x) for x in arr) * math.prod(sign(x) for x in arr)"}
{"idx": 129, "completion": "def dfs(i, j, k, path):\n        if k == 0:\n            ans.append(path)\n            return\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < N and 0 <= y < N:\n                dfs(x, y, k-1, path+[grid[x][y]])\n    N = len(grid)\n    ans = []\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, k-1, [grid[i][j]])\n    return min(ans)"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n            if len(stack) > 0:\n                return True\n    return False"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "return bool(txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace()))"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n    \n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n    \n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return True"}
{"idx": 139, "completion": "if n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n    result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x = x.split(\"/\")\n    n = n.split(\"/\")\n    x_numerator = int(x[0])\n    x_denominator = int(x[1])\n    n_numerator = int(n[0])\n    n_denominator = int(n[1])\n    result_numerator = x_numerator * n_numerator\n    result_denominator = x_denominator * n_denominator\n    if result_numerator % result_denominator == 0:\n        return True\n    else:\n        return False"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "# Your code here\n    return len([num for num in nums if num > 10 and isOddFirstAndLastDigit(num)])"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index > planet2_index:\n            planet1_index, planet2_index = planet2_index, planet1_index\n        return planets[planet1_index + 1:planet2_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "#your code here\n    return [abs(a-b) for a,b in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    max_strength = -float('inf')\n    for extension in extensions:\n        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in extension if c.islower())\n        if strength > max_strength:\n            strongest_extension = extension\n            max_strength = strength\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to their Roman numeral counterparts.\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman"}
{"idx": 157, "completion": "# Sort the sides to make comparison easier\n    a, b, c = sorted([a, b, c])\n    # Check if the sum of the squares of the two smaller sides equals the square of the largest side\n    return a**2 + b**2 == c**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    eaten = number + min(need, remaining)\n    remaining -= min(need, remaining)\n    return [eaten, remaining]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Append the operator and the next operand to the expression\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    # Evaluate the expression\n    result = eval(expression)\n    \n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the range function\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers, filter even digits, and sort them\n    even_digits = sorted([digit for digit in range(a, b + 1) if digit % 2 == 0])\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n        elif char == \")\":\n            depth -= 1\n        current_group += char\n        if depth == 0:\n            paren_groups.append(current_group)\n            current_group = \"\"\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError(\"List is empty\")\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str"}
{"idx": 13, "completion": "while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if c == 'o' else 2 if c == 'o|' else 1 for c in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "# Convert the string to a list of numbers\n    number_list = numbers.split()\n    # Convert the list of strings to a list of integers\n    number_list = [int(n) for n in number_list]\n    # Sort the list of integers\n    number_list.sort()\n    # Convert the list of integers to a string\n    number_list = [str(n) for n in number_list]\n    # Join the list of strings with spaces\n    return ' '.join(number_list)"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_diff = float(\"inf\")\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"len(xs) must be even\")\n\n    if xs[-1] == 0:\n        raise ValueError(\"largest non zero coefficient must be the last element\")\n\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])\n\n    def newton(x):\n        return x - f(x) / df(x)\n\n    x = 0\n    while abs(f(x)) > 1e-10:\n        x = newton(x)\n    return x"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = []\n    for i in range(0, len(l), 2):\n        even_list.append(l[i])\n    even_list.sort()\n    j = 0\n    for i in range(0, len(l), 2):\n        l[i] = even_list[j]\n        j += 1\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 1, 1\n    found = 0\n    while True:\n        if is_prime(fib2):\n            found += 1\n            if found == n:\n                return fib2\n        fib1, fib2 = fib2, fib1 + fib2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "s = set()\n    for e in l:\n        if -e in s:\n            return True\n        s.add(e)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    # Return the maximum value\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    l = len(s)\n    if shift >= l:\n        return s[::-1]\n    else:\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize a variable to store the number of mangoes\n    mangoes = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # Check if the current word is \"apples\" or \"oranges\"\n        if words[i] == \"apples\" or words[i] == \"oranges\":\n            # Convert the next word to an integer and subtract it from the total number of fruits\n            mangoes += int(words[i+1])\n    # Return the number of mangoes\n    return n - mangoes"}
{"idx": 68, "completion": "# your code here\n    pass"}
{"idx": 69, "completion": "# Your code here\n    from collections import Counter\n    c = Counter(lst)\n    max_num = -1\n    for k, v in c.items():\n        if k > 0 and v >= k:\n            max_num = max(max_num, k)\n    return max_num"}
{"idx": 70, "completion": "sorted_list = []\n    while lst:\n        # Add the minimum value to the sorted list\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n\n        # If there are still elements in the list, add the maximum value\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n\n    return sorted_list"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes_needed += 1\n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True\n    # your code here"}
{"idx": 77, "completion": "return a**(1/3) == int(a**(1/3))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime hexadecimal digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True"}
{"idx": 81, "completion": "grades_list = []\n    for grade in grades:\n        if grade == 4.0:\n            grades_list.append('A+')\n        elif grade > 3.7:\n            grades_list.append('A')\n        elif grade > 3.3:\n            grades_list.append('A-')\n        elif grade > 3.0:\n            grades_list.append('B+')\n        elif grade > 2.7:\n            grades_list.append('B')\n        elif grade > 2.3:\n            grades_list.append('B-')\n        elif grade > 2.0:\n            grades_list.append('C+')\n        elif grade > 1.7:\n            grades_list.append('C')\n        elif grade > 1.3:\n            grades_list.append('C-')\n        elif grade > 1.0:\n            grades_list.append('D+')\n        elif grade > 0.7:\n            grades_list.append('D')\n        elif grade > 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    else:\n        # For n > 1, calculate the count\n        # The formula is derived from the principle of counting for such problems.\n        # The total count of n-digit numbers starting or ending with 1 is 2 * (10^(n-1))\n        # minus the count of numbers that both start and end with 1, which is (10^(n-2))\n        return 2 * 10**(n-1) - 10**(n-2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = bin(N)[2:]\n    # Calculate the sum of digits\n    total = sum(int(digit) for digit in binary)\n    # Convert the sum to binary and return\n    return bin(total)[2:]"}
{"idx": 85, "completion": "return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.isupper():\n                encrypted += chr((ord(char) - 65 + 4) % 26 + 65)\n            else:\n                encrypted += chr((ord(char) - 97 + 4) % 26 + 97)\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]"}
{"idx": 91, "completion": "return sum(1 for sentence in S.split('. ') + S.split('? ') + S.split('! ') if sentence.startswith('I '))"}
{"idx": 92, "completion": "return x + y == z or x + z == y or y + z == x and x.is_integer() and y.is_integer() and z.is_integer()"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "stones = []\n    current_stones = n\n    for _ in range(n):\n        stones.append(current_stones)\n        # Determine the next number based on the current number's parity\n        current_stones += 2 if current_stones % 2 == 0 else 1\n    return stones"}
{"idx": 101, "completion": "return s.replace(',', ' ').split()"}
{"idx": 102, "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if all(digit % 2 != 0 for digit in map(int, str(i)))])"}
{"idx": 105, "completion": "# Mapping of digits to their names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map to names\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    result = [digit_names[x] for x in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return sum(1 for x in arr if sum(int(d) for d in str(abs(x))) > 0)"}
{"idx": 109, "completion": "# If the array is empty, return True\n    if not arr:\n        return True\n\n    # Find the index where the array breaks the non-decreasing order\n    break_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            break_index = i\n            break\n\n    # If the array is already non-decreasing or can be made so by a single right shift\n    if break_index == 0 or (break_index == len(arr) - 1 and arr[break_index] > arr[0]):\n        return True\n\n    # Check if the array can be made non-decreasing by performing a right shift\n    for i in range(break_index + 1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0 else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Initialize an empty list to store the letters with the maximum count\n    max_letters = []\n    # Iterate over the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the list\n        if count == max_count:\n            max_letters.append(letter)\n    # Return the dictionary of the letters with the maximum count and their counts\n    return {letter: count for letter, count in letter_counts.items() if letter in max_letters}"}
{"idx": 112, "completion": "result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]\n    #return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]\n    #return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]\n    #return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "return sum([math.ceil(sum(well)/capacity) for well in grid])"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''"}
{"idx": 119, "completion": "# Your code here\n    open_parens = 0\n    close_parens = 0\n    for i in lst:\n        for j in i:\n            if j == '(':\n                open_parens += 1\n            elif j == ')':\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements\n    return arr[:k]"}
{"idx": 121, "completion": "return sum(n for i, n in enumerate(lst) if i % 2 == 0 and n % 2 != 0)"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if x < 100 and x > -100])"}
{"idx": 123, "completion": "# Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    \n    # Generate the Collatz sequence for the given number n\n    while n != 1:\n        if n % 2 != 0:  # Check if the current number is odd\n            odd_numbers.append(n)\n        # Apply the Collatz rules\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    # Add the last number 1 to the list of odd numbers\n    odd_numbers.append(1)\n    \n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    # Extract the month, day, and year from the split date string\n    month, day, year = parts\n\n    # Check if the month is valid\n    if not month.isdigit() or int(month) < 1 or int(month) > 12:\n        return False\n\n    # Check if the day is valid\n    if not day.isdigit() or int(day) < 1 or int(day) > 31:\n        return False\n\n    # Check if the year is valid\n    if not year.isdigit() or int(year) < 1:\n        return False\n\n    # Check if the date is in the format mm-dd-yyyy\n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n\n    return True"}
{"idx": 125, "completion": "# your code here\n    pass"}
{"idx": 126, "completion": "# Your code here\n    pass"}
{"idx": 127, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Calculate the intersection\n    start = max(start1, start2)\n    end = min(end1, end2)\n\n    if start > end:\n        return \"NO\"\n\n    intersection_length = end - start + 1\n\n    return \"YES\" if is_prime(intersection_length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n\n    # Calculate the product of signs\n    sign_product = 1\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        elif num < 0:\n            sign_product *= -1\n\n    # Calculate the sum of magnitudes\n    magnitude_sum = sum(abs(num) for num in arr)\n\n    return sign_product * magnitude_sum"}
{"idx": 129, "completion": "# Your code goes here\n    # Please delete the 'pass' after you finish your implementation.\n    pass"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n    return product if has_odd else 0"}
{"idx": 132, "completion": "# Your code here\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) > 0"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] != \" \":\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative = [x for x in lst if x < 0]\n    positive = [x for x in lst if x > 0]\n    largest_negative = max(negative) if negative else None\n    smallest_positive = min(positive) if positive else None\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare and return the larger value in its original type\n    if a > b:\n        return a if not isinstance(a, float) else str(a)\n    elif b > a:\n        return b if not isinstance(b, float) else str(b)\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10 and isOddFirstAndLastDigit(num):\n            count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n+1)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "# Your code here\n    pass"}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of integers to their Roman numeral counterparts.\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman = ''\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman += symbol\n            number -= value\n    return roman"}
{"idx": 157, "completion": "# Sort the sides to ensure the longest side is last\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return a**2 + b**2 == c**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    return [number + min(need, remaining), max(0, remaining - need)]"}
{"idx": 160, "completion": "# Initialize the result with the first operand\n    result = operand[0]\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Perform the operation based on the operator\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    \n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the range function\n    start, end = sorted([a, b])\n    return [i for i in range(start, end + 1) if i % 2 == 0]"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current_group += char\n            else:\n                result.append(current_group)\n                current_group = \"\"\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError(\"The list of numbers is empty\")\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)"}
{"idx": 5, "completion": "if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "return [max(numbers[:i + 1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n\n    return ''"}
{"idx": 11, "completion": "# Convert the strings to integers, perform XOR, then convert back to a string\n    result = str(int(a, 2) ^ int(b, 2))\n    return result"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "# Your code here\n    pass"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "return ' '.join(sorted(numbers.split(), key=lambda x: 'zero one two three four five six seven eight nine'.split().index(x)))"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"Polynomial must have even number of coefficients.\")\n    if xs[-1] == 0:\n        raise ValueError(\"Polynomial must have a non-zero largest coefficient.\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    a = find_zero(xs[1:])\n    b = find_zero(xs[:-1])\n    return (a + b) / 2"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_list.append(l[i])\n    even_list.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_list[j]\n            j += 1\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 1, 1\n    found = 0\n    while True:\n        if is_prime(fib2):\n            found += 1\n            if found == n:\n                return fib2\n        fib1, fib2 = fib2, fib1 + fib2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for n in l:\n        if -n in seen:\n            return True\n        seen.add(n)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(int(x % base))\n        x //= base\n    return ''.join(str(digit) for digit in digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    else:\n        return (l_sorted[n // 2 - 1] + l_sorted[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "open_brackets = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            open_brackets += 1\n        elif bracket == \">\":\n            open_brackets -= 1\n            if open_brackets < 0:\n                return False\n    return open_brackets == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "s = str(x)\n    l = len(s)\n    if shift >= l:\n        return s[::-1]\n    else:\n        shift = shift % l\n        return s[-shift:] + s[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize a dictionary to store the counts of each fruit\n    fruit_counts = {}\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # If the word is \"apples\" or \"oranges\", add it to the dictionary with a count of 1\n        if words[i] == \"apples\" or words[i] == \"oranges\":\n            fruit_counts[words[i]] = 1\n        # If the word is \"and\", skip it\n        elif words[i] == \"and\":\n            continue\n        # If the word is a number, convert it to an integer and add it to the count for the previous fruit\n        else:\n            fruit_counts[words[i-1]] += int(words[i])\n    # Subtract the counts of apples and oranges from the total number of fruits to get the count of mangoes\n    mangoes = n - (fruit_counts[\"apples\"] + fruit_counts[\"oranges\"])\n    return mangoes"}
{"idx": 68, "completion": "# your code here\n    pass"}
{"idx": 69, "completion": "# Your code here\n    pass"}
{"idx": 70, "completion": "sorted_list = []\n    while lst:\n        # Add the minimum value to the sorted list\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n\n        # If there are still elements left, add the maximum value\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n\n    return sorted_list"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n        if len(factors) > 3:\n            break\n\n    return len(factors) == 3 and a == factors[0] * factors[1] * factors[2]"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1/3) == int(a**(1/3))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Count the number of prime digits in the input string\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count"}
{"idx": 79, "completion": "return \"db\" + bin(decimal)[2:] + \"db\""}
{"idx": 80, "completion": "return len(s) >= 3 and all(s[i] != s[i+1] != s[i+2] != s[i] for i in range(len(s)-2))"}
{"idx": 81, "completion": "# Define the grading scale\n    grade_scale = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (-1.0, 'E')\n    ]\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over the list of GPAs\n    for gpa in grades:\n        # Find the corresponding letter grade for the GPA\n        for grade in grade_scale:\n            if gpa >= grade[0]:\n                letter_grades.append(grade[1])\n                break\n    \n    return letter_grades"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    else:\n        # For n > 1, calculate the count\n        # There are 9 * 10^(n-2) numbers that start with 1 (10^(n-1) total starting with 1)\n        # There are also 9 * 10^(n-2) numbers that end with 1 (10^(n-1) total ending with 1)\n        # However, we've counted the numbers that both start and end with 1 twice, so we need to subtract those\n        # There are 10^(n-2) numbers that both start and end with 1 (10^(n-2) total)\n        return 2 * (10 ** (n - 1)) - 10 ** (n - 2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary number\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split()\n    ordered_words = []\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    return ' '.join(ordered_words)"}
{"idx": 87, "completion": "return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if sum(array[0:2]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char)\n            new_index = (index + (2 * 2)) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "return len(re.findall(r'\\bI\\b', S))"}
{"idx": 92, "completion": "#your code here\n    return x + y == z or x + z == y or y + z == x and type(x) == int and type(y) == int and type(z) == int"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "def next_odd(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n + 2\n\n    stones = [n]\n    for i in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(next_even(stones[-1]))\n        else:\n            stones.append(next_odd(stones[-1]))\n    return stones"}
{"idx": 101, "completion": "# Split the string by commas and spaces, and filter out any empty strings\n    words = [word for word in re.split(',\\s*|\\s+', s) if word]\n    return words"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n\n    # Iterate from y to x to find the biggest even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m+1)) / (m-n+1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "# Dictionary to map digits to their corresponding names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only numbers between 1 and 9, then sort and reverse\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Map the filtered, sorted, reversed array to their names\n    result = [digit_names[num] for num in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            n = -n\n        return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"idx": 109, "completion": "# Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the index of the smallest element\n    min_index = arr.index(min(arr))\n\n    # Check if the array can be sorted by right shifts\n    for i in range(len(arr)):\n        # Check if the current element is greater than the next element\n        if arr[i] > arr[(i + 1) % len(arr)]:\n            return False\n\n    # Check if the smallest element is at the beginning or end of the array\n    if min_index == 0 or min_index == len(arr) - 1:\n        return True\n\n    # Check if the array can be sorted by right shifts\n    for i in range(min_index, len(arr) + min_index):\n        if arr[i % len(arr)] > arr[(i + 1) % len(arr)]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0 else \"NO\""}
{"idx": 111, "completion": "if not test:\n        return {}\n    test = test.split()\n    histogram = {}\n    for letter in test:\n        if letter in histogram:\n            histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n    return histogram"}
{"idx": 112, "completion": "res = \"\"\n    for i in s:\n        if i not in c:\n            res += i\n    return (res, res == res[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# WRITE YOUR CODE HERE\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for char in word:\n            if char.lower() in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "open_parens = 0\n    close_parens = 0\n    for i in lst:\n        for j in i:\n            if j == '(':\n                open_parens += 1\n            else:\n                close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0])"}
{"idx": 122, "completion": "return sum(x for x in arr[:k] if 10 <= x < 100)"}
{"idx": 123, "completion": "# Initialize an empty list to store the odd numbers\n    odd_numbers = []\n    # Loop until n reaches 1\n    while n != 1:\n        # If n is odd, add it to the list\n        if n % 2 != 0:\n            odd_numbers.append(n)\n        # Apply the Collatz operation\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    # Add the last number 1 to the list\n    odd_numbers.append(1)\n    # Return the sorted list of odd numbers\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month > 12 or month < 1:\n            return False\n        if day > 31 or day < 1:\n            return False\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            if day > 31:\n                return False\n        elif month in [4, 6, 9, 11]:\n            if day > 30:\n                return False\n        elif month == 2:\n            if day > 29:\n                return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 != 0)"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        elif lst[i] == lst[i + 1]:\n            if lst.count(lst[i]) > 1:\n                return False\n    return True"}
{"idx": 127, "completion": "# Your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    if start1 > end1 or start2 > end2:\n        return \"NO\"\n    start = max(start1, start2)\n    end = min(end1, end2)\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length**0.5)+1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    prod = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        prod *= 1 if num > 0 else -1\n        sum_of_magnitudes += abs(num)\n    return sum_of_magnitudes * prod"}
{"idx": 129, "completion": "N = len(grid)\n    # Initialize the priority queue with all possible starting positions\n    pq = [(grid[i][j], i, j) for i in range(N) for j in range(N)]\n    heapq.heapify(pq)\n    # Initialize the result list with the first k values\n    result = []\n    for _ in range(k):\n        # Pop the smallest value from the priority queue\n        val, i, j = heapq.heappop(pq)\n        result.append(val)\n        # Add the neighbors of the current cell to the priority queue\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < N and 0 <= y < N:\n                heapq.heappush(pq, (grid[x][y], x, y))\n    return result"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n            if len(stack) > 0:\n                return True\n    return False"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == '':\n        return False\n    else:\n        txt = txt.split(' ')\n        if txt[-1].isalpha():\n            return True\n        else:\n            return False\n    pass"}
{"idx": 135, "completion": "for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Your code here\n    negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "return n >= 8 and n % 2 == 0"}
{"idx": 139, "completion": "# Your code here\n    if n == 1:\n        return 1\n    else:\n        return math.factorial(n) * special_factorial(n-1)"}
{"idx": 140, "completion": "# Replace more than 2 consecutive spaces with -\n    text = re.sub(r' {3,}', '-', text)\n    # Replace remaining spaces with underscores\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Helper function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "# Your code here\n    return True if eval(x) * eval(n) % 1 == 0 else False"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))"}
{"idx": 146, "completion": "return len([num for num in nums if num > 10 and isOddFirstAndLastDigit(num)])"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return tuple()\n    else:\n        index1 = planets.index(planet1)\n        index2 = planets.index(planet2)\n        if index1 > index2:\n            index1, index2 = index2, index1\n        return tuple(planets[index1+1:index2])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    max_strength = -float('inf')\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(1, len(b)):\n            b = b[1:]+b[0]\n            if b in a:\n                return True\n        return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of numbers to their roman numeral counterparts\n    ones = ['i', 'x', 'c', 'm']\n    fives = ['v', 'l', 'd']\n    tens = ['x', 'c', 'm']\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n\n    # Convert the integer to a lowercase roman numeral\n    result = \"\"\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result"}
{"idx": 157, "completion": "# Sort the sides to ensure the longest side is last\n    a, b, c = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return a**2 + b**2 == c**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    return [number + min(need, remaining), max(0, remaining - need)]"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Append the operator and the next operand to the expression\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    # Evaluate the expression\n    result = eval(expression)\n    \n    return result"}
{"idx": 161, "completion": "if not s:\n        return \"\"\n    if not any(c.isalpha() for c in s):\n        return s[::-1]\n    return ''.join(c.swapcase() if c.isalpha() else c for c in s)"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers and filter for even digits\n    even_digits = [digit for digit in range(a, b + 1) if all(int(d) % 2 == 0 for d in str(digit))]\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    paren_groups = []\n    current_group = \"\"\n    depth = 0\n    for char in paren_string:\n        if char == \"(\":\n            depth += 1\n        elif char == \")\":\n            depth -= 1\n        current_group += char\n        if depth == 0:\n            paren_groups.append(current_group)\n            current_group = \"\"\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        return 0.0\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split(' '):\n        max_nesting = 0\n        current_nesting = 0\n        for char in group:\n            if char == '(':\n                current_nesting += 1\n                max_nesting = max(max_nesting, current_nesting)\n            elif char == ')':\n                current_nesting -= 1\n        result.append(max_nesting)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "sum = 0\n    product = 1\n    for number in numbers:\n        sum += number\n        product *= number\n    return sum, product"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    return max(strings, key=len)"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "count = 0\n    index = 0\n    while index != -1:\n        index = string.find(substring, index)\n        if index != -1:\n            count += 1\n            index += 1\n    return count"}
{"idx": 19, "completion": "# Convert the string of number names into a list of integers\n    number_list = [int(num) for num in numbers.split()]\n\n    # Sort the list of integers\n    number_list.sort()\n\n    # Convert the sorted list of integers back into a string\n    sorted_numbers = ' '.join([str(num) for num in number_list])\n\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest[0] - closest[1]):\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "min_val = min(numbers)\n    max_val = max(numbers)\n    return [(x - min_val) / (max_val - min_val) for x in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "assert len(xs) % 2 == 0\n    assert max(xs) > 0\n    lo = 0\n    hi = len(xs) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if poly(xs, mid) < 0:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even = sorted(l[::2])\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even.pop(0))\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib_1, fib_2 = 1, 1\n    found = 0\n    while True:\n        if is_prime(fib_2):\n            found += 1\n            if found == n:\n                return fib_2\n        fib_1, fib_2 = fib_2, fib_1 + fib_2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for n in l:\n        if -n in seen:\n            return True\n        seen.add(n)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 1:\n        return (2 * modp(n - 1, p)) % p\n    else:\n        return modp(n // 2, p) ** 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"<\":\n            count += 1\n        elif bracket == \">\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "# Step 1: Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        max_prime = 2\n        n //= 2\n\n    # Step 2: n must be odd at this point, so we can skip one element (Note i = i +2)\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            max_prime = i\n            n = n // i\n\n    # Step 3: This condition is to handle the case when n is a prime number greater than 2\n    if n > 2:\n        max_prime = n\n\n    return max_prime"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    # Calculate the effective shift, considering the length of digits\n    effective_shift = shift % len(digits)\n    # Perform the circular shift\n    shifted_digits = digits[-effective_shift:] + digits[:-effective_shift]\n    return shifted_digits"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # If the word is \"apples\", add 1 to the count of apples\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        # If the word is \"oranges\", add 1 to the count of oranges\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    # Return the total number of fruits minus the number of apples and oranges\n    return n - apples - oranges"}
{"idx": 68, "completion": "# Your code here\n    pass"}
{"idx": 69, "completion": "# your code here\n    from collections import Counter\n    c = Counter(lst)\n    for k, v in c.items():\n        if k > 0 and v >= k:\n            return k\n    return -1"}
{"idx": 70, "completion": "sorted_list = []\n    while lst:\n        # Add the minimum value\n        min_val = min(lst)\n        sorted_list.append(min_val)\n        lst.remove(min_val)\n        # Add the maximum value\n        if lst:\n            max_val = max(lst)\n            sorted_list.append(max_val)\n            lst.remove(max_val)\n    return sorted_list"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        return round(math.sqrt(s * (s - a) * (s - b) * (s - c)), 2)\n    return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "pass"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1./3.) == round(a**(1./3.))"}
{"idx": 78, "completion": "# Your code here\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # Check if the character is a prime hexadecimal digit\n        if char in prime_hex_digits:\n            # Increment the counter\n            prime_count += 1\n    # Return the final count of prime hexadecimal digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Your code here\n    pass"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' fits the criteria\n    else:\n        # For n > 1, calculate the count\n        # There are 9 * 10^(n-2) numbers that start or end with 1\n        # This is because the first digit has 2 possibilities (1 or not 1),\n        # and the rest have 10 possibilities each (0-9).\n        # We subtract the count of numbers that both start and end with 1\n        # to avoid double-counting. There are 10^(n-2) such numbers.\n        return 2 * 10**(n-1) - 10**(n-2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary string\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum back to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "# Your code here\n    pass"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    first, last = array[0], array[-1]\n    if (first + last) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.index(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    lst = set(lst)\n    lst.remove(min(lst))\n    if not lst:\n        return None\n    return min(lst)"}
{"idx": 91, "completion": "count = 0\n    for sentence in S.split('.'):\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "return x + y == z or x + z == y or y + z == x and all(isinstance(i, int) for i in [x, y, z])"}
{"idx": 93, "completion": "vowels = ['a','e','i','o','u']\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            else:\n                char = char.upper()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n            encoded_message += char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = max(filter(is_prime, lst))\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return -round(abs(value))\n    else:\n        return round(value)"}
{"idx": 100, "completion": "# Initialize the list with the number of stones in the first level\n    pile = [n]\n    # Calculate the number of stones for each subsequent level\n    for i in range(1, n):\n        # Determine the next number based on the parity of the current level's stones\n        next_stones = pile[i-1] + 2 if pile[i-1] % 2 == 0 else pile[i-1] + 2\n        pile.append(next_stones)\n    return pile"}
{"idx": 101, "completion": "return [word.strip() for word in re.split(', | ', s)]"}
{"idx": 102, "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any([int(j) % 2 == 0 for j in str(i)])])"}
{"idx": 105, "completion": "# Mapping of numbers to their corresponding names\n    num_to_name = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map to names\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    result = [num_to_name[x] for x in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def count_palindromes(start, end):\n        count = 0\n        for i in range(start, end + 1):\n            if is_palindrome(i):\n                count += 1\n        return count\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            return -sum(int(d) for d in str(n)[1:])\n        else:\n            return sum(int(d) for d in str(n))\n\n    return sum(1 for n in arr if sum_of_digits(n) > 0)"}
{"idx": 109, "completion": "# check if the array is empty\n    if not arr:\n        return True\n\n    # get the length of the array\n    n = len(arr)\n\n    # find the index of the smallest element\n    min_index = arr.index(min(arr))\n\n    # check if the array is already sorted in non-decreasing order\n    if arr == sorted(arr):\n        return True\n\n    # check if the array can be sorted by performing right shift operation\n    for i in range(n):\n        if arr[(min_index + i) % n] > arr[(min_index + i + 1) % n]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if all(x % 2 == 0 for x in lst1) else \"NO\""}
{"idx": 111, "completion": "# Convert the string into a list of characters\n    chars = test.split()\n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over the list of characters\n    for char in chars:\n        # If the character is already in the dictionary, increment its count\n        if char in letter_counts:\n            letter_counts[char] += 1\n        # Otherwise, add the character to the dictionary with a count of 1\n        else:\n            letter_counts[char] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Initialize an empty list to store the letters with the maximum count\n    max_letters = []\n    # Iterate over the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the list\n        if count == max_count:\n            max_letters.append(letter)\n    # Return the dictionary of the letters with the maximum count and their counts\n    return {letter: count for letter, count in letter_counts.items() if letter in max_letters}"}
{"idx": 112, "completion": "result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# WRITE YOUR CODE HERE\n    # raise NotImplementedError()\n    # return 0\n    total = 0\n    for row in grid:\n        total += math.ceil(sum(row) / capacity)\n    return total"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "# Your code here\n    pass"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''"}
{"idx": 119, "completion": "# your code here\n    pass"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum(n for i, n in enumerate(lst) if i % 2 == 0 and n % 2 != 0)"}
{"idx": 122, "completion": "# Your solution here\n    pass"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:  # Check if n is odd\n            sequence.append(n)\n        if n % 2 == 0:  # Check if n is even\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(sequence)"}
{"idx": 124, "completion": "# Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    parts = date.split('-')\n    if len(parts) != 3:\n        return False\n\n    # Check if the month is valid\n    month = int(parts[0])\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid\n    day = int(parts[1])\n    if month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day < 1 or day > 30:\n        return False\n    elif month == 2 and day < 1 or day > 29:\n        return False\n\n    # Check if the year is valid\n    year = int(parts[2])\n    if year < 1000 or year > 9999:\n        return False\n\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for i in txt if ord(i) % 2 != 0])"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        elif lst[i] == lst[i + 1]:\n            if i > 0 and lst[i - 1] == lst[i]:\n                return False\n    return True"}
{"idx": 127, "completion": "# Your code here\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        intersection = (max(interval1[0], interval2[0]), min(interval1[1], interval2[1]))\n        length = intersection[1] - intersection[0]\n        if length == 1 or length == 2:\n            return \"YES\"\n        elif length > 2:\n            for i in range(2, length):\n                if length % i == 0:\n                    return \"NO\"\n            return \"YES\"\n        else:\n            return \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    signs = 1\n    magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        signs *= (1 if num > 0 else -1)\n        magnitudes += abs(num)\n    return signs * magnitudes"}
{"idx": 129, "completion": "n = len(grid)\n    # Create a graph from the grid\n    graph = collections.defaultdict(list)\n    for i in range(n):\n        for j in range(n):\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < n and 0 <= y < n:\n                    graph[(i, j)].append((x, y))\n    # Use a priority queue to store the paths\n    queue = [(tuple(grid[0][0]), 1, [grid[0][0]])]\n    visited = set()\n    while queue:\n        path, length, paths = heapq.heappop(queue)\n        if length == k:\n            return paths\n        if (path, length) in visited:\n            continue\n        visited.add((path, length))\n        for x, y in graph[(paths[-1][0], paths[-1][1])]:\n            heapq.heappush(queue, (path + tuple(grid[x][y]), length + 1, paths + [grid[x][y]]))\n    return []"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        sequence = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                sequence.append(1 + i // 2)\n            else:\n                sequence.append(sequence[i - 1] + sequence[i - 2] + sequence[i + 1])\n        return sequence"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n            if len(stack) > 0:\n                return True\n    return False"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return bool(re.search(r\"[a-zA-Z]\\b\", txt) and not re.search(r\"\\w\\w*$\", txt))"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Filter the list to get only negative integers and positive integers\n    negatives = [num for num in lst if num < 0]\n    positives = [num for num in lst if num > 0]\n    \n    # Find the largest negative integer\n    largest_negative = max(negatives) if negatives else None\n    \n    # Find the smallest positive integer\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is even and greater than or equal to the smallest sum of 4 positive even numbers (4 + 4 + 4 + 4 = 16)\n    return n >= 16 and n % 2 == 0"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n    return sum"}
{"idx": 143, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))"}
{"idx": 146, "completion": "# Your code here\n    count = 0\n    for num in nums:\n        if num > 10 and isOdd(num):\n            count += 1\n    return count"}
{"idx": 147, "completion": "# Initialize the count of valid triples\n    count = 0\n\n    # Generate the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Iterate over the array to find valid triples\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"idx": 148, "completion": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    if index1 > index2:\n        index1, index2 = index2, index1\n    return tuple(planets[index1+1:index2])"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n <= 1:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "#your code here\n    return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = ''\n    max_strength = -float('inf')\n    for extension in extensions:\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        if b in a:\n            return True\n        else:\n            b = b[1:]+b[0]\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_string = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman_string += roman_numerals[value]\n            number -= value\n    return roman_string"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: len(set(x)))"}
{"idx": 159, "completion": "# Implement your solution here and place the result into the variable named output\n    output = []\n    if need <= remaining:\n        output.append(number + need)\n        output.append(remaining - need)\n    else:\n        output.append(number + remaining)\n        output.append(0)\n    return output"}
{"idx": 160, "completion": "# Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Iterate through the operators and operands\n    for i in range(len(operator)):\n        # Append the operator and the next operand to the expression\n        expression += f\" {operator[i]} {operand[i+1]}\"\n    \n    # Evaluate the expression\n    result = eval(expression)\n    \n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate the list of even numbers in the range\n    even_numbers = [i for i in range(a, b + 1) if i % 2 == 0]\n    return even_numbers"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current_group += char\n        if depth == 0:\n            paren_groups.append(current_group)\n            current_group = ''\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError('The list of numbers is empty')\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "maxes = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        maxes.append(current_max)\n    return maxes"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string"}
{"idx": 11, "completion": "# Convert the strings to integers, perform XOR, and convert back to string\n    result = str(int(a, 2) ^ int(b, 2))\n    return result"}
{"idx": 12, "completion": "if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "count = 0\n    index = 0\n    while True:\n        index = string.find(substring, index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count"}
{"idx": 19, "completion": "return ' '.join(sorted(numbers.split(), key=lambda x: 'zero one two three four five six seven eight nine'.split().index(x)))  # type: ignore"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_diff = float('inf')\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n    min_num = min(numbers)\n    max_num = max(numbers)\n    return [(num - min_num) / (max_num - min_num) for num in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"idx": 25, "completion": "pass"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return False\n        i += 1\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"The polynomial must have an even number of coefficients\")\n    if not xs[-1]:\n        raise ValueError(\"The largest non-zero coefficient must be the last one\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    a = 1\n    b = -xs[-2] / xs[-1]\n    c = -xs[0] / xs[-1]\n    D = b * b - 4 * a * c\n    if D < 0:\n        raise ValueError(\"The polynomial has no real roots\")\n    x1 = (-b + math.sqrt(D)) / (2 * a)\n    x2 = (-b - math.sqrt(D)) / (2 * a)\n    if x1 > x2:\n        return x1\n    return x2"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_list.append(l[i])\n    even_list.sort()\n    j = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l[i] = even_list[j]\n            j += 1\n    return l"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    def fibonacci(x):\n        a, b = 0, 1\n        for _ in range(x):\n            a, b = b, a + b\n        return a\n\n    num = 0\n    fib_index = 0\n    while num < n:\n        fib_index += 1\n        fib_num = fibonacci(fib_index)\n        if is_prime(fib_num):\n            num += 1\n            if num == n:\n                return fib_num"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        target = -num\n        if target in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "assert base < 10\n    assert base > 1\n    if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l_sorted = sorted(l)\n    n = len(l_sorted)\n    if n % 2 == 0:\n        return (l_sorted[n//2 - 1] + l_sorted[n//2]) / 2\n    else:\n        return l_sorted[n//2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    str_x = str(x)\n    num_digits = len(str_x)\n\n    # If shift is greater than the number of digits, reverse the digits\n    if shift >= num_digits:\n        return str_x[::-1]  # Return reversed string\n\n    # Perform the circular shift\n    shift %= num_digits  # In case shift is larger than the number of digits\n    shifted_str = str_x[-shift:] + str_x[:-shift]\n\n    return shifted_str"}
{"idx": 66, "completion": "return sum(ord(char) for char in s if char.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize a variable to store the number of mango fruits\n    mango_fruits = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # If the word is \"apples\" or \"oranges\", subtract its count from the total number of fruits\n        if words[i] == \"apples\":\n            n -= int(words[i+1])\n        elif words[i] == \"oranges\":\n            n -= int(words[i+1])\n    # Return the number of mango fruits\n    return n"}
{"idx": 68, "completion": "# YOUR CODE HERE\n    return []"}
{"idx": 69, "completion": "# Your code here\n    # 1. Create a dictionary to store the frequency of each integer in the list\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    # 2. Iterate through the dictionary to find the greatest integer that meets the condition\n    max_num = -1\n    for num, count in freq.items():\n        if count >= num and num > max_num:\n            max_num = num\n    return max_num"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_list = sorted(lst)\n    result = []\n    # Loop until the sorted list is empty\n    while sorted_list:\n        # Append the minimum value to the result list\n        result.append(sorted_list.pop(0))\n        # If the sorted list is not empty, append the maximum value to the result list\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(word) for word in lst1) < sum(len(word) for word in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and a == 1"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1/3) == int(a**(1/3))"}
{"idx": 78, "completion": "# Your code here\n    prime_hex = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in prime_hex:\n            count += 1\n    return count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:].zfill(8)}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Your code here\n    pass"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' is a 1-digit number starting or ending with 1\n    else:\n        # For n > 1, calculate the count of n-digit numbers starting or ending with 1\n        # This is done by calculating the total count of n-digit numbers (10^(n-1) * 9)\n        # and subtracting the count of n-digit numbers that neither start nor end with 1\n        # This is (8 * 10^(n-2)) for numbers that neither start nor end with 1\n        total_n_digit = 9 * (10 ** (n - 1))\n        neither_start_nor_end = 8 * (10 ** (n - 2))\n        return total_n_digit - neither_start_nor_end"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary representation\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum(e for i, e in enumerate(lst) if e % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"idx": 88, "completion": "# Check if the array is empty or has only one element\n    if len(array) <= 1:\n        return array\n\n    # Calculate the sum of the first and last elements\n    sum_of_edges = array[0] + array[-1]\n\n    # Determine the sorting order based on the sum\n    if sum_of_edges % 2 == 0:\n        # Sort in descending order if the sum is even\n        sorted_array = sorted(array, reverse=True)\n    else:\n        # Sort in ascending order if the sum is odd\n        sorted_array = sorted(array)\n\n    return sorted_array"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            index = alphabet.find(char)\n            new_index = (index + (2 * 2)) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"idx": 92, "completion": "if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.isupper():\n                char = char.lower()\n            if char in vowels:\n                char = chr(ord(char) + 2)\n            encoded_message += char.upper() if char.isupper() else char.lower()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "value = float(value)\n    if value >= 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "def next_odd(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n + 2\n\n    result = [n]\n    for _ in range(n - 1):\n        if n % 2 == 0:\n            n = next_even(n)\n        else:\n            n = next_odd(n)\n        result.append(n)\n    return result"}
{"idx": 101, "completion": "# Split the string by comma or space and return the list of words\n    return re.split(r'[ ,]+', s)"}
{"idx": 102, "completion": "for i in range(y, x - 1, -1):\n        if i % 2 == 0:\n            return i\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "# Dictionary to map digits to their corresponding names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only numbers between 1 and 9, then sort and reverse\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Map the filtered, sorted, reversed array to their names\n    result = [digit_names[x] for x in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count, odd_count = 0, 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return even_count, odd_count"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            return sum(int(digit) for digit in str(n)[1:]) - int(str(n)[0])\n        else:\n            return sum(int(digit) for digit in str(n))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"idx": 109, "completion": "# Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the index where the sorted array breaks\n    break_index = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break_index = i\n            break\n\n    # If the array is already sorted\n    if break_index == 0:\n        return True\n\n    # Check if the array can be sorted by performing right shift operations\n    for i in range(break_index + 1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if len(lst1) == len([x for x in lst1 if x % 2 == 0]) else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    \n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    \n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    \n    # Initialize an empty list to store the letters with the maximum count\n    max_letters = []\n    \n    # Iterate over the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the list\n        if count == max_count:\n            max_letters.append(letter)\n    \n    # Return the dictionary of the letters with the maximum count and their corresponding counts\n    return {letter: letter_counts[letter] for letter in max_letters}"}
{"idx": 112, "completion": "for i in c:\n        s = s.replace(i,'')\n    if s == s[::-1]:\n        return (s,True)\n    return (s,False)"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]\n    #return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "return sum([math.ceil(sum(well)/capacity) for well in grid])"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    result = []\n    for word in words:\n        count = 0\n        for letter in word:\n            if letter in consonants:\n                count += 1\n        if count == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "# Your code here\n    # First, we need to check if the strings can be concatenated in some order\n    # to form a balanced string.\n    # We can do this by checking if the number of open parentheses in the first\n    # string is less than or equal to the number of close parentheses in the\n    # second string.\n    # If this condition is true, we can concatenate the strings in any order\n    # and the resulting string will be balanced.\n    # If this condition is false, we cannot concatenate the strings in any order\n    # to form a balanced string.\n    # We can also check if the number of open parentheses in the second string\n    # is less than or equal to the number of close parentheses in the first string.\n    # If this condition is true, we can concatenate the strings in the opposite\n    # order and the resulting string will be balanced.\n    # If this condition is false, we cannot concatenate the strings in any order\n    # to form a balanced string.\n    # If both conditions are false, we cannot concatenate the strings in any order\n    # to form a balanced string.\n    # We can return 'Yes' if we can concatenate the strings in some order to form\n    # a balanced string, and 'No' otherwise.\n    # We can also return 'Yes' if the strings are already balanced.\n    # We can check if the strings are already balanced by checking if the number\n    # of open parentheses in the first string is equal to the number of close\n    # parentheses in the second string.\n    # If this condition is true, the strings are already balanced.\n    # We can return 'Yes' if the strings are already balanced, and 'No' otherwise.\n    # We can also return 'Yes' if the strings are empty.\n    # We can check if the strings are empty by checking if the length of the\n    # strings is zero.\n    # If this condition is true, the strings are empty.\n    # We can return 'Yes' if the strings are empty, and 'No' otherwise.\n    # We can also return 'Yes' if the strings are equal.\n    # We can check if the strings are equal by checking if the first string is\n    # equal to the second string.\n    # If this condition is true, the strings are equal.\n    # We can return 'Yes' if the strings are equal, and 'No' otherwise.\n    # We can"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])"}
{"idx": 122, "completion": "# Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the current element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the element to the total sum\n            total_sum += arr[i]\n\n    # Return the total sum\n    return total_sum"}
{"idx": 123, "completion": "odd_numbers = []\n    while n != 1:\n        if n % 2 != 0:  # Check if n is odd\n            odd_numbers.append(n)\n        if n % 2 == 0:  # Check if n is even\n            n = n // 2\n        else:  # If n is odd\n            n = 3 * n + 1\n    odd_numbers.append(1)  # The sequence always ends with 1, which is odd\n    return sorted(odd_numbers)"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        if len(date) != 3:\n            return False\n        month, day, year = date\n        if not month.isdigit() or not day.isdigit() or not year.isdigit():\n            return False\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for i in txt if (ord(i) - ord('a')) % 2 == 1])"}
{"idx": 126, "completion": "for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            return False\n        elif lst.count(lst[i]) > 1:\n            return False\n    return True"}
{"idx": 127, "completion": "# your code here\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    if length < 2:\n        return \"NO\"\n    for i in range(2, int(length ** 0.5) + 1):\n        if length % i == 0:\n            return \"NO\"\n    return \"YES\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    # Calculate the product of signs\n    sign_product = 1\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num == 0:\n            sign_product = 0\n            break\n    # Calculate the sum of magnitudes\n    magnitude_sum = sum(abs(num) for num in arr)\n    # Return the final result\n    return sign_product * magnitude_sum"}
{"idx": 129, "completion": "N = len(grid)\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    visited = set()\n    heap = [(grid[0][0], 0, 0)]\n    while heap:\n        value, x, y = heapq.heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if len(visited) == k:\n            return [grid[x][y] for x, y in visited]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n    return []"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    elif n > 2:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i / 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 1:\n            product *= digit\n            has_odd = True\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    # If there are any unmatched opening brackets left in the stack, return False\n    return len(stack) == 0 and any(isinstance(x, list) for x in stack)"}
{"idx": 133, "completion": "return sum([math.ceil(i)**2 for i in lst])"}
{"idx": 134, "completion": "if txt == '':\n        return False\n    else:\n        txt = txt.split(' ')\n        if txt[-1].isalpha() and len(txt[-1]) == 1:\n            return True\n        else:\n            return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n\n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare and return the larger value in its original type\n    if a > b:\n        return a if not isinstance(a, float) else str(a)\n    elif b > a:\n        return b if not isinstance(b, float) else str(b)\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is even and greater than or equal to 8\n    if n % 2 == 0 and n >= 8:\n        # Since the smallest sum of 4 even numbers is 2+2+2+2=8, any even number >= 8 can be expressed as such a sum\n        return True\n    else:\n        return False"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "return len([num for num in nums if num > 10 and isOddFirstAndLastDigit(num)])"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n    if planet1_index > planet2_index:\n        planet1_index, planet2_index = planet2_index, planet1_index\n    return planets[planet1_index + 1:planet2_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "#your code here\n    return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of numbers to their roman numeral counterparts\n    ones = ['i', 'x', 'c', 'm']\n    fives = ['v', 'l', 'd']\n    tens = ['x', 'c', 'm']\n    roman_numerals = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    \n    # Initialize the result string\n    result = ''\n    \n    # Iterate over the roman_numerals dictionary\n    for value, numeral in sorted(roman_numerals.items(), reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n    \n    return result"}
{"idx": 157, "completion": "# Sort the sides to make sure c is the longest side\n    sides = sorted([a, b, c])\n    # Check if the square of the longest side is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Implement your solution here\n    # pass\n    total_eaten = number + min(need, remaining)\n    remaining_after_meals = max(remaining - need, 0)\n    return [total_eaten, remaining_after_meals]"}
{"idx": 160, "completion": "# Convert the operator list to a string representation\n    operator_str = ''.join([op for op in operator])\n    # Convert the operand list to a string representation\n    operand_str = ''.join([str(num) for num in operand])\n    # Combine the operator and operand strings\n    expression = operator_str + operand_str\n    # Evaluate the expression\n    result = eval(expression)\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate the list of even numbers in the range\n    even_digits = [digit for digit in range(a, b + 1) if digit % 2 == 0]\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current_group += char\n        if depth == 0 and current_group:\n            paren_groups.append(current_group)\n            current_group = ''\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError('Input list cannot be empty')\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)  # type: ignore"}
{"idx": 5, "completion": "result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "paren_list = paren_string.split()\n    result = []\n    for paren_group in paren_list:\n        max_depth = 0\n        current_depth = 0\n        for char in paren_group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "result = []\n    current_max = numbers[0]\n    for number in numbers:\n        if number > current_max:\n            current_max = number\n        result.append(current_max)\n    return result"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]\n    return string + string[::-1]"}
{"idx": 11, "completion": "return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    sorted_numbers = sorted(numbers_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_numbers)"}
{"idx": 20, "completion": "numbers.sort()\n    smallest_diff = float(\"inf\")\n    closest_pair = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    return closest_pair"}
{"idx": 21, "completion": "return [(x - min(numbers)) / (max(numbers) - min(numbers)) for x in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i"}
{"idx": 25, "completion": "pass"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"The polynomial must have an even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must be the last one\")\n    if xs[-1] < 0:\n        raise ValueError(\"The largest non-zero coefficient must be positive\")\n\n    # Newton's method\n    x = 1\n    while True:\n        x -= poly(xs, x) / sum([i * math.pow(x, i - 1) for i in range(1, len(xs) + 1)])\n        if abs(poly(xs, x)) < 1e-6:\n            return x"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_list.sort()\n    l_prime = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime.append(even_list.pop(0))\n        else:\n            l_prime.append(l[i])\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 1, 1\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        if is_prime(fib2):\n            prime_fibs.append(fib2)\n        fib1, fib2 = fib2, fib1 + fib2\n    return prime_fibs[-1]"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "nums = set()\n    for x in l:\n        if -x in nums:\n            return True\n        nums.add(x)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for i in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    length = len(l)\n    if length % 2 == 0:\n        return (l[length // 2] + l[length // 2 - 1]) / 2\n    else:\n        return l[length // 2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "assert isinstance(n, int) and isinstance(p, int) and p > 0\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # In case shift is larger than the number of digits\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize a variable to store the number of mango fruits\n    mango_count = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # Check if the current word is \"apples\" or \"oranges\"\n        if words[i] == \"apples\" or words[i] == \"oranges\":\n            # If it is, convert the next word to an integer and subtract it from n\n            n -= int(words[i+1])\n    # Return the value of n, which represents the number of mango fruits\n    return n"}
{"idx": 68, "completion": "# your code here\n    pass"}
{"idx": 69, "completion": "# your code here\n    for i in sorted(lst, reverse=True):\n        if lst.count(i) >= i:\n            return i\n    return -1"}
{"idx": 70, "completion": "return sorted(lst, key=lambda x: (x % 2, x))"}
{"idx": 71, "completion": "if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n            a //= i\n            if len(factors) > 3:\n                return False\n    return len(factors) == 3 and is_prime(a)"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1./3.) == round(a**(1./3.))"}
{"idx": 78, "completion": "# Define the prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize the count of prime digits to 0\n    prime_count = 0\n    # Iterate over each character in the input string\n    for char in num:\n        # If the character is a prime hex digit, increment the count\n        if char in prime_hex_digits:\n            prime_count += 1\n    # Return the count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}\""}
{"idx": 80, "completion": "return len(s) >= 3 and len(set(s[i:i+3] for i in range(len(s)-2))) == len(s)-2"}
{"idx": 81, "completion": "# Your code here\n    grades_list = []\n    for grade in grades:\n        if grade == 4.0:\n            grades_list.append('A+')\n        elif grade > 3.7:\n            grades_list.append('A')\n        elif grade > 3.3:\n            grades_list.append('A-')\n        elif grade > 3.0:\n            grades_list.append('B+')\n        elif grade > 2.7:\n            grades_list.append('B')\n        elif grade > 2.3:\n            grades_list.append('B-')\n        elif grade > 2.0:\n            grades_list.append('C+')\n        elif grade > 1.7:\n            grades_list.append('C')\n        elif grade > 1.3:\n            grades_list.append('C-')\n        elif grade > 1.0:\n            grades_list.append('D+')\n        elif grade > 0.7:\n            grades_list.append('D')\n        elif grade > 0.0:\n            grades_list.append('D-')\n        else:\n            grades_list.append('E')\n    return grades_list"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' is a 1-digit number starting or ending with 1\n    else:\n        # For n > 1, calculate the count\n        # There are 9 * 10^(n-2) numbers that start with 1 (10^(n-1) total starting with 1, minus the one that starts and ends with 1)\n        # There are also 9 * 10^(n-2) numbers that end with 1 (10^(n-1) total ending with 1, minus the one that starts and ends with 1)\n        # We subtract the count of numbers that both start and end with 1 to avoid double-counting\n        return 2 * 9 * 10**(n-2) - 10**(n-2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary representation\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum(x for i, x in enumerate(lst) if x % 2 == 0 and i % 2 != 0)"}
{"idx": 86, "completion": "return ' '.join([''.join(sorted(w)) for w in s.split(' ')])"}
{"idx": 87, "completion": "# Your code here\n    pass"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for char in s:\n        if char in alphabet:\n            index = alphabet.find(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n\n    # Iterate through each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count"}
{"idx": 92, "completion": "if type(x) == int and type(y) == int and type(z) == int:\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n            if char.lower() in vowels:\n                index = vowels.index(char.lower())\n                new_char = vowels[(index + 2) % len(vowels)]\n                encoded_message += new_char.upper() if char.isupper() else new_char.lower()\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = sum(k.islower() for k in dict.keys())\n    upper_case = sum(k.isupper() for k in dict.keys())\n\n    return lower_case == len(dict) or upper_case == len(dict)"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return int(str(a)[-1]) * int(str(b)[-1])"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)"}
{"idx": 100, "completion": "def next_odd(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n + 2\n\n    current_stones = n\n    stones_list = [n]\n    for _ in range(n - 1):\n        if current_stones % 2 == 0:\n            current_stones = next_even(current_stones)\n        else:\n            current_stones = next_odd(current_stones)\n        stones_list.append(current_stones)\n    return stones_list"}
{"idx": 101, "completion": "return [word.strip() for word in s.replace(',', ' ').split()]"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Check if y is even\n    if y % 2 == 0:\n        return y\n    # Check if x is even\n    elif x % 2 == 0:\n        return x\n    # If neither x nor y is even, return -1\n    else:\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "# Mapping of digits to their names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map to names\n    filtered_sorted_reversed = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    result = [digit_names[digit] for digit in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    def count_palindromes(start, end):\n        return sum(1 for i in range(start, end + 1) if is_palindrome(i))\n\n    even_count = count_palindromes(2, n) + count_palindromes(1, n, 2)\n    odd_count = n - even_count\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "return len([x for x in arr if sum_of_digits(x) > 0])"}
{"idx": 109, "completion": "# Check if the array is empty\n    if not arr:\n        return True\n\n    # Find the index of the smallest element\n    smallest_index = arr.index(min(arr))\n\n    # Check if the array is already sorted or can be sorted with one right shift\n    if arr == sorted(arr) or arr == sorted(arr[smallest_index:] + arr[:smallest_index]):\n        return True\n    else:\n        return False"}
{"idx": 110, "completion": "# Your implementation goes here\n    return \"YES\" if sum(lst1) % 2 == 0 and sum(lst2) % 2 == 0 else \"NO\""}
{"idx": 111, "completion": "# Convert the string to a list of letters\n    letters = test.split()\n    # Initialize an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Initialize an empty list to store the letters with the maximum count\n    max_letters = []\n    # Iterate through the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the list\n        if count == max_count:\n            max_letters.append(letter)\n    # Return the dictionary of the letters with the maximum count and their counts\n    return {letter: letter_counts[letter] for letter in max_letters}"}
{"idx": 112, "completion": "for i in c:\n        s=s.replace(i,'')\n    if s==s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'),\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')\n    ) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Your code here\n    return sum([math.ceil(sum(well)/capacity) for well in grid])"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    consonants = \"bcdfghjklmnpqrstvwxyz\"\n    words = s.split()\n    selected_words = []\n    for word in words:\n        count_consonants = sum(1 for char in word.lower() if char in consonants)\n        if count_consonants == n:\n            selected_words.append(word)\n    return selected_words"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return ''"}
{"idx": 119, "completion": "# Your code here\n    # Please delete the \"pass\" statement and fill in your code\n    pass"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0])"}
{"idx": 122, "completion": "pass"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:  # Check if n is odd\n            sequence.append(n)\n        if n % 2 == 0:  # Check if n is even\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(sequence)"}
{"idx": 124, "completion": "# check if the date string is empty\n    if not date:\n        return False\n    # check if the date string is in the format mm-dd-yyyy\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n    # check if the month is valid\n    if not date[:2].isdigit() or int(date[:2]) < 1 or int(date[:2]) > 12:\n        return False\n    # check if the day is valid\n    if not date[3:5].isdigit() or int(date[3:5]) < 1 or int(date[3:5]) > 31:\n        return False\n    # check if the year is valid\n    if not date[6:].isdigit() or int(date[6:]) < 1000 or int(date[6:]) > 9999:\n        return False\n    # check if the number of days is valid for the given month\n    month = int(date[:2])\n    day = int(date[3:5])\n    if month in [1, 3, 5, 7, 8, 10, 12] and day > 31:\n        return False\n    elif month in [4, 6, 9, 11] and day > 30:\n        return False\n    elif month == 2 and day > 29:\n        return False\n    return True"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in txt if ord(c) % 2 != 0])"}
{"idx": 126, "completion": "for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            if lst.count(lst[i]) > 1:\n                return False\n    return True"}
{"idx": 127, "completion": "start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    else:\n        length = end - start\n        return \"YES\" if is_prime(length) else \"NO\""}
{"idx": 128, "completion": "if not arr:\n        return None\n    else:\n        sign = 1\n        magnitude_sum = 0\n        for num in arr:\n            if num == 0:\n                sign = 0\n                break\n            elif num < 0:\n                sign *= -1\n            magnitude_sum += abs(num)\n        return sign * magnitude_sum"}
{"idx": 129, "completion": "# Your code here\n    # 1. find the minimum value in the grid\n    # 2. find the minimum value in the grid that is not in the same row or column as the minimum value in step 1\n    # 3. find the minimum value in the grid that is not in the same row or column as the minimum value in step 2\n    # 4. repeat step 2 and 3 until k paths have been found\n    # 5. return the k paths in a list\n    # 6. if the grid is empty, return an empty list\n    # 7. if k is greater than the number of cells in the grid, return an empty list\n    # 8. if k is 1, return the minimum value in the grid\n    # 9. if k is 2, return the minimum value in the grid and the minimum value in the grid that is not in the same row or column as the minimum value in step 1\n    # 10. if k is 3, return the minimum value in the grid, the minimum value in the grid that is not in the same row or column as the minimum value in step 1, and the minimum value in the grid that is not in the same row or column as the minimum value in step 2\n    # 11. if k is 4, return the minimum value in the grid, the minimum value in the grid that is not in the same row or column as the minimum value in step 1, the minimum value in the grid that is not in the same row or column as the minimum value in step 2, and the minimum value in the grid that is not in the same row or column as the minimum value in step 3\n    # 12. if k is 5, return the minimum value in the grid, the minimum value in the grid that is not in the same row or column as the minimum value in step 1, the minimum value in the grid that is not in the same row or column as the minimum value in step 2, the minimum value in the grid that is not in the same row or column as the minimum value in step 3, and the minimum value in the grid that is not in the same row or column as the minimum value in step 4\n    # 13. if k is 6, return the minimum value in the grid, the"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n    if not has_odd:\n        return 0\n    return product"}
{"idx": 132, "completion": "# Your code here\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return len(stack) % 2 != 0"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return txt[-1].isalpha() and not txt[-1] in string.punctuation"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "# Your code here"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare and return the larger value in its original type\n    if a > b:\n        return a if not isinstance(a, float) else str(a)\n    elif b > a:\n        return b if not isinstance(b, float) else str(b)\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8 or n % 2 != 0:\n        return False\n    else:\n        # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n        return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_length_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_length_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split(\"/\"))\n    n_num, n_den = map(int, n.split(\"/\"))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "# Your code here\n    count = 0\n    for i in nums:\n        if i > 10:\n            if int(str(i)[0]) % 2 != 0 and int(str(i)[-1]) % 2 != 0:\n                count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        planet1_index = planets.index(planet1)\n        planet2_index = planets.index(planet2)\n        if planet1_index < planet2_index:\n            return planets[planet1_index + 1:planet2_index]\n        else:\n            return planets[planet2_index + 1:planet1_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if is_prime(n):\n        return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "for i in range(len(b)):\n        b = b[-1:] + b[:-1]\n        if b in a:\n            return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of numbers to their roman numeral counterparts\n    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n    ]\n    syms = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n    ]\n    roman_numeral = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_numeral += syms[i]\n            number -= val[i]\n        i += 1\n    return roman_numeral.lower()"}
{"idx": 157, "completion": "# Sort the sides to make comparison easier\n    a, b, c = sorted([a, b, c])\n    # Check if the sum of squares of the two smaller sides is equal to the square of the largest side\n    return a*a + b*b == c*c"}
{"idx": 158, "completion": "return max(words, key=lambda x: len(set(x)))"}
{"idx": 159, "completion": "# Your code here\n    return [number + min(need, remaining), max(0, remaining - need)]"}
{"idx": 160, "completion": "# Convert the operator list to a string representation\n    operator_str = ''.join([op for op in operator])\n    \n    # Convert the operand list to a string representation\n    operand_str = ''.join([str(num) for num in operand])\n    \n    # Evaluate the expression\n    result = eval(operator_str.join(operand_str))\n    \n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers and filter for even digits\n    even_digits = [digit for digit in range(a, b + 1) if all(int(d) % 2 == 0 for d in str(digit))]\n\n    return even_digits"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_groups = []\n    current_group = ''\n    depth = 0\n    for char in paren_string:\n        if char == '(':\n            depth += 1\n        elif char == ')':\n            depth -= 1\n        current_group += char\n        if depth == 0:\n            paren_groups.append(current_group)\n            current_group = ''\n    return paren_groups"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "if not numbers:\n        return []\n    result = [numbers[0]]\n    for number in numbers[1:]:\n        result.extend([delimeter, number])\n    return result"}
{"idx": 6, "completion": "paren_string = paren_string.replace(' ', '')\n    paren_list = []\n    for paren in paren_string:\n        if paren == '(':\n            paren_list.append(paren)\n        elif paren == ')':\n            paren_list.pop()\n        if len(paren_list) > 0:\n            max_depth = max(max_depth, len(paren_list))\n    return max_depth"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "return [max(numbers[:i+1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[:i]):\n            return string + string[i:][::-1]"}
{"idx": 11, "completion": "# Convert the strings to integers, perform XOR, and convert back to string\n    xor_result = str(int(a, 2) ^ int(b, 2))\n    return xor_result"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Convert the input string into a list of numbers\n    numbers_list = [number_map[word] for word in numbers.split()]\n\n    # Sort the list of numbers\n    numbers_list.sort()\n\n    # Convert the sorted list of numbers back into a string\n    sorted_numbers = ' '.join([str(num) for num in numbers_list])\n\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest[0] - closest[1]):\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]  # type: ignore"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"idx": 25, "completion": "i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"idx": 26, "completion": "return list(dict.fromkeys(numbers))  # type: ignore"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 != 0:\n        raise ValueError(\"xs must have even number of coefficients\")\n\n    if not xs[-1]:\n        raise ValueError(\"xs must have a non zero last coefficient\")\n\n    # Newton's method\n    x = 0\n    while True:\n        x -= poly(xs, x) / sum([coeff * math.pow(x, i) * i for i, coeff in enumerate(xs)])\n        if abs(poly(xs, x)) < 1e-12:\n            return x"}
{"idx": 33, "completion": "return [sorted([l[i] for i in range(len(l)) if i % 3 == 0]) + l[i] for i in range(len(l)) if i % 3 != 0]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "return sum(1 for i in range(n) if (i % 11 == 0 or i % 13 == 0) and '7' in str(i))"}
{"idx": 37, "completion": "even = sorted([l[i] for i in range(0, len(l), 2)])\n    return [even.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib1, fib2 = 1, 1\n    found = 0\n    while True:\n        fib1, fib2 = fib2, fib1 + fib2\n        if is_prime(fib2):\n            found += 1\n            if found == n:\n                return fib2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for n in l:\n        if -n in seen:\n            return True\n        seen.add(n)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return a * h / 2"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "l = sorted(l)\n    n = len(l)\n    if n % 2 == 1:\n        return l[n // 2]\n    else:\n        return (l[n // 2 - 1] + l[n // 2]) / 2"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "return pow(2, n, p)"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return set(s0) == set(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n - 1) + fib(n - 2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(list(set(l1) & set(l2)))"}
{"idx": 59, "completion": "factors = []\n    # Divide n by 2 to remove all even factors\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # n must be odd at this point, so a skip of 2 (i = i + 2) can be used\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        # While i divides n, append i and divide n\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    # Condition if n is a prime number greater than 2\n    if n > 2:\n        factors.append(n)\n    return max(factors)"}
{"idx": 60, "completion": "return n * (n + 1) // 2"}
{"idx": 61, "completion": "count = 0\n    for bracket in brackets:\n        if bracket == \"(\":\n            count += 1\n        elif bracket == \")\":\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = 'aeiou'\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "num_digits = len(str(x))\n    shift %= num_digits\n    if shift == 0:\n        return str(x)\n    elif shift > num_digits:\n        return ''.join(reversed(str(x)))\n    else:\n        digits = list(str(x))\n        to_rotate = digits[:shift]\n        digits = digits[shift:] + to_rotate\n        return ''.join(digits)"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize the count of apples and oranges\n    apples = 0\n    oranges = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # If the word is \"apples\" or \"oranges\", add its count to the appropriate variable\n        if words[i] == \"apples\":\n            apples = int(words[i-1])\n        elif words[i] == \"oranges\":\n            oranges = int(words[i-1])\n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    # Return the result\n    return mango"}
{"idx": 68, "completion": "return min([(v, i) for i, v in enumerate(arr) if v % 2 == 0], default=[])  # [value, index]"}
{"idx": 69, "completion": "# Your code here\n    freq = {}\n    for i in lst:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    max_val = -1\n    for k, v in freq.items():\n        if k > 0 and k <= v:\n            max_val = max(max_val, k)\n    return max_val"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_list = sorted(lst)\n    result = []\n    # Loop until the sorted list is empty\n    while sorted_list:\n        # Append the minimum value to the result list\n        result.append(sorted_list.pop(0))\n        # If the sorted list is not empty, append the maximum value\n        if sorted_list:\n            result.append(sorted_list.pop())\n    return result"}
{"idx": 71, "completion": "# Sort the sides\n    a, b, c = sorted([a, b, c])\n    # Check if the sides form a valid triangle\n    if a + b > c:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    \n    return changes"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0:\n            factors.append(i)\n            if not is_prime(i):\n                return False\n    if len(factors) == 3:\n        return True\n    return False"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n        if power == x:\n            return True\n    return False"}
{"idx": 77, "completion": "return a**(1/3.) == round(a**(1/3.))"}
{"idx": 78, "completion": "# Your code here\n    # Create a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for prime digits\n    prime_count = 0\n    # Iterate over each character in the input string\n    for digit in num:\n        # If the digit is in the set of prime digits, increment the counter\n        if digit in prime_hex_digits:\n            prime_count += 1\n    # Return the final count of prime digits\n    return prime_count"}
{"idx": 79, "completion": "return f\"db{bin(decimal)[2:]}\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Define the grading scale\n    grading_scale = [\n        (4.0, 'A+'),\n        (3.7, 'A'),\n        (3.3, 'A-'),\n        (3.0, 'B+'),\n        (2.7, 'B'),\n        (2.3, 'B-'),\n        (2.0, 'C+'),\n        (1.7, 'C'),\n        (1.3, 'C-'),\n        (1.0, 'D+'),\n        (0.7, 'D'),\n        (0.0, 'D-'),\n        (-1.0, 'E')\n    ]\n    \n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n    \n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Find the highest grade in the grading scale that is less than or equal to the GPA\n        for i, (grade, letter) in enumerate(grading_scale):\n            if gpa >= grade:\n                # Append the corresponding letter grade to the list\n                letter_grades.append(letter)\n                break\n    \n    return letter_grades"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' is a 1-digit number starting or ending with 1.\n    else:\n        # For n > 1, calculate the count of n-digit numbers starting or ending with 1.\n        # There are 9 * 10^(n-2) ways to choose the middle digits of the number,\n        # and 2 ways to choose the first or last digit to be 1, minus the case where\n        # both first and last are 1, which is counted twice.\n        return 2 * (10 ** (n - 1) - 10 ** (n - 2)) + 9 ** (n - 1)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary representation\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum([lst[i] for i in range(len(lst)) if i % 2 != 0 and lst[i] % 2 == 0])"}
{"idx": 86, "completion": "words = s.split()\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if sum(array[0:2]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "# Your code here\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            index = alphabet.find(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "if len(lst) < 2:\n        return None\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    unique_lst.sort()\n    return unique_lst[1]"}
{"idx": 91, "completion": "# Split the string into sentences based on '.', '?' or '!'\n    sentences = re.split(r'[.?!]', S)\n    boredom_count = 0\n    for sentence in sentences:\n        # Check if the sentence starts with the word \"I\"\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n    return boredom_count"}
{"idx": 92, "completion": "return x + y == z or x + z == y or y + z == x and isinstance(x, int) and isinstance(y, int) and isinstance(z, int)"}
{"idx": 93, "completion": "vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = sum(k.islower() for k in dict.keys())\n    upper_case = sum(k.isupper() for k in dict.keys())\n\n    return lower_case == len(dict) or upper_case == len(dict)"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(0, len(s), 2) if s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value > 0:\n        return int(value + 0.5)\n    else:\n        return int(value - 0.5)"}
{"idx": 100, "completion": "def next_odd(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    def next_even(n):\n        return n + 1 if n % 2 == 0 else n + 2\n\n    def stones_in_level(n, level):\n        if level == 1:\n            return n\n        elif n % 2 == 0:\n            return next_odd(n)\n        else:\n            return next_even(n)\n\n    return [stones_in_level(n, i) for i in range(1, n + 1)]"}
{"idx": 101, "completion": "# Split the string by commas and spaces, and filter out any empty strings that may result from consecutive delimiters.\n    words = [word.strip() for word in re.split(',| ', s) if word.strip()]\n    return words"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Check if y is even and in the range [x, y]\n    if y >= x and y % 2 == 0:\n        return y\n    # Check if x is even and in the range [x, y]\n    elif x % 2 == 0:\n        return x\n    # If none of the above conditions are met, return -1\n    else:\n        return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any([int(j) % 2 == 0 for j in str(i)])])"}
{"idx": 105, "completion": "# Mapping of digits to their names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, reverse, and map to names\n    filtered_sorted_reversed = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    result = [digit_names[digit] for digit in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i + 1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        \"\"\"Return the sum of the digits of a number.\"\"\"\n        return sum(int(digit) for digit in str(abs(n)))\n\n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"idx": 109, "completion": "# If the array is empty, return True\n    if not arr:\n        return True\n\n    # Find the index where the array breaks the non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break\n    else:\n        # If the loop completes without breaking, the array is already sorted\n        return True\n\n    # Perform a right shift operation\n    arr = arr[i + 1:] + arr[:i + 1]\n\n    # Check if the array is sorted after the shift\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    pass"}
{"idx": 111, "completion": "# Convert the string to a list of characters\n    letters = test.split()\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n    # Iterate over the list of characters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        # Otherwise, add the letter to the dictionary with a count of 1\n        else:\n            letter_counts[letter] = 1\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n    # Create a new dictionary to store the letters with the maximum count\n    max_letters = {}\n    # Iterate over the dictionary\n    for letter, count in letter_counts.items():\n        # If the count is equal to the maximum count, add the letter to the new dictionary\n        if count == max_count:\n            max_letters[letter] = count\n    # Return the new dictionary\n    return max_letters"}
{"idx": 112, "completion": "result = \"\"\n    for i in s:\n        if i not in c:\n            result += i\n    return (result, result == result[::-1])"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'), \n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'), \n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9'), \n        s.count('1') + s.count('3') + s.count('5') + s.count('7') + s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "# Write your code here.\n    # Your code here\n    total_water = 0\n    for row in grid:\n        total_water += sum(row)\n    \n    return math.ceil(total_water / capacity)"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.lower() not in vowels and char.isalpha():\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "# Your code here\n    open_parens = 0\n    close_parens = 0\n    for i in range(len(lst[0])):\n        if lst[0][i] == '(':\n            open_parens += 1\n        else:\n            close_parens += 1\n    for i in range(len(lst[1])):\n        if lst[1][i] == '(':\n            open_parens += 1\n        else:\n            close_parens += 1\n    if open_parens == close_parens:\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 120, "completion": "return sorted(arr, reverse=True)[:k]"}
{"idx": 121, "completion": "return sum([x for i, x in enumerate(lst) if i % 2 == 0 and x % 2 != 0])"}
{"idx": 122, "completion": "return sum([x for x in arr[:k] if x >= 10 and x <= 99])"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(set(sequence))"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if \" \" in txt:\n        return txt.split(\" \")\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        return len([i for i in txt if (ord(i) - ord('a')) % 2 == 1])"}
{"idx": 126, "completion": "return lst == sorted(set(lst))"}
{"idx": 127, "completion": "def isPrime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    length = end - start\n    return \"YES\" if isPrime(length) else \"NO\""}
{"idx": 128, "completion": "if len(arr) == 0:\n        return None\n\n    # Calculate the product of all signs\n    sign_product = 1\n    for num in arr:\n        if num == 0:\n            sign_product = 0\n            break\n        elif num < 0:\n            sign_product *= -1\n\n    # Calculate the sum of magnitudes\n    magnitude_sum = sum(abs(num) for num in arr)\n\n    # Return the product of the sign product and magnitude sum\n    return sign_product * magnitude_sum"}
{"idx": 129, "completion": "N = len(grid)\n    directions = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    visited = set()\n    heap = [(grid[0][0], 0, 0)]\n    heapq.heapify(heap)\n    while heap:\n        val, x, y = heapq.heappop(heap)\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if len(visited) == k:\n            return [grid[x][y] for x, y in visited]\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in visited:\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n    return []"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    for digit in str(n):\n        digit = int(digit)\n        if digit % 2 == 1:\n            has_odd = True\n            product *= digit\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    # If stack is not empty, it means there are unclosed brackets\n    return len(stack) > 0 or any(char == '[' for char in string)"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "return txt and txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha())"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negatives = [x for x in lst if x < 0]\n    positives = [x for x in lst if x > 0]\n    \n    largest_negative = max(negatives) if negatives else None\n    smallest_positive = min(positives) if positives else None\n    \n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values and return the correct variable type\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Check if n is even and greater than or equal to the smallest sum of 4 even numbers (2+2+2+2=8)\n    return n % 2 == 0 and n >= 8"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = list(text)\n    for i in range(len(text)):\n        if text[i] == ' ':\n            if i < len(text) - 1 and text[i + 1] == ' ':\n                while i < len(text) - 1 and text[i + 1] == ' ':\n                    text[i] = '-'\n                    i += 1\n                text[i] = '_'\n            else:\n                text[i] = '_'\n    return ''.join(text)"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "# Function to check if a number is prime\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Filter words with prime length\n    prime_words = [word for word in words if is_prime(len(word))]\n\n    # Join the filtered words back into a sentence\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))"}
{"idx": 146, "completion": "count = 0\n    for num in nums:\n        if num > 10 and isOddFirstAndLastDigit(num):\n            count += 1\n    return count"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1) if planet1 in planets else -1\n    planet2_index = planets.index(planet2) if planet2 in planets else -1\n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    else:\n        return planets[planet1_index + 1:planet2_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    filtered_list = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(guess[i]-game[i]) for i in range(len(guess))]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "# Convert the first word to a set of substrings of the same length as the second word\n    substrings = set()\n    for i in range(len(a) - len(b) + 1):\n        substrings.add(a[i:i+len(b)])\n    \n    # Check if the second word or any of its rotations is in the set of substrings\n    for i in range(len(b)):\n        if b in substrings:\n            return True\n        b = b[1:] + b[0]\n    \n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n    roman_string = \"\"\n    for value in sorted(roman_numerals.keys(), reverse=True):\n        while number >= value:\n            roman_string += roman_numerals[value]\n            number -= value\n    return roman_string"}
{"idx": 157, "completion": "# Sort the sides to make sure c is the longest side\n    a, b, c = sorted([a, b, c])\n    return a**2 + b**2 == c**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: (len(set(x)), x))"}
{"idx": 159, "completion": "# Your code here\n    return [number + min(need, remaining), max(0, remaining - need)]"}
{"idx": 160, "completion": "# Convert the operator list into a string representation\n    operator_str = ''.join([op if op in ['+', '-', '*', '//', '**'] else ' ' for op in operator])\n    # Convert the operand list into a string representation\n    operand_str = ''.join([str(num) for num in operand])\n    # Combine the operator and operand strings\n    expression = operator_str.join(operand_str.split())\n    # Evaluate the expression\n    result = eval(expression)\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if not text:\n        return None\n    return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers and filter for even digits\n    return [digit for digit in range(a, b + 1) if all(int(d) % 2 == 0 for d in str(digit))]"}
{"idx": 0, "completion": "numbers.sort()\n    for i in range(len(numbers) - 1):\n        if numbers[i + 1] - numbers[i] < threshold:\n            return True\n    return False"}
{"idx": 1, "completion": "paren_string = paren_string.replace(\" \", \"\")\n    stack = []\n    result = []\n    current_group = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current_group += char\n        elif char == \")\":\n            if stack:\n                stack.pop()\n                current_group += char\n                if not stack:\n                    result.append(current_group)\n                    current_group = \"\"\n            else:\n                raise ValueError(\"Unbalanced parentheses\")\n    return result"}
{"idx": 2, "completion": "return number - int(number)"}
{"idx": 3, "completion": "balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"idx": 4, "completion": "if not numbers:\n        raise ValueError('The list of numbers is empty')\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)"}
{"idx": 5, "completion": "result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"}
{"idx": 6, "completion": "result = []\n    for group in paren_string.split(' '):\n        depth = 0\n        max_depth = 0\n        for char in group:\n            if char == '(':\n                depth += 1\n                max_depth = max(max_depth, depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n    return result"}
{"idx": 7, "completion": "return [s for s in strings if substring in s]"}
{"idx": 8, "completion": "if not numbers:\n        return 0, 1\n    else:\n        return sum(numbers), reduce(lambda x, y: x * y, numbers)"}
{"idx": 9, "completion": "return [max(numbers[:i + 1]) for i in range(len(numbers))]"}
{"idx": 10, "completion": "if is_palindrome(string):\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string"}
{"idx": 11, "completion": "result = ''\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result"}
{"idx": 12, "completion": "if not strings:\n        return None\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n    return longest_string"}
{"idx": 13, "completion": "while b != 0:\n        a, b = b, a % b\n    return a"}
{"idx": 14, "completion": "return [string[:i] for i in range(1, len(string) + 1)]"}
{"idx": 15, "completion": "return ' '.join(str(i) for i in range(n + 1))"}
{"idx": 16, "completion": "return len(set(string.lower()))"}
{"idx": 17, "completion": "return [4 if x == 'o' else 2 if x == 'o|' else 1 for x in music_string.split()]"}
{"idx": 18, "completion": "return sum(1 for i in range(len(string)) if string.startswith(substring, i))"}
{"idx": 19, "completion": "# Convert the string of numbers into a list of integers\n    number_list = [int(num) for num in numbers.split()]\n    # Sort the list of integers\n    number_list.sort()\n    # Convert the list of integers back into a string\n    sorted_numbers = ' '.join([str(num) for num in number_list])\n    return sorted_numbers"}
{"idx": 20, "completion": "numbers.sort()\n    closest = (numbers[0], numbers[1])\n    for i in range(1, len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < abs(closest[0] - closest[1]):\n            closest = (numbers[i], numbers[i + 1])\n    return closest"}
{"idx": 21, "completion": "if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n\n    return [(num - min_num) / range_num for num in numbers]"}
{"idx": 22, "completion": "return [value for value in values if isinstance(value, int)]"}
{"idx": 23, "completion": "return len(string)"}
{"idx": 24, "completion": "for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"}
{"idx": 25, "completion": "pass"}
{"idx": 26, "completion": "seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            result.append(number)\n            seen.add(number)\n    return result"}
{"idx": 27, "completion": "return ''.join([char.upper() if char.islower() else char.lower() for char in string])"}
{"idx": 28, "completion": "return ''.join(strings)"}
{"idx": 29, "completion": "return [s for s in strings if s.startswith(prefix)]"}
{"idx": 30, "completion": "return [i for i in l if i > 0]"}
{"idx": 31, "completion": "if n == 1:\n        return False\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            return False\n    return True"}
{"idx": 32, "completion": "if len(xs) % 2 == 1:\n        raise ValueError(\"xs must have an even number of coefficients\")\n    if xs[-1] == 0:\n        raise ValueError(\"xs must have a non-zero last coefficient\")\n    if len(xs) == 2:\n        return -xs[0] / xs[1]\n    a = find_zero(xs[:-2])\n    b = find_zero(xs[-2:])\n    return (a + b) / 2"}
{"idx": 33, "completion": "return [sorted(l[::3]) if i % 3 == 0 else l[i] for i in range(len(l))]"}
{"idx": 34, "completion": "return sorted(set(l))"}
{"idx": 35, "completion": "return max(l)"}
{"idx": 36, "completion": "count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"idx": 37, "completion": "even_list = [l[i] for i in range(len(l)) if i % 2 == 0]\n    even_list.sort()\n    l_prime = l.copy()\n    for i in range(len(l)):\n        if i % 2 == 0:\n            l_prime[i] = even_list.pop(0)\n    return l_prime"}
{"idx": 38, "completion": "# split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group backwards. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"idx": 39, "completion": "def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    fib_1, fib_2 = 1, 1\n    found = 0\n    while True:\n        if is_prime(fib_2):\n            found += 1\n            if found == n:\n                return fib_2\n        fib_1, fib_2 = fib_2, fib_1 + fib_2"}
{"idx": 40, "completion": "for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"idx": 41, "completion": "return n"}
{"idx": 42, "completion": "return [x + 1 for x in l]"}
{"idx": 43, "completion": "seen = set()\n    for num in l:\n        target = -num\n        if target in seen:\n            return True\n        seen.add(num)\n    return False"}
{"idx": 44, "completion": "if x == 0:\n        return '0'\n    digits = []\n    while x:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"}
{"idx": 45, "completion": "return 0.5 * a * h"}
{"idx": 46, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d"}
{"idx": 47, "completion": "# Sort list\n    l.sort()\n    # Get length of list\n    n = len(l)\n    # Check if list is even or odd\n    if n % 2 == 0:\n        # If even, return average of middle two numbers\n        return (l[n//2] + l[n//2 - 1]) / 2\n    else:\n        # If odd, return middle number\n        return l[n//2]"}
{"idx": 48, "completion": "return text == text[::-1]"}
{"idx": 49, "completion": "if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return modp(n - 1, p) * 2 % p"}
{"idx": 50, "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"idx": 51, "completion": "vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])"}
{"idx": 52, "completion": "return all(x < t for x in l)"}
{"idx": 53, "completion": "return x + y"}
{"idx": 54, "completion": "return sorted(s0) == sorted(s1)"}
{"idx": 55, "completion": "if n == 1 or n == 2:\n        return 1\n    return fib(n-1) + fib(n-2)"}
{"idx": 56, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack"}
{"idx": 57, "completion": "return all(x <= y for x, y in zip(l, l[1:])) or all(x >= y for x, y in zip(l, l[1:]))"}
{"idx": 58, "completion": "return sorted(set(l1) & set(l2))"}
{"idx": 59, "completion": "def is_prime(num):\n        \"\"\"Check if a number is prime.\"\"\"\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    # Start from the largest possible factor and work downwards\n    for factor in range(n // 2, 1, -1):\n        if n % factor == 0 and is_prime(factor):\n            return factor"}
{"idx": 60, "completion": "return sum(range(1, n + 1))"}
{"idx": 61, "completion": "stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"idx": 62, "completion": "return [i * xs[i] for i in range(1, len(xs))]"}
{"idx": 63, "completion": "if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c"}
{"idx": 64, "completion": "vowels = \"aeiou\"\n    count = sum(1 for char in s if char.lower() in vowels)\n    if s[-1].lower() == 'y':\n        count += 1\n    return count"}
{"idx": 65, "completion": "# Convert the integer to a string to manipulate digits\n    digits = str(x)\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, reverse the digits\n    if shift > num_digits:\n        return digits[::-1]\n    else:\n        # Perform the circular shift\n        shift %= num_digits  # In case shift is larger than the number of digits\n        return digits[-shift:] + digits[:-shift]"}
{"idx": 66, "completion": "return sum(ord(c) for c in s if c.isupper())"}
{"idx": 67, "completion": "# Split the string into a list of words\n    words = s.split()\n    # Initialize a variable to store the number of mangoes\n    mangoes = 0\n    # Iterate over the words in the list\n    for i in range(len(words)):\n        # If the word is \"apples\" or \"oranges\", subtract its count from the total number of fruits\n        if words[i] == \"apples\":\n            n -= int(words[i-1])\n        elif words[i] == \"oranges\":\n            n -= int(words[i-1])\n    # Return the number of mangoes\n    return n"}
{"idx": 68, "completion": "# your code here\n    pass"}
{"idx": 69, "completion": "# Your code here\n    pass"}
{"idx": 70, "completion": "# Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Initialize an empty list to store the result\n    result = []\n    \n    # Loop until the sorted list is empty\n    while sorted_lst:\n        # Append the minimum value to the result list\n        result.append(sorted_lst.pop(0))\n        \n        # If the sorted list is empty, break the loop\n        if not sorted_lst:\n            break\n        \n        # Append the maximum value to the result list\n        result.append(sorted_lst.pop(-1))\n    \n    return result"}
{"idx": 71, "completion": "# Sort the sides\n    a, b, c = sorted([a, b, c])\n    # Check if the sides form a valid triangle\n    if a + b > c:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        # Return the area rounded to 2 decimal points\n        return round(area, 2)\n    else:\n        # Return -1 if the sides do not form a valid triangle\n        return -1"}
{"idx": 72, "completion": "return q == q[::-1] and sum(q) <= w"}
{"idx": 73, "completion": "changes_needed = 0\n    left = 0\n    right = len(arr) - 1\n    \n    while left < right:\n        if arr[left] != arr[right]:\n            changes_needed += 1\n        left += 1\n        right -= 1\n    \n    return changes_needed"}
{"idx": 74, "completion": "# Your code here\n    return lst1 if sum(len(i) for i in lst1) < sum(len(i) for i in lst2) else lst2"}
{"idx": 75, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    factors = []\n    for i in range(2, a):\n        if a % i == 0 and is_prime(i):\n            factors.append(i)\n        if len(factors) > 3:\n            return False\n    return len(factors) == 3"}
{"idx": 76, "completion": "if x == 1:\n        return True\n    if n == 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x = x / n\n    return True"}
{"idx": 77, "completion": "return a**(1/3) == round(a**(1/3))"}
{"idx": 78, "completion": "# Your code here\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"idx": 79, "completion": "binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"idx": 80, "completion": "if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True"}
{"idx": 81, "completion": "# Define the GPA thresholds for each letter grade\n    thresholds = [4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]\n    grades = []\n    for gpa in grades:\n        # Find the index of the first GPA threshold that is less than or equal to the student's GPA\n        index = next(i for i, threshold in enumerate(thresholds) if gpa >= threshold)\n        # Use the index to determine the corresponding letter grade\n        letter_grade = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-'][index]\n        grades.append(letter_grade)\n    return grades"}
{"idx": 82, "completion": "return is_prime(len(string))"}
{"idx": 83, "completion": "if n == 1:\n        return 1  # Only '1' is a 1-digit number starting or ending with 1\n    else:\n        # For n > 1, calculate the count of such numbers\n        # There are 9 * 10^(n-2) ways to choose the middle digits\n        # There are 2 * 10^(n-1) total ways to start or end with 1\n        # Subtract the overlap (numbers that start AND end with 1, counted twice)\n        # which is 10^(n-2)\n        return 2 * 10**(n-1) - 10**(n-2)"}
{"idx": 84, "completion": "# Convert the number to binary\n    binary = format(N, 'b')\n    # Initialize the sum of digits\n    sum_of_digits = 0\n    # Iterate over each digit in the binary representation\n    for digit in binary:\n        # Convert the digit back to an integer and add it to the sum\n        sum_of_digits += int(digit)\n    # Convert the sum of digits to a binary string and return it\n    return format(sum_of_digits, 'b')"}
{"idx": 85, "completion": "return sum(lst[i] for i in range(len(lst)) if i%2!=0 and lst[i]%2==0)"}
{"idx": 86, "completion": "words = s.split(' ')\n    result = []\n    for word in words:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ' '.join(result)"}
{"idx": 87, "completion": "return sorted([(i, lst[i].index(x)) for i in range(len(lst)) if x in lst[i]], key=lambda x: (-x[1], x[0]))"}
{"idx": 88, "completion": "if not array:\n        return []\n    if len(array) == 1:\n        return [array[0]]\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)"}
{"idx": 89, "completion": "alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    encrypted = ''\n    for char in s:\n        if char in alphabet:\n            index = alphabet.index(char)\n            new_index = (index + 4) % 26\n            encrypted += alphabet[new_index]\n        else:\n            encrypted += char\n    return encrypted"}
{"idx": 90, "completion": "# Sort the list in ascending order\n    sorted_lst = sorted(lst)\n    \n    # Check if there are at least 2 unique elements\n    if len(sorted_lst) < 2:\n        return None\n    \n    # Find the second smallest element\n    second_smallest = None\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] != sorted_lst[0]:\n            second_smallest = sorted_lst[i]\n            break\n    \n    return second_smallest"}
{"idx": 91, "completion": "count = 0\n    for sentence in S.split('.'):\n        if sentence.startswith('I'):\n            count += 1\n    return count"}
{"idx": 92, "completion": "if x + y == z or x + z == y or y + z == x:\n        return True\n    else:\n        return False"}
{"idx": 93, "completion": "vowels = 'aeiou'\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n            if encoded_char in vowels:\n                encoded_char = chr(ord(encoded_char) + 2)\n            encoded_message += encoded_char\n        else:\n            encoded_message += char\n    return encoded_message"}
{"idx": 94, "completion": "def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    max_prime = None\n    for num in lst:\n        if is_prime(num):\n            if max_prime is None or num > max_prime:\n                max_prime = num\n\n    if max_prime is None:\n        return 0\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"idx": 95, "completion": "if not dict:\n        return False\n\n    lower_case = all(k.islower() for k in dict.keys())\n    upper_case = all(k.isupper() for k in dict.keys())\n\n    return lower_case or upper_case"}
{"idx": 96, "completion": "primes = []\n    for num in range(2, n):\n        if is_prime(num):\n            primes.append(num)\n    return primes"}
{"idx": 97, "completion": "return (a % 10) * (b % 10)"}
{"idx": 98, "completion": "vowels = 'AEIOU'\n    return sum(1 for i in range(len(s)) if i % 2 == 0 and s[i] in vowels)"}
{"idx": 99, "completion": "value = float(value)\n    if value < 0:\n        return int(value - 0.5)\n    else:\n        return int(value + 0.5)"}
{"idx": 100, "completion": "def next_odd(n):\n        return n + 2 if n % 2 == 0 else n + 1\n\n    def next_even(n):\n        return n + 2 if n % 2 != 0 else n + 1\n\n    stones = [n]\n    for _ in range(n - 1):\n        if stones[-1] % 2 == 0:\n            stones.append(next_even(stones[-1]))\n        else:\n            stones.append(next_odd(stones[-1]))\n    return stones"}
{"idx": 101, "completion": "# Split the string by commas and spaces, and filter out any empty strings that may result from consecutive delimiters\n    words = [word for word in re.split(',\\s*|\\s+', s) if word]\n    return words"}
{"idx": 102, "completion": "# Check if x is greater than y\n    if x > y:\n        return -1\n    # Iterate from y to x to find the biggest even number\n    for i in range(y, x-1, -1):\n        if i % 2 == 0:\n            return i\n    # If no even number is found, return -1\n    return -1"}
{"idx": 103, "completion": "if n > m:\n        return -1\n    else:\n        avg = round((sum(range(n, m + 1)) / (m - n + 1)))\n        return bin(avg)"}
{"idx": 104, "completion": "return sorted([i for i in x if not any(int(digit) % 2 == 0 for digit in str(i))])"}
{"idx": 105, "completion": "# Dictionary to map digits to their corresponding names\n    digit_names = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n        6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter the array to include only numbers between 1 and 9, then sort and reverse\n    filtered_sorted_reversed = sorted([x for x in arr if 1 <= x <= 9], reverse=True)\n    \n    # Map the filtered, sorted, reversed array to their names\n    result = [digit_names[x] for x in filtered_sorted_reversed]\n    \n    return result"}
{"idx": 106, "completion": "result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"idx": 107, "completion": "def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"idx": 108, "completion": "def sum_of_digits(n):\n        if n < 0:\n            return sum(int(d) for d in str(n)[1:])\n        else:\n            return sum(int(d) for d in str(n))\n    \n    return sum(1 for num in arr if sum_of_digits(num) > 0)"}
{"idx": 109, "completion": "n = len(arr)\n    if n == 0:\n        return True\n    # Find the index of the smallest element\n    min_index = arr.index(min(arr))\n    # Check if the array is sorted in non-decreasing order after performing\n    # right shift operations\n    for i in range(min_index, min_index + n):\n        if i < n - 1 and arr[i] > arr[i + 1]:\n            return False\n    return True"}
{"idx": 110, "completion": "# Your implementation goes here\n    pass"}
{"idx": 111, "completion": "if not test:\n        return {}\n    test = test.split()\n    d = {}\n    for i in test:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d"}
{"idx": 112, "completion": "for i in c:\n        s = s.replace(i,'')\n    if s == s[::-1]:\n        return (s,True)\n    else:\n        return (s,False)"}
{"idx": 113, "completion": "return [\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9'),s.count('1')+s.count('3')+s.count('5')+s.count('7')+s.count('9')) for s in lst]"}
{"idx": 114, "completion": "min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"idx": 115, "completion": "return sum([math.ceil(sum(well)/capacity) for well in grid])"}
{"idx": 116, "completion": "return sorted(arr, key=lambda x: (bin(x).count('1'), x))"}
{"idx": 117, "completion": "vowels = \"aeiou\"\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = sum(1 for char in word if char.lower() not in vowels)\n        if consonants == n:\n            result.append(word)\n    return result"}
{"idx": 118, "completion": "vowels = 'aeiouAEIOU'\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\""}
{"idx": 119, "completion": "# Your code here\n    pass"}
{"idx": 120, "completion": "# Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"idx": 121, "completion": "return sum(num for i, num in enumerate(lst) if i % 2 == 0 and num % 2 != 0)"}
{"idx": 122, "completion": "# Your code here\n    pass"}
{"idx": 123, "completion": "sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            sequence.append(n)\n        n = n / 2 if n % 2 == 0 else 3 * n + 1\n    sequence.append(1)  # The sequence always ends with 1\n    return sorted(set(sequence))"}
{"idx": 124, "completion": "try:\n        date = date.split('-')\n        month = int(date[0])\n        day = int(date[1])\n        year = int(date[2])\n        if month < 1 or month > 12:\n            return False\n        if day < 1 or day > 31:\n            return False\n        if month in [4, 6, 9, 11] and day > 30:\n            return False\n        if month == 2 and day > 29:\n            return False\n        return True\n    except:\n        return False"}
{"idx": 125, "completion": "if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if ord(c) % 2 == 1)"}
{"idx": 126, "completion": "return lst == sorted(set(lst))"}
{"idx": 127, "completion": "def isPrime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    start1, end1 = interval1\n    start2, end2 = interval2\n    start = max(start1, start2)\n    end = min(end1, end2)\n    if start > end:\n        return \"NO\"\n    intersection_length = end - start\n    return \"YES\" if isPrime(intersection_length) else \"NO\""}
{"idx": 128, "completion": "if len(arr) == 0:\n        return None\n    else:\n        return sum([abs(x) for x in arr]) * math.prod([math.copysign(1, x) for x in arr])"}
{"idx": 129, "completion": "N = len(grid)\n    path = []\n    for i in range(N):\n        for j in range(N):\n            path.append([grid[i][j], i, j])\n    path.sort()\n    path = [path[i][1:] for i in range(len(path))]\n    ans = []\n    def dfs(path, k):\n        if k == 0:\n            return True\n        for i in range(len(path)):\n            if i > 0 and path[i][0] == path[i-1][0]:\n                continue\n            ans.append(path[i][0])\n            if dfs(path[:i] + path[i+1:], k-1):\n                return True\n            ans.pop()\n        return False\n    dfs(path, k)\n    return ans"}
{"idx": 130, "completion": "if n == 0:\n        return []\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return [1, 3, 2]\n    else:\n        tri_list = [1, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_list.append(1 + i // 2)\n            else:\n                tri_list.append(tri_list[i - 1] + tri_list[i - 2] + tri_list[i + 1])\n        return tri_list[:n + 1]"}
{"idx": 131, "completion": "product = 1\n    has_odd = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            has_odd = True\n            product *= digit\n        n //= 10\n    return product if has_odd else 0"}
{"idx": 132, "completion": "stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n            if len(stack) > 0:\n                return True\n    return False"}
{"idx": 133, "completion": "return round(sum([math.ceil(i)**2 for i in lst]))"}
{"idx": 134, "completion": "if txt == \"\":\n        return False\n    if txt[-1].isalpha() and txt[-1] != \" \":\n        return True\n    return False"}
{"idx": 135, "completion": "for i in range(len(arr)-1, 0, -1):\n        if arr[i] < arr[i-1]:\n            return i\n    return -1"}
{"idx": 136, "completion": "negative_integers = [num for num in lst if num < 0]\n    positive_integers = [num for num in lst if num > 0]\n\n    largest_negative = max(negative_integers) if negative_integers else None\n    smallest_positive = min(positive_integers) if positive_integers else None\n\n    return (largest_negative, smallest_positive)"}
{"idx": 137, "completion": "# Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(',', '.'))\n    if isinstance(b, str):\n        b = float(b.replace(',', '.'))\n\n    # Compare the values\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None"}
{"idx": 138, "completion": "# Since the smallest sum of 4 even numbers is 2+2+2+2=8, any number less than 8 cannot be expressed as such.\n    if n < 8 or n % 2 != 0:\n        return False\n    # If n is even and greater than or equal to 8, it can always be expressed as the sum of 4 even numbers.\n    return True"}
{"idx": 139, "completion": "result = 1\n    for i in range(1, n + 1):\n        result *= math.factorial(i)\n    return result"}
{"idx": 140, "completion": "text = re.sub(r' {2,}', '-', text)\n    text = re.sub(r' ', '_', text)\n    return text"}
{"idx": 141, "completion": "import re\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]{0,}(\\d{0,3})\\.(txt|exe|dll)$'\n    if re.match(pattern, file_name):\n        return 'Yes'\n    else:\n        return 'No'"}
{"idx": 142, "completion": "sum = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 == 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n    return sum"}
{"idx": 143, "completion": "def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"idx": 144, "completion": "x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n    return (x_num * n_num) % (x_den * n_den) == 0"}
{"idx": 145, "completion": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), x))"}
{"idx": 146, "completion": "# Define a helper function to check if a number is greater than 10\n    # and both its first and last digits are odd\n    def is_special(num):\n        if num <= 10:\n            return False\n        str_num = str(abs(num))\n        first_digit = int(str_num[0])\n        last_digit = int(str_num[-1])\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n\n    # Use the filter function to filter the numbers that satisfy the condition\n    special_nums = filter(is_special, nums)\n\n    # Return the count of the filtered numbers\n    return len(list(special_nums))"}
{"idx": 147, "completion": "a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"idx": 148, "completion": "planets = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    planet1_index = planets.index(planet1) if planet1 in planets else -1\n    planet2_index = planets.index(planet2) if planet2 in planets else -1\n    if planet1_index == -1 or planet2_index == -1:\n        return ()\n    elif planet1_index > planet2_index:\n        return ()\n    else:\n        return planets[planet1_index + 1:planet2_index]"}
{"idx": 149, "completion": "# Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the list by length of each word, then alphabetically\n    sorted_list = sorted(even_length_strings, key=lambda x: (len(x), x))\n    return sorted_list"}
{"idx": 150, "completion": "if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return y\n        else:\n            return x\n    else:\n        return y"}
{"idx": 151, "completion": "return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)"}
{"idx": 152, "completion": "return [abs(x-y) for x,y in zip(game,guess)]"}
{"idx": 153, "completion": "strongest_extension = None\n    strongest_strength = float('-inf')\n    for extension in extensions:\n        cap = sum(1 for char in extension if char.isupper())\n        sm = sum(1 for char in extension if char.islower())\n        strength = cap - sm\n        if strength > strongest_strength:\n            strongest_strength = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\""}
{"idx": 154, "completion": "if b in a:\n        return True\n    else:\n        for i in range(1,len(b)):\n            b = b[1:]+b[0]\n            if b in a:\n                return True\n    return False"}
{"idx": 155, "completion": "even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"idx": 156, "completion": "# Define the mapping of numbers to their roman numeral counterparts\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    roman_string = \"\"\n    for value, symbol in roman_numerals:\n        while number >= value:\n            roman_string += symbol\n            number -= value\n    return roman_string"}
{"idx": 157, "completion": "# Sort the sides to ensure the largest side is considered as the hypotenuse\n    sides = sorted([a, b, c])\n    # Check if the sum of squares of the two smaller sides equals the square of \n    # the largest side\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"idx": 158, "completion": "return max(words, key=lambda x: len(set(x)))"}
{"idx": 159, "completion": "# Your code here\n    if need <= remaining:\n        return [number + need, remaining - need]\n    else:\n        return [number + remaining, 0]"}
{"idx": 160, "completion": "# Convert the operator list into a string representation\n    operator_str = ''.join([op for op in operator])\n    # Convert the operand list into a string representation\n    operand_str = ''.join([str(num) for num in operand])\n    # Combine the operator and operand strings\n    expression = operator_str + operand_str\n    # Evaluate the expression\n    result = eval(expression)\n    return result"}
{"idx": 161, "completion": "if s.isalpha():\n        return s.swapcase()\n    else:\n        return s[::-1]"}
{"idx": 162, "completion": "if text == '':\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"idx": 163, "completion": "# Ensure a is less than b for the range function\n    if a > b:\n        a, b = b, a\n\n    # Generate the range of numbers, filter even numbers, and sort them\n    even_digits = sorted([digit for digit in range(a, b + 1) if digit % 2 == 0])\n\n    return even_digits"}
